
EVA_FrontZoneECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a34  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c64  08003c64  0000501c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c64  08003c64  0000501c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c64  08003c64  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c64  08003c64  00004c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c68  08003c68  00004c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003c6c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003494  2000001c  08003c88  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200034b0  08003c88  000054b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009511  00000000  00000000  00005045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df1  00000000  00000000  0000e556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00010348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000844  00000000  00000000  00010df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cd5  00000000  00000000  00011634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf2a  00000000  00000000  00029309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e3c  00000000  00000000  00036233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf06f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b7c  00000000  00000000  000bf0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c1c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b28 	.word	0x08003b28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003b28 	.word	0x08003b28

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_DMA_Init+0x58>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a13      	ldr	r2, [pc, #76]	@ (80006a0 <MX_DMA_Init+0x58>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_DMA_Init+0x58>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	200c      	movs	r0, #12
 800066c:	f001 f849 	bl	8001702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000670:	200c      	movs	r0, #12
 8000672:	f001 f862 	bl	800173a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200d      	movs	r0, #13
 800067c:	f001 f841 	bl	8001702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000680:	200d      	movs	r0, #13
 8000682:	f001 f85a 	bl	800173a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	2010      	movs	r0, #16
 800068c:	f001 f839 	bl	8001702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000690:	2010      	movs	r0, #16
 8000692:	f001 f852 	bl	800173a <HAL_NVIC_EnableIRQ>

}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <MX_GPIO_Init+0x28>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <MX_GPIO_Init+0x28>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <MX_GPIO_Init+0x28>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 feb7 	bl	8001448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f995 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f7ff ffe1 	bl	80006a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e2:	f7ff ffb1 	bl	8000648 <MX_DMA_Init>
  MX_TIM1_Init();
 80006e6:	f000 fcfd 	bl	80010e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  WS28XX_Init(&ws_pa8, &htim1, 36, TIM_CHANNEL_1, WS28XX_LEFT_LED_COUNT);   // Initialize for PA8
 80006ea:	230d      	movs	r3, #13
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	2224      	movs	r2, #36	@ 0x24
 80006f2:	498f      	ldr	r1, [pc, #572]	@ (8000930 <main+0x260>)
 80006f4:	488f      	ldr	r0, [pc, #572]	@ (8000934 <main+0x264>)
 80006f6:	f002 ffd5 	bl	80036a4 <WS28XX_Init>
  WS28XX_Init(&ws_pa9, &htim1, 36, TIM_CHANNEL_2, WS28XX_MIDDLE_LED_COUNT); // Initialize for PA9 (middle strip)
 80006fa:	230f      	movs	r3, #15
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2304      	movs	r3, #4
 8000700:	2224      	movs	r2, #36	@ 0x24
 8000702:	498b      	ldr	r1, [pc, #556]	@ (8000930 <main+0x260>)
 8000704:	488c      	ldr	r0, [pc, #560]	@ (8000938 <main+0x268>)
 8000706:	f002 ffcd 	bl	80036a4 <WS28XX_Init>
  WS28XX_Init(&ws_pa10, &htim1, 36, TIM_CHANNEL_3, WS28XX_RIGHT_LED_COUNT); // Initialize for PA10
 800070a:	230d      	movs	r3, #13
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2308      	movs	r3, #8
 8000710:	2224      	movs	r2, #36	@ 0x24
 8000712:	4987      	ldr	r1, [pc, #540]	@ (8000930 <main+0x260>)
 8000714:	4889      	ldr	r0, [pc, #548]	@ (800093c <main+0x26c>)
 8000716:	f002 ffc5 	bl	80036a4 <WS28XX_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Switch-case for middle LED strip (PA9)
	  switch (current_mode_pa9)
 800071a:	4b89      	ldr	r3, [pc, #548]	@ (8000940 <main+0x270>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b04      	cmp	r3, #4
 8000720:	d01d      	beq.n	800075e <main+0x8e>
 8000722:	2b04      	cmp	r3, #4
 8000724:	dc23      	bgt.n	800076e <main+0x9e>
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <main+0x60>
 800072a:	2b03      	cmp	r3, #3
 800072c:	d013      	beq.n	8000756 <main+0x86>
 800072e:	e01e      	b.n	800076e <main+0x9e>
	  {
	      case DRL_MODE:
	          {
	              static int drl_last_update_time_middle = 0;
	              int drl_current_time_middle = HAL_GetTick();
 8000730:	f000 fee2 	bl	80014f8 <HAL_GetTick>
 8000734:	4603      	mov	r3, r0
 8000736:	60fb      	str	r3, [r7, #12]

	              // Ensure updates are spaced out to avoid flickering, but react quickly to mode change
	              if (drl_current_time_middle - drl_last_update_time_middle >= 1000) {  // Reduced time to 1 second for faster response
 8000738:	4b82      	ldr	r3, [pc, #520]	@ (8000944 <main+0x274>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000744:	db17      	blt.n	8000776 <main+0xa6>
	                  UpdateDRLMode(&ws_pa9, WS28XX_MIDDLE_LED_COUNT);  // Middle strip DRL update
 8000746:	210f      	movs	r1, #15
 8000748:	487b      	ldr	r0, [pc, #492]	@ (8000938 <main+0x268>)
 800074a:	f000 f9d1 	bl	8000af0 <UpdateDRLMode>
	                  drl_last_update_time_middle = drl_current_time_middle;
 800074e:	4a7d      	ldr	r2, [pc, #500]	@ (8000944 <main+0x274>)
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	6013      	str	r3, [r2, #0]
	              }
	              break;
 8000754:	e00f      	b.n	8000776 <main+0xa6>
	          }

	      case STARTUP_MODE:
	          UpdateStartupWaveForMiddle(&ws_pa9);  // Slower, aesthetic startup animation for PA9
 8000756:	4878      	ldr	r0, [pc, #480]	@ (8000938 <main+0x268>)
 8000758:	f000 fa66 	bl	8000c28 <UpdateStartupWaveForMiddle>
	          break;
 800075c:	e00c      	b.n	8000778 <main+0xa8>

	      case CHARGING_MODE:
	          UpdateSOCIndication(&ws_pa9, soc_percentage, DC_CHARGING);  // SOC indication with blinking LEDs
 800075e:	4b7a      	ldr	r3, [pc, #488]	@ (8000948 <main+0x278>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2202      	movs	r2, #2
 8000764:	4619      	mov	r1, r3
 8000766:	4874      	ldr	r0, [pc, #464]	@ (8000938 <main+0x268>)
 8000768:	f000 fb76 	bl	8000e58 <UpdateSOCIndication>
	          break;
 800076c:	e004      	b.n	8000778 <main+0xa8>

	      default:
	          current_mode_pa9 = DRL_MODE;
 800076e:	4b74      	ldr	r3, [pc, #464]	@ (8000940 <main+0x270>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
	          break;
 8000774:	e000      	b.n	8000778 <main+0xa8>
	              break;
 8000776:	bf00      	nop
	  }

	  // Switch-case for left LED strip (PA8)
	  switch (current_mode_pa8)
 8000778:	4b74      	ldr	r3, [pc, #464]	@ (800094c <main+0x27c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d025      	beq.n	80007cc <main+0xfc>
 8000780:	2b03      	cmp	r3, #3
 8000782:	dc77      	bgt.n	8000874 <main+0x1a4>
 8000784:	2b01      	cmp	r3, #1
 8000786:	d002      	beq.n	800078e <main+0xbe>
 8000788:	2b02      	cmp	r3, #2
 800078a:	d017      	beq.n	80007bc <main+0xec>
 800078c:	e072      	b.n	8000874 <main+0x1a4>
	  {
	      case TURN_SIGNAL_MODE:
	          UpdateWaveEffect(&ws_pa8, frame_pa8, WS28XX_LEFT_LED_COUNT);  // Left strip turn signal
 800078e:	4b70      	ldr	r3, [pc, #448]	@ (8000950 <main+0x280>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	220d      	movs	r2, #13
 8000794:	4619      	mov	r1, r3
 8000796:	4867      	ldr	r0, [pc, #412]	@ (8000934 <main+0x264>)
 8000798:	f000 f976 	bl	8000a88 <UpdateWaveEffect>
	          frame_pa8 += WAVE_STEP_SIZE;
 800079c:	4b6c      	ldr	r3, [pc, #432]	@ (8000950 <main+0x280>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	4a6b      	ldr	r2, [pc, #428]	@ (8000950 <main+0x280>)
 80007a4:	6013      	str	r3, [r2, #0]
	          if (frame_pa8 >= WS28XX_LEFT_LED_COUNT) frame_pa8 = 0;
 80007a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000950 <main+0x280>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b0c      	cmp	r3, #12
 80007ac:	dd02      	ble.n	80007b4 <main+0xe4>
 80007ae:	4b68      	ldr	r3, [pc, #416]	@ (8000950 <main+0x280>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
	          HAL_Delay(WAVE_SPEED);  // Independent delay for PA8
 80007b4:	2014      	movs	r0, #20
 80007b6:	f000 fea9 	bl	800150c <HAL_Delay>
	          break;
 80007ba:	e06e      	b.n	800089a <main+0x1ca>

	      case HAZARD_LIGHT_MODE:
	          UpdateHazardBlink(WS28XX_LEFT_LED_COUNT);  // Hazard mode for PA8
 80007bc:	200d      	movs	r0, #13
 80007be:	f000 f9c9 	bl	8000b54 <UpdateHazardBlink>
	          HAL_Delay(HAZARD_BLINK_DELAY);  // Independent delay for PA8
 80007c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007c6:	f000 fea1 	bl	800150c <HAL_Delay>
	          break;
 80007ca:	e066      	b.n	800089a <main+0x1ca>

	      case STARTUP_MODE:
	          if (wave_count < 5) {
 80007cc:	4b61      	ldr	r3, [pc, #388]	@ (8000954 <main+0x284>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	dc1b      	bgt.n	800080c <main+0x13c>
	              UpdateWaveEffect(&ws_pa8, frame_pa8, WS28XX_LEFT_LED_COUNT);  // Amber wave for PA8 only
 80007d4:	4b5e      	ldr	r3, [pc, #376]	@ (8000950 <main+0x280>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	220d      	movs	r2, #13
 80007da:	4619      	mov	r1, r3
 80007dc:	4855      	ldr	r0, [pc, #340]	@ (8000934 <main+0x264>)
 80007de:	f000 f953 	bl	8000a88 <UpdateWaveEffect>
	              frame_pa8 += WAVE_STEP_SIZE;
 80007e2:	4b5b      	ldr	r3, [pc, #364]	@ (8000950 <main+0x280>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	4a59      	ldr	r2, [pc, #356]	@ (8000950 <main+0x280>)
 80007ea:	6013      	str	r3, [r2, #0]

	              if (frame_pa8 >= WS28XX_LEFT_LED_COUNT) {
 80007ec:	4b58      	ldr	r3, [pc, #352]	@ (8000950 <main+0x280>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b0c      	cmp	r3, #12
 80007f2:	dd07      	ble.n	8000804 <main+0x134>
	                  frame_pa8 = 0;
 80007f4:	4b56      	ldr	r3, [pc, #344]	@ (8000950 <main+0x280>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
	                  wave_count++;  // Increment wave count for PA8 only
 80007fa:	4b56      	ldr	r3, [pc, #344]	@ (8000954 <main+0x284>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	4a54      	ldr	r2, [pc, #336]	@ (8000954 <main+0x284>)
 8000802:	6013      	str	r3, [r2, #0]
	              }
	              HAL_Delay(WAVE_SPEED);  // Delay specific to PA8
 8000804:	2014      	movs	r0, #20
 8000806:	f000 fe81 	bl	800150c <HAL_Delay>
	          } else {
	              current_mode_pa8 = DRL_MODE;
	              wave_count = 0;  // Reset wave count for PA8
	              drl_wave_complete = 0;  // Reset completion flag for PA8
	          }
	          break;
 800080a:	e046      	b.n	800089a <main+0x1ca>
	          } else if (!drl_wave_complete) {
 800080c:	4b52      	ldr	r3, [pc, #328]	@ (8000958 <main+0x288>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d125      	bne.n	8000860 <main+0x190>
	              for (int i = 0; i <= frame_pa8; i++) {
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e00a      	b.n	8000830 <main+0x160>
	                  WS28XX_SetPixel_RGBW_565(&ws_pa8, i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // PA8 lights up DRL
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	b299      	uxth	r1, r3
 800081e:	239b      	movs	r3, #155	@ 0x9b
 8000820:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000824:	4843      	ldr	r0, [pc, #268]	@ (8000934 <main+0x264>)
 8000826:	f003 f86b 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
	              for (int i = 0; i <= frame_pa8; i++) {
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3301      	adds	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	4b47      	ldr	r3, [pc, #284]	@ (8000950 <main+0x280>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	429a      	cmp	r2, r3
 8000838:	ddef      	ble.n	800081a <main+0x14a>
	              WS28XX_Update(&ws_pa8);
 800083a:	483e      	ldr	r0, [pc, #248]	@ (8000934 <main+0x264>)
 800083c:	f003 f8d4 	bl	80039e8 <WS28XX_Update>
	              frame_pa8 += WAVE_STEP_SIZE;
 8000840:	4b43      	ldr	r3, [pc, #268]	@ (8000950 <main+0x280>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	3301      	adds	r3, #1
 8000846:	4a42      	ldr	r2, [pc, #264]	@ (8000950 <main+0x280>)
 8000848:	6013      	str	r3, [r2, #0]
	              if (frame_pa8 >= WS28XX_LEFT_LED_COUNT) {
 800084a:	4b41      	ldr	r3, [pc, #260]	@ (8000950 <main+0x280>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b0c      	cmp	r3, #12
 8000850:	dd02      	ble.n	8000858 <main+0x188>
	                  drl_wave_complete = 1;  // Mark transition as complete for PA8
 8000852:	4b41      	ldr	r3, [pc, #260]	@ (8000958 <main+0x288>)
 8000854:	2201      	movs	r2, #1
 8000856:	601a      	str	r2, [r3, #0]
	              HAL_Delay(WAVE_SPEED);
 8000858:	2014      	movs	r0, #20
 800085a:	f000 fe57 	bl	800150c <HAL_Delay>
	          break;
 800085e:	e01c      	b.n	800089a <main+0x1ca>
	              current_mode_pa8 = DRL_MODE;
 8000860:	4b3a      	ldr	r3, [pc, #232]	@ (800094c <main+0x27c>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
	              wave_count = 0;  // Reset wave count for PA8
 8000866:	4b3b      	ldr	r3, [pc, #236]	@ (8000954 <main+0x284>)
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
	              drl_wave_complete = 0;  // Reset completion flag for PA8
 800086c:	4b3a      	ldr	r3, [pc, #232]	@ (8000958 <main+0x288>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
	          break;
 8000872:	e012      	b.n	800089a <main+0x1ca>

	      case DRL_MODE:
	      default:
	          {
	              static int drl_last_update_time_pa8 = 0;
	              int drl_current_time_pa8 = HAL_GetTick();
 8000874:	f000 fe40 	bl	80014f8 <HAL_GetTick>
 8000878:	4603      	mov	r3, r0
 800087a:	60bb      	str	r3, [r7, #8]

	              // Update every 1 second to avoid flickering
	              if (drl_current_time_pa8 - drl_last_update_time_pa8 >= 1000) {
 800087c:	4b37      	ldr	r3, [pc, #220]	@ (800095c <main+0x28c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000888:	db06      	blt.n	8000898 <main+0x1c8>
	                  UpdateDRLMode(&ws_pa8, WS28XX_LEFT_LED_COUNT);  // PA8 DRL update
 800088a:	210d      	movs	r1, #13
 800088c:	4829      	ldr	r0, [pc, #164]	@ (8000934 <main+0x264>)
 800088e:	f000 f92f 	bl	8000af0 <UpdateDRLMode>
	                  drl_last_update_time_pa8 = drl_current_time_pa8;
 8000892:	4a32      	ldr	r2, [pc, #200]	@ (800095c <main+0x28c>)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	6013      	str	r3, [r2, #0]
	              }
	              break;
 8000898:	bf00      	nop
	          }
	  }

	  // Switch-case for right LED strip (PA10)
	  switch (current_mode_pa10)
 800089a:	4b31      	ldr	r3, [pc, #196]	@ (8000960 <main+0x290>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b03      	cmp	r3, #3
 80008a0:	d01f      	beq.n	80008e2 <main+0x212>
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	f300 808d 	bgt.w	80009c2 <main+0x2f2>
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d003      	beq.n	80008b4 <main+0x1e4>
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	f000 809b 	beq.w	80009e8 <main+0x318>
 80008b2:	e086      	b.n	80009c2 <main+0x2f2>
	  {
	      case TURN_SIGNAL_MODE:
	          UpdateWaveEffect(&ws_pa10, frame_pa10, WS28XX_RIGHT_LED_COUNT);  // Right strip turn signal
 80008b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000964 <main+0x294>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	220d      	movs	r2, #13
 80008ba:	4619      	mov	r1, r3
 80008bc:	481f      	ldr	r0, [pc, #124]	@ (800093c <main+0x26c>)
 80008be:	f000 f8e3 	bl	8000a88 <UpdateWaveEffect>
	          frame_pa10 += WAVE_STEP_SIZE;
 80008c2:	4b28      	ldr	r3, [pc, #160]	@ (8000964 <main+0x294>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	4a26      	ldr	r2, [pc, #152]	@ (8000964 <main+0x294>)
 80008ca:	6013      	str	r3, [r2, #0]
	          if (frame_pa10 >= WS28XX_RIGHT_LED_COUNT) frame_pa10 = 0;
 80008cc:	4b25      	ldr	r3, [pc, #148]	@ (8000964 <main+0x294>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b0c      	cmp	r3, #12
 80008d2:	dd02      	ble.n	80008da <main+0x20a>
 80008d4:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <main+0x294>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
	          HAL_Delay(WAVE_SPEED);  // Independent delay for PA10
 80008da:	2014      	movs	r0, #20
 80008dc:	f000 fe16 	bl	800150c <HAL_Delay>
	          break;
 80008e0:	e085      	b.n	80009ee <main+0x31e>
	      case HAZARD_LIGHT_MODE:
	          //Handled in PA8 switch cases
	          break;

	      case STARTUP_MODE:
	          if (wave_count < 5) {
 80008e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <main+0x284>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	dc1b      	bgt.n	8000922 <main+0x252>
	              UpdateWaveEffect(&ws_pa10, frame_pa10, WS28XX_RIGHT_LED_COUNT);  // Amber wave for PA10 only
 80008ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <main+0x294>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	220d      	movs	r2, #13
 80008f0:	4619      	mov	r1, r3
 80008f2:	4812      	ldr	r0, [pc, #72]	@ (800093c <main+0x26c>)
 80008f4:	f000 f8c8 	bl	8000a88 <UpdateWaveEffect>
	              frame_pa10 += WAVE_STEP_SIZE;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <main+0x294>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a19      	ldr	r2, [pc, #100]	@ (8000964 <main+0x294>)
 8000900:	6013      	str	r3, [r2, #0]

	              if (frame_pa10 >= WS28XX_RIGHT_LED_COUNT) {
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <main+0x294>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b0c      	cmp	r3, #12
 8000908:	dd07      	ble.n	800091a <main+0x24a>
	                  frame_pa10 = 0;
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <main+0x294>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
	                  wave_count++;  // Increment wave count for PA10 only
 8000910:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <main+0x284>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	4a0f      	ldr	r2, [pc, #60]	@ (8000954 <main+0x284>)
 8000918:	6013      	str	r3, [r2, #0]
	              }
	              HAL_Delay(WAVE_SPEED);  // Delay specific to PA10
 800091a:	2014      	movs	r0, #20
 800091c:	f000 fdf6 	bl	800150c <HAL_Delay>
	          } else {
	              current_mode_pa10 = DRL_MODE;
	              wave_count = 0;  // Reset wave count for PA10
	              drl_wave_complete = 0;  // Reset completion flag for PA10
	          }
	          break;
 8000920:	e065      	b.n	80009ee <main+0x31e>
	          } else if (!drl_wave_complete) {
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <main+0x288>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d141      	bne.n	80009ae <main+0x2de>
	              for (int i = 0; i <= frame_pa10; i++) {
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	e026      	b.n	800097e <main+0x2ae>
 8000930:	20003398 	.word	0x20003398
 8000934:	20000038 	.word	0x20000038
 8000938:	20001144 	.word	0x20001144
 800093c:	20002250 	.word	0x20002250
 8000940:	20003364 	.word	0x20003364
 8000944:	20003370 	.word	0x20003370
 8000948:	20000004 	.word	0x20000004
 800094c:	20000000 	.word	0x20000000
 8000950:	2000335c 	.word	0x2000335c
 8000954:	20003368 	.word	0x20003368
 8000958:	2000336c 	.word	0x2000336c
 800095c:	20003374 	.word	0x20003374
 8000960:	20000001 	.word	0x20000001
 8000964:	20003360 	.word	0x20003360
	                  WS28XX_SetPixel_RGBW_565(&ws_pa10, i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // PA10 lights up DRL
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	b299      	uxth	r1, r3
 800096c:	239b      	movs	r3, #155	@ 0x9b
 800096e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000972:	481f      	ldr	r0, [pc, #124]	@ (80009f0 <main+0x320>)
 8000974:	f002 ffc4 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
	              for (int i = 0; i <= frame_pa10; i++) {
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	3301      	adds	r3, #1
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <main+0x324>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	ddef      	ble.n	8000968 <main+0x298>
	              WS28XX_Update(&ws_pa10);
 8000988:	4819      	ldr	r0, [pc, #100]	@ (80009f0 <main+0x320>)
 800098a:	f003 f82d 	bl	80039e8 <WS28XX_Update>
	              frame_pa10 += WAVE_STEP_SIZE;
 800098e:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <main+0x324>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <main+0x324>)
 8000996:	6013      	str	r3, [r2, #0]
	              if (frame_pa10 >= WS28XX_RIGHT_LED_COUNT) {
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <main+0x324>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b0c      	cmp	r3, #12
 800099e:	dd02      	ble.n	80009a6 <main+0x2d6>
	                  drl_wave_complete = 1;  // Mark transition as complete for PA10
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <main+0x328>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
	              HAL_Delay(WAVE_SPEED);
 80009a6:	2014      	movs	r0, #20
 80009a8:	f000 fdb0 	bl	800150c <HAL_Delay>
	          break;
 80009ac:	e01f      	b.n	80009ee <main+0x31e>
	              current_mode_pa10 = DRL_MODE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <main+0x32c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
	              wave_count = 0;  // Reset wave count for PA10
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <main+0x330>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
	              drl_wave_complete = 0;  // Reset completion flag for PA10
 80009ba:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <main+0x328>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
	          break;
 80009c0:	e015      	b.n	80009ee <main+0x31e>

	      case DRL_MODE:
	      default:
	          {
	              static int drl_last_update_time_pa10 = 0;
	              int drl_current_time_pa10 = HAL_GetTick();
 80009c2:	f000 fd99 	bl	80014f8 <HAL_GetTick>
 80009c6:	4603      	mov	r3, r0
 80009c8:	607b      	str	r3, [r7, #4]

	              // Update every 1 second to avoid flickering
	              if (drl_current_time_pa10 - drl_last_update_time_pa10 >= 1000) {
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <main+0x334>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009d6:	db09      	blt.n	80009ec <main+0x31c>
	                  UpdateDRLMode(&ws_pa10, WS28XX_RIGHT_LED_COUNT);  // PA10 DRL update
 80009d8:	210d      	movs	r1, #13
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <main+0x320>)
 80009dc:	f000 f888 	bl	8000af0 <UpdateDRLMode>
	                  drl_last_update_time_pa10 = drl_current_time_pa10;
 80009e0:	4a08      	ldr	r2, [pc, #32]	@ (8000a04 <main+0x334>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
	              }
	              break;
 80009e6:	e001      	b.n	80009ec <main+0x31c>
	          break;
 80009e8:	bf00      	nop
 80009ea:	e696      	b.n	800071a <main+0x4a>
	              break;
 80009ec:	bf00      	nop
	  switch (current_mode_pa9)
 80009ee:	e694      	b.n	800071a <main+0x4a>
 80009f0:	20002250 	.word	0x20002250
 80009f4:	20003360 	.word	0x20003360
 80009f8:	2000336c 	.word	0x2000336c
 80009fc:	20000001 	.word	0x20000001
 8000a00:	20003368 	.word	0x20003368
 8000a04:	20003378 	.word	0x20003378

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b090      	sub	sp, #64	@ 0x40
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0318 	add.w	r3, r7, #24
 8000a12:	2228      	movs	r2, #40	@ 0x28
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 f859 	bl	8003ace <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a32:	2310      	movs	r3, #16
 8000a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a36:	2302      	movs	r3, #2
 8000a38:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a3e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0318 	add.w	r3, r7, #24
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fa03 	bl	8001e54 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a54:	f000 fabe 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fc71 	bl	8002358 <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a7c:	f000 faaa 	bl	8000fd4 <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3740      	adds	r7, #64	@ 0x40
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <UpdateWaveEffect>:
  * @param frame: Current frame number for the wave effect
  * @param pixel_count: Number of pixels in the strip
  * @retval None
  */
void UpdateWaveEffect(WS28XX_HandleTypeDef* ws, int frame, int pixel_count)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
    ResetLEDStrip(ws, pixel_count);  // Ensure all LEDs are reset to black before updating
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f000 f8a8 	bl	8000bec <ResetLEDStrip>

    for (int i = 0; i < pixel_count; i++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e01b      	b.n	8000ada <UpdateWaveEffect+0x52>
        if (i >= frame && i < frame + WAVE_PACKET_SIZE) {
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	db0d      	blt.n	8000ac6 <UpdateWaveEffect+0x3e>
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	3304      	adds	r3, #4
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dc08      	bgt.n	8000ac6 <UpdateWaveEffect+0x3e>
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_AMBER, 255);  // Amber color
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	b299      	uxth	r1, r3
 8000ab8:	23ff      	movs	r3, #255	@ 0xff
 8000aba:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f002 ff1e 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
 8000ac4:	e006      	b.n	8000ad4 <UpdateWaveEffect+0x4c>
        } else {
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_BLACK, 0);    // Turn off (black)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	b299      	uxth	r1, r3
 8000aca:	2300      	movs	r3, #0
 8000acc:	2200      	movs	r2, #0
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f002 ff16 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < pixel_count; i++) {
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	dbdf      	blt.n	8000aa2 <UpdateWaveEffect+0x1a>
        }
    }
    WS28XX_Update(ws);  // Refresh the LED strip
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f002 ff80 	bl	80039e8 <WS28XX_Update>
}
 8000ae8:	bf00      	nop
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <UpdateDRLMode>:
  * @param ws: Pointer to the WS28XX handle
  * @param pixel_count: Number of pixels in the strip
  * @retval None
  */
void UpdateDRLMode(WS28XX_HandleTypeDef* ws, int pixel_count)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    static int last_update_time = 0;
    int current_time = HAL_GetTick();  // Get the current system time in milliseconds
 8000afa:	f000 fcfd 	bl	80014f8 <HAL_GetTick>
 8000afe:	4603      	mov	r3, r0
 8000b00:	60bb      	str	r3, [r7, #8]

    // Update only every 50ms to avoid flickering
    if (current_time - last_update_time >= 50) {
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <UpdateDRLMode+0x60>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b31      	cmp	r3, #49	@ 0x31
 8000b0c:	dd1b      	ble.n	8000b46 <UpdateDRLMode+0x56>
        ResetLEDStrip(ws, pixel_count);  // Ensure no residual data on the strip
 8000b0e:	6839      	ldr	r1, [r7, #0]
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 f86b 	bl	8000bec <ResetLEDStrip>

        for (int i = 0; i < pixel_count; i++) {
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	e00a      	b.n	8000b32 <UpdateDRLMode+0x42>
            WS28XX_SetPixel_RGB_888(ws, i, COLOR_RGB888_WHITE);  // Full white light
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8000b24:	4619      	mov	r1, r3
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f002 fea4 	bl	8003874 <WS28XX_SetPixel_RGB_888>
        for (int i = 0; i < pixel_count; i++) {
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	dbf0      	blt.n	8000b1c <UpdateDRLMode+0x2c>
        }
        WS28XX_Update(ws);  // Refresh the LED strip
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f002 ff54 	bl	80039e8 <WS28XX_Update>

        last_update_time = current_time;  // Update the last time we refreshed
 8000b40:	4a03      	ldr	r2, [pc, #12]	@ (8000b50 <UpdateDRLMode+0x60>)
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	6013      	str	r3, [r2, #0]
    }
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000337c 	.word	0x2000337c

08000b54 <UpdateHazardBlink>:
  * @brief Blink both LED strips for hazard mode
  * @param led_count: Number of LEDs in each strip
  * @retval None
  */
void UpdateHazardBlink(int led_count)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    static int blink_on = 0;  // Track blink state (on/off)

    for (int i = 0; i < led_count; i++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	e025      	b.n	8000bae <UpdateHazardBlink+0x5a>
        if (blink_on) {
 8000b62:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <UpdateHazardBlink+0x8c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d010      	beq.n	8000b8c <UpdateHazardBlink+0x38>
            WS28XX_SetPixel_RGB_565(&ws_pa8, i, COLOR_RGB565_AMBER);  // Amber on for left strip
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 8000b72:	4619      	mov	r1, r3
 8000b74:	481b      	ldr	r0, [pc, #108]	@ (8000be4 <UpdateHazardBlink+0x90>)
 8000b76:	f002 fe2d 	bl	80037d4 <WS28XX_SetPixel_RGB_565>
            WS28XX_SetPixel_RGB_565(&ws_pa10, i, COLOR_RGB565_AMBER); // Amber on for right strip
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 8000b82:	4619      	mov	r1, r3
 8000b84:	4818      	ldr	r0, [pc, #96]	@ (8000be8 <UpdateHazardBlink+0x94>)
 8000b86:	f002 fe25 	bl	80037d4 <WS28XX_SetPixel_RGB_565>
 8000b8a:	e00d      	b.n	8000ba8 <UpdateHazardBlink+0x54>
        } else {
            WS28XX_SetPixel_RGBW_565(&ws_pa8, i, COLOR_RGB565_BLACK, 0);    // Off for left strip
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	b299      	uxth	r1, r3
 8000b90:	2300      	movs	r3, #0
 8000b92:	2200      	movs	r2, #0
 8000b94:	4813      	ldr	r0, [pc, #76]	@ (8000be4 <UpdateHazardBlink+0x90>)
 8000b96:	f002 feb3 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
            WS28XX_SetPixel_RGBW_565(&ws_pa10, i, COLOR_RGB565_BLACK, 0);   // Off for right strip
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	b299      	uxth	r1, r3
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4811      	ldr	r0, [pc, #68]	@ (8000be8 <UpdateHazardBlink+0x94>)
 8000ba4:	f002 feac 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < led_count; i++) {
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	3301      	adds	r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dbd5      	blt.n	8000b62 <UpdateHazardBlink+0xe>
        }
    }

    blink_on = !blink_on;  // Toggle the blink state
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <UpdateHazardBlink+0x8c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	bf0c      	ite	eq
 8000bbe:	2301      	moveq	r3, #1
 8000bc0:	2300      	movne	r3, #0
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <UpdateHazardBlink+0x8c>)
 8000bc8:	601a      	str	r2, [r3, #0]
    WS28XX_Update(&ws_pa8);  // Refresh left strip
 8000bca:	4806      	ldr	r0, [pc, #24]	@ (8000be4 <UpdateHazardBlink+0x90>)
 8000bcc:	f002 ff0c 	bl	80039e8 <WS28XX_Update>
    WS28XX_Update(&ws_pa10); // Refresh right strip
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <UpdateHazardBlink+0x94>)
 8000bd2:	f002 ff09 	bl	80039e8 <WS28XX_Update>
}
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20003380 	.word	0x20003380
 8000be4:	20000038 	.word	0x20000038
 8000be8:	20002250 	.word	0x20002250

08000bec <ResetLEDStrip>:
  * @param ws: Pointer to the WS28XX handle
  * @param pixel_count: Number of pixels in the strip
  * @retval None
  */
void ResetLEDStrip(WS28XX_HandleTypeDef* ws, int pixel_count)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < pixel_count; i++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	e009      	b.n	8000c10 <ResetLEDStrip+0x24>
        WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_BLACK, 0);  // Turn off all LEDs
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	b299      	uxth	r1, r3
 8000c00:	2300      	movs	r3, #0
 8000c02:	2200      	movs	r2, #0
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f002 fe7b 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < pixel_count; i++) {
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dbf1      	blt.n	8000bfc <ResetLEDStrip+0x10>
    }
    WS28XX_Update(ws);  // Refresh the strip
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f002 fee5 	bl	80039e8 <WS28XX_Update>
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <UpdateStartupWaveForMiddle>:

void UpdateStartupWaveForMiddle(WS28XX_HandleTypeDef* ws)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    static int frame_left = MIDDLE_LED_MID_INDEX;  // Start from the center
    static int frame_right = MIDDLE_LED_MID_INDEX;
    static uint8_t wave_direction = 0;  // 0 for outward, 1 for inward
    static int drl_wave_complete_middle = 0;  // Variable to track DRL transition

    if (wave_count_middle < 4) {
 8000c30:	4b83      	ldr	r3, [pc, #524]	@ (8000e40 <UpdateStartupWaveForMiddle+0x218>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	f300 80aa 	bgt.w	8000d8e <UpdateStartupWaveForMiddle+0x166>
        // We want 2 full passes (each pass consists of outward and inward wave)
        ResetLEDStrip(ws, WS28XX_MIDDLE_LED_COUNT);  // Turn off LEDs to create wave movement effect
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ffd5 	bl	8000bec <ResetLEDStrip>

        if (wave_direction == 0) {  // Wave moving outward
 8000c42:	4b80      	ldr	r3, [pc, #512]	@ (8000e44 <UpdateStartupWaveForMiddle+0x21c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d147      	bne.n	8000cda <UpdateStartupWaveForMiddle+0xb2>
            for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e028      	b.n	8000ca2 <UpdateStartupWaveForMiddle+0x7a>
                if (frame_left - i >= 0) {
 8000c50:	4b7d      	ldr	r3, [pc, #500]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0c      	blt.n	8000c76 <UpdateStartupWaveForMiddle+0x4e>
                    WS28XX_SetPixel_RGBW_565(ws, frame_left - i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Left side
 8000c5c:	4b7a      	ldr	r3, [pc, #488]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	b299      	uxth	r1, r3
 8000c6a:	239b      	movs	r3, #155	@ 0x9b
 8000c6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f002 fe45 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
                }
                if (frame_right + i < WS28XX_MIDDLE_LED_COUNT) {
 8000c76:	4b75      	ldr	r3, [pc, #468]	@ (8000e4c <UpdateStartupWaveForMiddle+0x224>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	2b0e      	cmp	r3, #14
 8000c80:	dc0c      	bgt.n	8000c9c <UpdateStartupWaveForMiddle+0x74>
                    WS28XX_SetPixel_RGBW_565(ws, frame_right + i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Right side
 8000c82:	4b72      	ldr	r3, [pc, #456]	@ (8000e4c <UpdateStartupWaveForMiddle+0x224>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b299      	uxth	r1, r3
 8000c90:	239b      	movs	r3, #155	@ 0x9b
 8000c92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f002 fe32 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
            for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	ddd3      	ble.n	8000c50 <UpdateStartupWaveForMiddle+0x28>
                }
            }
            WS28XX_Update(ws);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f002 fe9d 	bl	80039e8 <WS28XX_Update>

            frame_left--;
 8000cae:	4b66      	ldr	r3, [pc, #408]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	4a64      	ldr	r2, [pc, #400]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000cb6:	6013      	str	r3, [r2, #0]
            frame_right++;
 8000cb8:	4b64      	ldr	r3, [pc, #400]	@ (8000e4c <UpdateStartupWaveForMiddle+0x224>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a63      	ldr	r2, [pc, #396]	@ (8000e4c <UpdateStartupWaveForMiddle+0x224>)
 8000cc0:	6013      	str	r3, [r2, #0]

            if (frame_left < 0 && frame_right >= WS28XX_MIDDLE_LED_COUNT) {
 8000cc2:	4b61      	ldr	r3, [pc, #388]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	da5d      	bge.n	8000d86 <UpdateStartupWaveForMiddle+0x15e>
 8000cca:	4b60      	ldr	r3, [pc, #384]	@ (8000e4c <UpdateStartupWaveForMiddle+0x224>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b0e      	cmp	r3, #14
 8000cd0:	dd59      	ble.n	8000d86 <UpdateStartupWaveForMiddle+0x15e>
                wave_direction = 1;  // Reverse direction when it hits the edges
 8000cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8000e44 <UpdateStartupWaveForMiddle+0x21c>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	e055      	b.n	8000d86 <UpdateStartupWaveForMiddle+0x15e>
            }

        } else if (wave_direction == 1) {  // Wave moving inward
 8000cda:	4b5a      	ldr	r3, [pc, #360]	@ (8000e44 <UpdateStartupWaveForMiddle+0x21c>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d151      	bne.n	8000d86 <UpdateStartupWaveForMiddle+0x15e>
            for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	e028      	b.n	8000d3a <UpdateStartupWaveForMiddle+0x112>
                if (frame_left + i < MIDDLE_LED_MID_INDEX) {
 8000ce8:	4b57      	ldr	r3, [pc, #348]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	4413      	add	r3, r2
 8000cf0:	2b06      	cmp	r3, #6
 8000cf2:	dc0c      	bgt.n	8000d0e <UpdateStartupWaveForMiddle+0xe6>
                    WS28XX_SetPixel_RGBW_565(ws, frame_left + i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Left side returning
 8000cf4:	4b54      	ldr	r3, [pc, #336]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	4413      	add	r3, r2
 8000d00:	b299      	uxth	r1, r3
 8000d02:	239b      	movs	r3, #155	@ 0x9b
 8000d04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f002 fdf9 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
                }
                if (frame_right - i >= MIDDLE_LED_MID_INDEX) {
 8000d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8000e4c <UpdateStartupWaveForMiddle+0x224>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	dd0c      	ble.n	8000d34 <UpdateStartupWaveForMiddle+0x10c>
                    WS28XX_SetPixel_RGBW_565(ws, frame_right - i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Right side returning
 8000d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e4c <UpdateStartupWaveForMiddle+0x224>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	b299      	uxth	r1, r3
 8000d28:	239b      	movs	r3, #155	@ 0x9b
 8000d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f002 fde6 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
            for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	3301      	adds	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	ddd3      	ble.n	8000ce8 <UpdateStartupWaveForMiddle+0xc0>
                }
            }
            WS28XX_Update(ws);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f002 fe51 	bl	80039e8 <WS28XX_Update>

            frame_left++;
 8000d46:	4b40      	ldr	r3, [pc, #256]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000d4e:	6013      	str	r3, [r2, #0]
            frame_right--;
 8000d50:	4b3e      	ldr	r3, [pc, #248]	@ (8000e4c <UpdateStartupWaveForMiddle+0x224>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	4a3d      	ldr	r2, [pc, #244]	@ (8000e4c <UpdateStartupWaveForMiddle+0x224>)
 8000d58:	6013      	str	r3, [r2, #0]

            if (frame_left >= MIDDLE_LED_MID_INDEX && frame_right <= MIDDLE_LED_MID_INDEX) {
 8000d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	dd11      	ble.n	8000d86 <UpdateStartupWaveForMiddle+0x15e>
 8000d62:	4b3a      	ldr	r3, [pc, #232]	@ (8000e4c <UpdateStartupWaveForMiddle+0x224>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	dc0d      	bgt.n	8000d86 <UpdateStartupWaveForMiddle+0x15e>
                frame_left = MIDDLE_LED_MID_INDEX;
 8000d6a:	4b37      	ldr	r3, [pc, #220]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	601a      	str	r2, [r3, #0]
                frame_right = MIDDLE_LED_MID_INDEX;
 8000d70:	4b36      	ldr	r3, [pc, #216]	@ (8000e4c <UpdateStartupWaveForMiddle+0x224>)
 8000d72:	2207      	movs	r2, #7
 8000d74:	601a      	str	r2, [r3, #0]
                wave_direction = 0;  // Reset for next outward pass
 8000d76:	4b33      	ldr	r3, [pc, #204]	@ (8000e44 <UpdateStartupWaveForMiddle+0x21c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
                wave_count_middle++;  // Complete one full pass
 8000d7c:	4b30      	ldr	r3, [pc, #192]	@ (8000e40 <UpdateStartupWaveForMiddle+0x218>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a2f      	ldr	r2, [pc, #188]	@ (8000e40 <UpdateStartupWaveForMiddle+0x218>)
 8000d84:	6013      	str	r3, [r2, #0]
            }
        }

        HAL_Delay(WAVE_SPEED * 2);  // Slower speed for a luxury aesthetic
 8000d86:	2028      	movs	r0, #40	@ 0x28
 8000d88:	f000 fbc0 	bl	800150c <HAL_Delay>

        current_mode_pa9 = DRL_MODE;  // Switch to DRL mode
        wave_count_middle = 0;  // Reset wave count for future use
        drl_wave_complete_middle = 0;  // Reset DRL wave completion flag
    }
}
 8000d8c:	e053      	b.n	8000e36 <UpdateStartupWaveForMiddle+0x20e>
    } else if (!drl_wave_complete_middle) {
 8000d8e:	4b30      	ldr	r3, [pc, #192]	@ (8000e50 <UpdateStartupWaveForMiddle+0x228>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d132      	bne.n	8000dfc <UpdateStartupWaveForMiddle+0x1d4>
        for (int i = 0; i <= frame_left; i++) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e017      	b.n	8000dcc <UpdateStartupWaveForMiddle+0x1a4>
            WS28XX_SetPixel_RGBW_565(ws, MIDDLE_LED_MID_INDEX - i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Light from center outward to left
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	f1c3 0307 	rsb	r3, r3, #7
 8000da4:	b299      	uxth	r1, r3
 8000da6:	239b      	movs	r3, #155	@ 0x9b
 8000da8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f002 fda7 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
            WS28XX_SetPixel_RGBW_565(ws, MIDDLE_LED_MID_INDEX + i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Light from center outward to right
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	3307      	adds	r3, #7
 8000db8:	b299      	uxth	r1, r3
 8000dba:	239b      	movs	r3, #155	@ 0x9b
 8000dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f002 fd9d 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i <= frame_left; i++) {
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	dde2      	ble.n	8000d9c <UpdateStartupWaveForMiddle+0x174>
        WS28XX_Update(ws);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f002 fe06 	bl	80039e8 <WS28XX_Update>
        frame_left++;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000de4:	6013      	str	r3, [r2, #0]
        if (frame_left >= MIDDLE_LED_MID_INDEX) {
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <UpdateStartupWaveForMiddle+0x220>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	dd02      	ble.n	8000df4 <UpdateStartupWaveForMiddle+0x1cc>
            drl_wave_complete_middle = 1;  // DRL transition complete
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <UpdateStartupWaveForMiddle+0x228>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
        HAL_Delay(WAVE_SPEED);  // Smooth transition speed
 8000df4:	2014      	movs	r0, #20
 8000df6:	f000 fb89 	bl	800150c <HAL_Delay>
}
 8000dfa:	e01c      	b.n	8000e36 <UpdateStartupWaveForMiddle+0x20e>
        for (int i = 0; i < WS28XX_MIDDLE_LED_COUNT; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	e00a      	b.n	8000e18 <UpdateStartupWaveForMiddle+0x1f0>
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Full DRL brightness
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	b299      	uxth	r1, r3
 8000e06:	239b      	movs	r3, #155	@ 0x9b
 8000e08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f002 fd77 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < WS28XX_MIDDLE_LED_COUNT; i++) {
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	3301      	adds	r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2b0e      	cmp	r3, #14
 8000e1c:	ddf1      	ble.n	8000e02 <UpdateStartupWaveForMiddle+0x1da>
        WS28XX_Update(ws);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f002 fde2 	bl	80039e8 <WS28XX_Update>
        current_mode_pa9 = DRL_MODE;  // Switch to DRL mode
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <UpdateStartupWaveForMiddle+0x22c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
        wave_count_middle = 0;  // Reset wave count for future use
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <UpdateStartupWaveForMiddle+0x218>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
        drl_wave_complete_middle = 0;  // Reset DRL wave completion flag
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <UpdateStartupWaveForMiddle+0x228>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20003384 	.word	0x20003384
 8000e44:	20003388 	.word	0x20003388
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	2000000c 	.word	0x2000000c
 8000e50:	2000338c 	.word	0x2000338c
 8000e54:	20003364 	.word	0x20003364

08000e58 <UpdateSOCIndication>:


void UpdateSOCIndication(WS28XX_HandleTypeDef* ws, int soc_percentage, int charging_type) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
    static int last_update_time = 0;
    static uint8_t charging_blink_state = 0;  // Blink state, 0 = off, 1 = on
    int current_time = HAL_GetTick();
 8000e64:	f000 fb48 	bl	80014f8 <HAL_GetTick>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	623b      	str	r3, [r7, #32]

    // Update every 100ms to avoid flickering
    if (current_time - last_update_time >= 1000) {
 8000e6c:	4b56      	ldr	r3, [pc, #344]	@ (8000fc8 <UpdateSOCIndication+0x170>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6a3a      	ldr	r2, [r7, #32]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e78:	f2c0 80a1 	blt.w	8000fbe <UpdateSOCIndication+0x166>
        last_update_time = current_time;
 8000e7c:	4a52      	ldr	r2, [pc, #328]	@ (8000fc8 <UpdateSOCIndication+0x170>)
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	6013      	str	r3, [r2, #0]

        int led_count_to_light = (WS28XX_MIDDLE_LED_COUNT * soc_percentage) / 100;
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	4613      	mov	r3, r2
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	1a9b      	subs	r3, r3, r2
 8000e8a:	4a50      	ldr	r2, [pc, #320]	@ (8000fcc <UpdateSOCIndication+0x174>)
 8000e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e90:	1152      	asrs	r2, r2, #5
 8000e92:	17db      	asrs	r3, r3, #31
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	61fb      	str	r3, [r7, #28]
        int left_led = MIDDLE_LED_MID_INDEX;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	61bb      	str	r3, [r7, #24]
        int right_led = MIDDLE_LED_MID_INDEX;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	617b      	str	r3, [r7, #20]

        for (int i = 0; i < led_count_to_light / 2; i++) {
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea4:	e030      	b.n	8000f08 <UpdateSOCIndication+0xb0>
            if (left_led - i >= 0) {
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db11      	blt.n	8000ed4 <UpdateSOCIndication+0x7c>
                WS28XX_SetPixel_RGBW_565(ws, left_led - i, (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, DRL_BRIGHTNESS);
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	b299      	uxth	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d102      	bne.n	8000ec8 <UpdateSOCIndication+0x70>
 8000ec2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000ec6:	e001      	b.n	8000ecc <UpdateSOCIndication+0x74>
 8000ec8:	f242 4244 	movw	r2, #9284	@ 0x2444
 8000ecc:	239b      	movs	r3, #155	@ 0x9b
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f002 fd16 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
            }
            if (right_led + i < WS28XX_MIDDLE_LED_COUNT) {
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed8:	4413      	add	r3, r2
 8000eda:	2b0e      	cmp	r3, #14
 8000edc:	dc11      	bgt.n	8000f02 <UpdateSOCIndication+0xaa>
                WS28XX_SetPixel_RGBW_565(ws, right_led + i, (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, DRL_BRIGHTNESS);
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	b299      	uxth	r1, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d102      	bne.n	8000ef6 <UpdateSOCIndication+0x9e>
 8000ef0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000ef4:	e001      	b.n	8000efa <UpdateSOCIndication+0xa2>
 8000ef6:	f242 4244 	movw	r2, #9284	@ 0x2444
 8000efa:	239b      	movs	r3, #155	@ 0x9b
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f002 fcff 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < led_count_to_light / 2; i++) {
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	3301      	adds	r3, #1
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	0fda      	lsrs	r2, r3, #31
 8000f0c:	4413      	add	r3, r2
 8000f0e:	105b      	asrs	r3, r3, #1
 8000f10:	461a      	mov	r2, r3
 8000f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f14:	4293      	cmp	r3, r2
 8000f16:	dbc6      	blt.n	8000ea6 <UpdateSOCIndication+0x4e>
            }
        }

        // Blink the next LED for charging animation
        charging_blink_state = !charging_blink_state;  // Toggle the blink state
 8000f18:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <UpdateSOCIndication+0x178>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	bf0c      	ite	eq
 8000f20:	2301      	moveq	r3, #1
 8000f22:	2300      	movne	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <UpdateSOCIndication+0x178>)
 8000f2a:	701a      	strb	r2, [r3, #0]
        uint8_t blink_brightness = charging_blink_state ? DRL_BRIGHTNESS : 0;
 8000f2c:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <UpdateSOCIndication+0x178>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <UpdateSOCIndication+0xe0>
 8000f34:	239b      	movs	r3, #155	@ 0x9b
 8000f36:	e000      	b.n	8000f3a <UpdateSOCIndication+0xe2>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	74fb      	strb	r3, [r7, #19]

        if (left_led - (led_count_to_light / 2) >= 0) {
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	0fda      	lsrs	r2, r3, #31
 8000f40:	4413      	add	r3, r2
 8000f42:	105b      	asrs	r3, r3, #1
 8000f44:	425b      	negs	r3, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db15      	blt.n	8000f7c <UpdateSOCIndication+0x124>
            WS28XX_SetPixel_RGBW_565(ws, left_led - (led_count_to_light / 2), (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, blink_brightness);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	0fda      	lsrs	r2, r3, #31
 8000f54:	4413      	add	r3, r2
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	425b      	negs	r3, r3
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	b299      	uxth	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d102      	bne.n	8000f70 <UpdateSOCIndication+0x118>
 8000f6a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000f6e:	e001      	b.n	8000f74 <UpdateSOCIndication+0x11c>
 8000f70:	f242 4244 	movw	r2, #9284	@ 0x2444
 8000f74:	7cfb      	ldrb	r3, [r7, #19]
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f002 fcc2 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
        }
        if (right_led + (led_count_to_light / 2) < WS28XX_MIDDLE_LED_COUNT) {
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	0fda      	lsrs	r2, r3, #31
 8000f80:	4413      	add	r3, r2
 8000f82:	105b      	asrs	r3, r3, #1
 8000f84:	461a      	mov	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	4413      	add	r3, r2
 8000f8a:	2b0e      	cmp	r3, #14
 8000f8c:	dc14      	bgt.n	8000fb8 <UpdateSOCIndication+0x160>
            WS28XX_SetPixel_RGBW_565(ws, right_led + (led_count_to_light / 2), (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, blink_brightness);
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	0fda      	lsrs	r2, r3, #31
 8000f92:	4413      	add	r3, r2
 8000f94:	105b      	asrs	r3, r3, #1
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	b299      	uxth	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d102      	bne.n	8000fac <UpdateSOCIndication+0x154>
 8000fa6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000faa:	e001      	b.n	8000fb0 <UpdateSOCIndication+0x158>
 8000fac:	f242 4244 	movw	r2, #9284	@ 0x2444
 8000fb0:	7cfb      	ldrb	r3, [r7, #19]
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f002 fca4 	bl	8003900 <WS28XX_SetPixel_RGBW_565>
        }

        WS28XX_Update(ws);  // Refresh the LED strip
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f002 fd15 	bl	80039e8 <WS28XX_Update>
    }
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	@ 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20003390 	.word	0x20003390
 8000fcc:	51eb851f 	.word	0x51eb851f
 8000fd0:	20003394 	.word	0x20003394

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <Error_Handler+0x8>

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <HAL_MspInit+0x5c>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a14      	ldr	r2, [pc, #80]	@ (800103c <HAL_MspInit+0x5c>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_MspInit+0x5c>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <HAL_MspInit+0x5c>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a0e      	ldr	r2, [pc, #56]	@ (800103c <HAL_MspInit+0x5c>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <HAL_MspInit+0x5c>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_MspInit+0x60>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_MspInit+0x60>)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <NMI_Handler+0x4>

0800104c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <MemManage_Handler+0x4>

0800105c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <UsageFault_Handler+0x4>

0800106c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001094:	f000 fa1e 	bl	80014d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <DMA1_Channel2_IRQHandler+0x10>)
 80010a2:	f000 fc1f 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200033e0 	.word	0x200033e0

080010b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80010b4:	4802      	ldr	r0, [pc, #8]	@ (80010c0 <DMA1_Channel3_IRQHandler+0x10>)
 80010b6:	f000 fc15 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20003424 	.word	0x20003424

080010c4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <DMA1_Channel6_IRQHandler+0x10>)
 80010ca:	f000 fc0b 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20003468 	.word	0x20003468

080010d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch2;
DMA_HandleTypeDef hdma_tim1_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b096      	sub	sp, #88	@ 0x58
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	615a      	str	r2, [r3, #20]
 8001114:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2220      	movs	r2, #32
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f002 fcd6 	bl	8003ace <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001122:	4b4a      	ldr	r3, [pc, #296]	@ (800124c <MX_TIM1_Init+0x168>)
 8001124:	4a4a      	ldr	r2, [pc, #296]	@ (8001250 <MX_TIM1_Init+0x16c>)
 8001126:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001128:	4b48      	ldr	r3, [pc, #288]	@ (800124c <MX_TIM1_Init+0x168>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b47      	ldr	r3, [pc, #284]	@ (800124c <MX_TIM1_Init+0x168>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001134:	4b45      	ldr	r3, [pc, #276]	@ (800124c <MX_TIM1_Init+0x168>)
 8001136:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800113a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b43      	ldr	r3, [pc, #268]	@ (800124c <MX_TIM1_Init+0x168>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001142:	4b42      	ldr	r3, [pc, #264]	@ (800124c <MX_TIM1_Init+0x168>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001148:	4b40      	ldr	r3, [pc, #256]	@ (800124c <MX_TIM1_Init+0x168>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800114e:	483f      	ldr	r0, [pc, #252]	@ (800124c <MX_TIM1_Init+0x168>)
 8001150:	f001 fa5e 	bl	8002610 <HAL_TIM_Base_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800115a:	f7ff ff3b 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001162:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001164:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001168:	4619      	mov	r1, r3
 800116a:	4838      	ldr	r0, [pc, #224]	@ (800124c <MX_TIM1_Init+0x168>)
 800116c:	f001 fd5c 	bl	8002c28 <HAL_TIM_ConfigClockSource>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001176:	f7ff ff2d 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800117a:	4834      	ldr	r0, [pc, #208]	@ (800124c <MX_TIM1_Init+0x168>)
 800117c:	f001 fa97 	bl	80026ae <HAL_TIM_PWM_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001186:	f7ff ff25 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001192:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001196:	4619      	mov	r1, r3
 8001198:	482c      	ldr	r0, [pc, #176]	@ (800124c <MX_TIM1_Init+0x168>)
 800119a:	f002 f9a9 	bl	80034f0 <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011a4:	f7ff ff16 	bl	8000fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a8:	2360      	movs	r3, #96	@ 0x60
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	481f      	ldr	r0, [pc, #124]	@ (800124c <MX_TIM1_Init+0x168>)
 80011ce:	f001 fc69 	bl	8002aa4 <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80011d8:	f7ff fefc 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e0:	2204      	movs	r2, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4819      	ldr	r0, [pc, #100]	@ (800124c <MX_TIM1_Init+0x168>)
 80011e6:	f001 fc5d 	bl	8002aa4 <HAL_TIM_PWM_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80011f0:	f7ff fef0 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f8:	2208      	movs	r2, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	4813      	ldr	r0, [pc, #76]	@ (800124c <MX_TIM1_Init+0x168>)
 80011fe:	f001 fc51 	bl	8002aa4 <HAL_TIM_PWM_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001208:	f7ff fee4 	bl	8000fd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001220:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001224:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4807      	ldr	r0, [pc, #28]	@ (800124c <MX_TIM1_Init+0x168>)
 8001230:	f002 f9bc 	bl	80035ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800123a:	f7ff fecb 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800123e:	4803      	ldr	r0, [pc, #12]	@ (800124c <MX_TIM1_Init+0x168>)
 8001240:	f000 f8a8 	bl	8001394 <HAL_TIM_MspPostInit>

}
 8001244:	bf00      	nop
 8001246:	3758      	adds	r7, #88	@ 0x58
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20003398 	.word	0x20003398
 8001250:	40012c00 	.word	0x40012c00

08001254 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a44      	ldr	r2, [pc, #272]	@ (8001374 <HAL_TIM_Base_MspInit+0x120>)
 8001262:	4293      	cmp	r3, r2
 8001264:	f040 8081 	bne.w	800136a <HAL_TIM_Base_MspInit+0x116>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001268:	4b43      	ldr	r3, [pc, #268]	@ (8001378 <HAL_TIM_Base_MspInit+0x124>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a42      	ldr	r2, [pc, #264]	@ (8001378 <HAL_TIM_Base_MspInit+0x124>)
 800126e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b40      	ldr	r3, [pc, #256]	@ (8001378 <HAL_TIM_Base_MspInit+0x124>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001280:	4b3e      	ldr	r3, [pc, #248]	@ (800137c <HAL_TIM_Base_MspInit+0x128>)
 8001282:	4a3f      	ldr	r2, [pc, #252]	@ (8001380 <HAL_TIM_Base_MspInit+0x12c>)
 8001284:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001286:	4b3d      	ldr	r3, [pc, #244]	@ (800137c <HAL_TIM_Base_MspInit+0x128>)
 8001288:	2210      	movs	r2, #16
 800128a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800128c:	4b3b      	ldr	r3, [pc, #236]	@ (800137c <HAL_TIM_Base_MspInit+0x128>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001292:	4b3a      	ldr	r3, [pc, #232]	@ (800137c <HAL_TIM_Base_MspInit+0x128>)
 8001294:	2280      	movs	r2, #128	@ 0x80
 8001296:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001298:	4b38      	ldr	r3, [pc, #224]	@ (800137c <HAL_TIM_Base_MspInit+0x128>)
 800129a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800129e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a0:	4b36      	ldr	r3, [pc, #216]	@ (800137c <HAL_TIM_Base_MspInit+0x128>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80012a6:	4b35      	ldr	r3, [pc, #212]	@ (800137c <HAL_TIM_Base_MspInit+0x128>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80012ac:	4b33      	ldr	r3, [pc, #204]	@ (800137c <HAL_TIM_Base_MspInit+0x128>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80012b2:	4832      	ldr	r0, [pc, #200]	@ (800137c <HAL_TIM_Base_MspInit+0x128>)
 80012b4:	f000 fa5c 	bl	8001770 <HAL_DMA_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80012be:	f7ff fe89 	bl	8000fd4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a2d      	ldr	r2, [pc, #180]	@ (800137c <HAL_TIM_Base_MspInit+0x128>)
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80012c8:	4a2c      	ldr	r2, [pc, #176]	@ (800137c <HAL_TIM_Base_MspInit+0x128>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 80012ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001384 <HAL_TIM_Base_MspInit+0x130>)
 80012d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001388 <HAL_TIM_Base_MspInit+0x134>)
 80012d2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <HAL_TIM_Base_MspInit+0x130>)
 80012d6:	2210      	movs	r2, #16
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012da:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <HAL_TIM_Base_MspInit+0x130>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80012e0:	4b28      	ldr	r3, [pc, #160]	@ (8001384 <HAL_TIM_Base_MspInit+0x130>)
 80012e2:	2280      	movs	r2, #128	@ 0x80
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012e6:	4b27      	ldr	r3, [pc, #156]	@ (8001384 <HAL_TIM_Base_MspInit+0x130>)
 80012e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ec:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ee:	4b25      	ldr	r3, [pc, #148]	@ (8001384 <HAL_TIM_Base_MspInit+0x130>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80012f4:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <HAL_TIM_Base_MspInit+0x130>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80012fa:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <HAL_TIM_Base_MspInit+0x130>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001300:	4820      	ldr	r0, [pc, #128]	@ (8001384 <HAL_TIM_Base_MspInit+0x130>)
 8001302:	f000 fa35 	bl	8001770 <HAL_DMA_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_TIM_Base_MspInit+0xbc>
    {
      Error_Handler();
 800130c:	f7ff fe62 	bl	8000fd4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <HAL_TIM_Base_MspInit+0x130>)
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
 8001316:	4a1b      	ldr	r2, [pc, #108]	@ (8001384 <HAL_TIM_Base_MspInit+0x130>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <HAL_TIM_Base_MspInit+0x138>)
 800131e:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <HAL_TIM_Base_MspInit+0x13c>)
 8001320:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <HAL_TIM_Base_MspInit+0x138>)
 8001324:	2210      	movs	r2, #16
 8001326:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <HAL_TIM_Base_MspInit+0x138>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <HAL_TIM_Base_MspInit+0x138>)
 8001330:	2280      	movs	r2, #128	@ 0x80
 8001332:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_TIM_Base_MspInit+0x138>)
 8001336:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800133a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800133c:	4b13      	ldr	r3, [pc, #76]	@ (800138c <HAL_TIM_Base_MspInit+0x138>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_TIM_Base_MspInit+0x138>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001348:	4b10      	ldr	r3, [pc, #64]	@ (800138c <HAL_TIM_Base_MspInit+0x138>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800134e:	480f      	ldr	r0, [pc, #60]	@ (800138c <HAL_TIM_Base_MspInit+0x138>)
 8001350:	f000 fa0e 	bl	8001770 <HAL_DMA_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_TIM_Base_MspInit+0x10a>
    {
      Error_Handler();
 800135a:	f7ff fe3b 	bl	8000fd4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <HAL_TIM_Base_MspInit+0x138>)
 8001362:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001364:	4a09      	ldr	r2, [pc, #36]	@ (800138c <HAL_TIM_Base_MspInit+0x138>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40012c00 	.word	0x40012c00
 8001378:	40021000 	.word	0x40021000
 800137c:	200033e0 	.word	0x200033e0
 8001380:	4002001c 	.word	0x4002001c
 8001384:	20003424 	.word	0x20003424
 8001388:	40020030 	.word	0x40020030
 800138c:	20003468 	.word	0x20003468
 8001390:	4002006c 	.word	0x4002006c

08001394 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a10      	ldr	r2, [pc, #64]	@ (80013f0 <HAL_TIM_MspPostInit+0x5c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d118      	bne.n	80013e6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <HAL_TIM_MspPostInit+0x60>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <HAL_TIM_MspPostInit+0x60>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <HAL_TIM_MspPostInit+0x60>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80013cc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80013d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <HAL_TIM_MspPostInit+0x64>)
 80013e2:	f000 fbb3 	bl	8001b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3720      	adds	r7, #32
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40012c00 	.word	0x40012c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010800 	.word	0x40010800

080013fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013fc:	f7ff fe6c 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001400:	480b      	ldr	r0, [pc, #44]	@ (8001430 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001402:	490c      	ldr	r1, [pc, #48]	@ (8001434 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001404:	4a0c      	ldr	r2, [pc, #48]	@ (8001438 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a09      	ldr	r2, [pc, #36]	@ (800143c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001418:	4c09      	ldr	r4, [pc, #36]	@ (8001440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001426:	f002 fb5b 	bl	8003ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800142a:	f7ff f951 	bl	80006d0 <main>
  bx lr
 800142e:	4770      	bx	lr
  ldr r0, =_sdata
 8001430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001434:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001438:	08003c6c 	.word	0x08003c6c
  ldr r2, =_sbss
 800143c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001440:	200034b0 	.word	0x200034b0

08001444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC1_2_IRQHandler>
	...

08001448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <HAL_Init+0x28>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <HAL_Init+0x28>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 f947 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145e:	200f      	movs	r0, #15
 8001460:	f000 f808 	bl	8001474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001464:	f7ff fdbc 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40022000 	.word	0x40022000

08001474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800147c:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_InitTick+0x54>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <HAL_InitTick+0x58>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800148a:	fbb3 f3f1 	udiv	r3, r3, r1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f95f 	bl	8001756 <HAL_SYSTICK_Config>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e00e      	b.n	80014c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d80a      	bhi.n	80014be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f000 f927 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b4:	4a06      	ldr	r2, [pc, #24]	@ (80014d0 <HAL_InitTick+0x5c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e000      	b.n	80014c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000010 	.word	0x20000010
 80014cc:	20000018 	.word	0x20000018
 80014d0:	20000014 	.word	0x20000014

080014d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <HAL_IncTick+0x1c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_IncTick+0x20>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a03      	ldr	r2, [pc, #12]	@ (80014f4 <HAL_IncTick+0x20>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000018 	.word	0x20000018
 80014f4:	200034ac 	.word	0x200034ac

080014f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b02      	ldr	r3, [pc, #8]	@ (8001508 <HAL_GetTick+0x10>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	200034ac 	.word	0x200034ac

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff fff0 	bl	80014f8 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d005      	beq.n	8001532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_Delay+0x44>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001532:	bf00      	nop
 8001534:	f7ff ffe0 	bl	80014f8 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f7      	bhi.n	8001534 <HAL_Delay+0x28>
  {
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000018 	.word	0x20000018

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4906      	ldr	r1, [pc, #24]	@ (80015ec <__NVIC_EnableIRQ+0x34>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	@ (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	@ (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	@ 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	2b04      	cmp	r3, #4
 8001660:	bf28      	it	cs
 8001662:	2304      	movcs	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	2b06      	cmp	r3, #6
 800166c:	d902      	bls.n	8001674 <NVIC_EncodePriority+0x30>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b03      	subs	r3, #3
 8001672:	e000      	b.n	8001676 <NVIC_EncodePriority+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43d9      	mvns	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	4313      	orrs	r3, r2
         );
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3724      	adds	r7, #36	@ 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff90 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff2d 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff42 	bl	800159c <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff90 	bl	8001644 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5f 	bl	80015f0 <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff35 	bl	80015b8 <__NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffa2 	bl	80016a8 <SysTick_Config>
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e043      	b.n	800180e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <HAL_DMA_Init+0xa8>)
 800178e:	4413      	add	r3, r2
 8001790:	4a22      	ldr	r2, [pc, #136]	@ (800181c <HAL_DMA_Init+0xac>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	009a      	lsls	r2, r3, #2
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001820 <HAL_DMA_Init+0xb0>)
 80017a2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80017ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80017be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	bffdfff8 	.word	0xbffdfff8
 800181c:	cccccccd 	.word	0xcccccccd
 8001820:	40020000 	.word	0x40020000

08001824 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_DMA_Start_IT+0x20>
 8001840:	2302      	movs	r3, #2
 8001842:	e04b      	b.n	80018dc <HAL_DMA_Start_IT+0xb8>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b01      	cmp	r3, #1
 8001856:	d13a      	bne.n	80018ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2202      	movs	r2, #2
 800185c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0201 	bic.w	r2, r2, #1
 8001874:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 f937 	bl	8001af0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 020e 	orr.w	r2, r2, #14
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e00f      	b.n	80018bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0204 	bic.w	r2, r2, #4
 80018aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 020a 	orr.w	r2, r2, #10
 80018ba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e005      	b.n	80018da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018d6:	2302      	movs	r3, #2
 80018d8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80018da:	7dfb      	ldrb	r3, [r7, #23]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	2204      	movs	r2, #4
 8001902:	409a      	lsls	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d04f      	beq.n	80019ac <HAL_DMA_IRQHandler+0xc8>
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d04a      	beq.n	80019ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b00      	cmp	r3, #0
 8001922:	d107      	bne.n	8001934 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0204 	bic.w	r2, r2, #4
 8001932:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a66      	ldr	r2, [pc, #408]	@ (8001ad4 <HAL_DMA_IRQHandler+0x1f0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d029      	beq.n	8001992 <HAL_DMA_IRQHandler+0xae>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a65      	ldr	r2, [pc, #404]	@ (8001ad8 <HAL_DMA_IRQHandler+0x1f4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d022      	beq.n	800198e <HAL_DMA_IRQHandler+0xaa>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a63      	ldr	r2, [pc, #396]	@ (8001adc <HAL_DMA_IRQHandler+0x1f8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01a      	beq.n	8001988 <HAL_DMA_IRQHandler+0xa4>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a62      	ldr	r2, [pc, #392]	@ (8001ae0 <HAL_DMA_IRQHandler+0x1fc>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d012      	beq.n	8001982 <HAL_DMA_IRQHandler+0x9e>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a60      	ldr	r2, [pc, #384]	@ (8001ae4 <HAL_DMA_IRQHandler+0x200>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00a      	beq.n	800197c <HAL_DMA_IRQHandler+0x98>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ae8 <HAL_DMA_IRQHandler+0x204>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d102      	bne.n	8001976 <HAL_DMA_IRQHandler+0x92>
 8001970:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001974:	e00e      	b.n	8001994 <HAL_DMA_IRQHandler+0xb0>
 8001976:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800197a:	e00b      	b.n	8001994 <HAL_DMA_IRQHandler+0xb0>
 800197c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001980:	e008      	b.n	8001994 <HAL_DMA_IRQHandler+0xb0>
 8001982:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001986:	e005      	b.n	8001994 <HAL_DMA_IRQHandler+0xb0>
 8001988:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800198c:	e002      	b.n	8001994 <HAL_DMA_IRQHandler+0xb0>
 800198e:	2340      	movs	r3, #64	@ 0x40
 8001990:	e000      	b.n	8001994 <HAL_DMA_IRQHandler+0xb0>
 8001992:	2304      	movs	r3, #4
 8001994:	4a55      	ldr	r2, [pc, #340]	@ (8001aec <HAL_DMA_IRQHandler+0x208>)
 8001996:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 8094 	beq.w	8001aca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019aa:	e08e      	b.n	8001aca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b0:	2202      	movs	r2, #2
 80019b2:	409a      	lsls	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d056      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x186>
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d051      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10b      	bne.n	80019ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 020a 	bic.w	r2, r2, #10
 80019e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a38      	ldr	r2, [pc, #224]	@ (8001ad4 <HAL_DMA_IRQHandler+0x1f0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d029      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x166>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a37      	ldr	r2, [pc, #220]	@ (8001ad8 <HAL_DMA_IRQHandler+0x1f4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d022      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x162>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a35      	ldr	r2, [pc, #212]	@ (8001adc <HAL_DMA_IRQHandler+0x1f8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d01a      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x15c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a34      	ldr	r2, [pc, #208]	@ (8001ae0 <HAL_DMA_IRQHandler+0x1fc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d012      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x156>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a32      	ldr	r2, [pc, #200]	@ (8001ae4 <HAL_DMA_IRQHandler+0x200>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00a      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x150>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a31      	ldr	r2, [pc, #196]	@ (8001ae8 <HAL_DMA_IRQHandler+0x204>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d102      	bne.n	8001a2e <HAL_DMA_IRQHandler+0x14a>
 8001a28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a2c:	e00e      	b.n	8001a4c <HAL_DMA_IRQHandler+0x168>
 8001a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a32:	e00b      	b.n	8001a4c <HAL_DMA_IRQHandler+0x168>
 8001a34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a38:	e008      	b.n	8001a4c <HAL_DMA_IRQHandler+0x168>
 8001a3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a3e:	e005      	b.n	8001a4c <HAL_DMA_IRQHandler+0x168>
 8001a40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a44:	e002      	b.n	8001a4c <HAL_DMA_IRQHandler+0x168>
 8001a46:	2320      	movs	r3, #32
 8001a48:	e000      	b.n	8001a4c <HAL_DMA_IRQHandler+0x168>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	4a27      	ldr	r2, [pc, #156]	@ (8001aec <HAL_DMA_IRQHandler+0x208>)
 8001a4e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d034      	beq.n	8001aca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a68:	e02f      	b.n	8001aca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	2208      	movs	r2, #8
 8001a70:	409a      	lsls	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d028      	beq.n	8001acc <HAL_DMA_IRQHandler+0x1e8>
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d023      	beq.n	8001acc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 020e 	bic.w	r2, r2, #14
 8001a92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
    }
  }
  return;
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
}
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40020008 	.word	0x40020008
 8001ad8:	4002001c 	.word	0x4002001c
 8001adc:	40020030 	.word	0x40020030
 8001ae0:	40020044 	.word	0x40020044
 8001ae4:	40020058 	.word	0x40020058
 8001ae8:	4002006c 	.word	0x4002006c
 8001aec:	40020000 	.word	0x40020000

08001af0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	d108      	bne.n	8001b30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b2e:	e007      	b.n	8001b40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	60da      	str	r2, [r3, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b08b      	sub	sp, #44	@ 0x2c
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5e:	e169      	b.n	8001e34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b60:	2201      	movs	r2, #1
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 8158 	bne.w	8001e2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a9a      	ldr	r2, [pc, #616]	@ (8001dec <HAL_GPIO_Init+0x2a0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d05e      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001b88:	4a98      	ldr	r2, [pc, #608]	@ (8001dec <HAL_GPIO_Init+0x2a0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d875      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001b8e:	4a98      	ldr	r2, [pc, #608]	@ (8001df0 <HAL_GPIO_Init+0x2a4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d058      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001b94:	4a96      	ldr	r2, [pc, #600]	@ (8001df0 <HAL_GPIO_Init+0x2a4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d86f      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001b9a:	4a96      	ldr	r2, [pc, #600]	@ (8001df4 <HAL_GPIO_Init+0x2a8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d052      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001ba0:	4a94      	ldr	r2, [pc, #592]	@ (8001df4 <HAL_GPIO_Init+0x2a8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d869      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001ba6:	4a94      	ldr	r2, [pc, #592]	@ (8001df8 <HAL_GPIO_Init+0x2ac>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d04c      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001bac:	4a92      	ldr	r2, [pc, #584]	@ (8001df8 <HAL_GPIO_Init+0x2ac>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d863      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001bb2:	4a92      	ldr	r2, [pc, #584]	@ (8001dfc <HAL_GPIO_Init+0x2b0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d046      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001bb8:	4a90      	ldr	r2, [pc, #576]	@ (8001dfc <HAL_GPIO_Init+0x2b0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d85d      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001bbe:	2b12      	cmp	r3, #18
 8001bc0:	d82a      	bhi.n	8001c18 <HAL_GPIO_Init+0xcc>
 8001bc2:	2b12      	cmp	r3, #18
 8001bc4:	d859      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bcc <HAL_GPIO_Init+0x80>)
 8001bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bcc:	08001c47 	.word	0x08001c47
 8001bd0:	08001c21 	.word	0x08001c21
 8001bd4:	08001c33 	.word	0x08001c33
 8001bd8:	08001c75 	.word	0x08001c75
 8001bdc:	08001c7b 	.word	0x08001c7b
 8001be0:	08001c7b 	.word	0x08001c7b
 8001be4:	08001c7b 	.word	0x08001c7b
 8001be8:	08001c7b 	.word	0x08001c7b
 8001bec:	08001c7b 	.word	0x08001c7b
 8001bf0:	08001c7b 	.word	0x08001c7b
 8001bf4:	08001c7b 	.word	0x08001c7b
 8001bf8:	08001c7b 	.word	0x08001c7b
 8001bfc:	08001c7b 	.word	0x08001c7b
 8001c00:	08001c7b 	.word	0x08001c7b
 8001c04:	08001c7b 	.word	0x08001c7b
 8001c08:	08001c7b 	.word	0x08001c7b
 8001c0c:	08001c7b 	.word	0x08001c7b
 8001c10:	08001c29 	.word	0x08001c29
 8001c14:	08001c3d 	.word	0x08001c3d
 8001c18:	4a79      	ldr	r2, [pc, #484]	@ (8001e00 <HAL_GPIO_Init+0x2b4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c1e:	e02c      	b.n	8001c7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	623b      	str	r3, [r7, #32]
          break;
 8001c26:	e029      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	623b      	str	r3, [r7, #32]
          break;
 8001c30:	e024      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	3308      	adds	r3, #8
 8001c38:	623b      	str	r3, [r7, #32]
          break;
 8001c3a:	e01f      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	330c      	adds	r3, #12
 8001c42:	623b      	str	r3, [r7, #32]
          break;
 8001c44:	e01a      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	623b      	str	r3, [r7, #32]
          break;
 8001c52:	e013      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	611a      	str	r2, [r3, #16]
          break;
 8001c66:	e009      	b.n	8001c7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	615a      	str	r2, [r3, #20]
          break;
 8001c72:	e003      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          break;
 8001c7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2bff      	cmp	r3, #255	@ 0xff
 8001c80:	d801      	bhi.n	8001c86 <HAL_GPIO_Init+0x13a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	e001      	b.n	8001c8a <HAL_GPIO_Init+0x13e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2bff      	cmp	r3, #255	@ 0xff
 8001c90:	d802      	bhi.n	8001c98 <HAL_GPIO_Init+0x14c>
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	e002      	b.n	8001c9e <HAL_GPIO_Init+0x152>
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	3b08      	subs	r3, #8
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	210f      	movs	r1, #15
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	6a39      	ldr	r1, [r7, #32]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80b1 	beq.w	8001e2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8001e04 <HAL_GPIO_Init+0x2b8>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001e04 <HAL_GPIO_Init+0x2b8>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b4a      	ldr	r3, [pc, #296]	@ (8001e04 <HAL_GPIO_Init+0x2b8>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ce4:	4a48      	ldr	r2, [pc, #288]	@ (8001e08 <HAL_GPIO_Init+0x2bc>)
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a40      	ldr	r2, [pc, #256]	@ (8001e0c <HAL_GPIO_Init+0x2c0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d013      	beq.n	8001d38 <HAL_GPIO_Init+0x1ec>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a3f      	ldr	r2, [pc, #252]	@ (8001e10 <HAL_GPIO_Init+0x2c4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00d      	beq.n	8001d34 <HAL_GPIO_Init+0x1e8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e14 <HAL_GPIO_Init+0x2c8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d007      	beq.n	8001d30 <HAL_GPIO_Init+0x1e4>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a3d      	ldr	r2, [pc, #244]	@ (8001e18 <HAL_GPIO_Init+0x2cc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_GPIO_Init+0x1e0>
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e006      	b.n	8001d3a <HAL_GPIO_Init+0x1ee>
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	e004      	b.n	8001d3a <HAL_GPIO_Init+0x1ee>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e002      	b.n	8001d3a <HAL_GPIO_Init+0x1ee>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_GPIO_Init+0x1ee>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d3c:	f002 0203 	and.w	r2, r2, #3
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	4093      	lsls	r3, r2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d4a:	492f      	ldr	r1, [pc, #188]	@ (8001e08 <HAL_GPIO_Init+0x2bc>)
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d64:	4b2d      	ldr	r3, [pc, #180]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	492c      	ldr	r1, [pc, #176]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d72:	4b2a      	ldr	r3, [pc, #168]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	4928      	ldr	r1, [pc, #160]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d006      	beq.n	8001d9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d8c:	4b23      	ldr	r3, [pc, #140]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	4922      	ldr	r1, [pc, #136]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60cb      	str	r3, [r1, #12]
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d9a:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	491e      	ldr	r1, [pc, #120]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001db4:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4918      	ldr	r1, [pc, #96]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4914      	ldr	r1, [pc, #80]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d021      	beq.n	8001e20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	490e      	ldr	r1, [pc, #56]	@ (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]
 8001de8:	e021      	b.n	8001e2e <HAL_GPIO_Init+0x2e2>
 8001dea:	bf00      	nop
 8001dec:	10320000 	.word	0x10320000
 8001df0:	10310000 	.word	0x10310000
 8001df4:	10220000 	.word	0x10220000
 8001df8:	10210000 	.word	0x10210000
 8001dfc:	10120000 	.word	0x10120000
 8001e00:	10110000 	.word	0x10110000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	40010800 	.word	0x40010800
 8001e10:	40010c00 	.word	0x40010c00
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40011400 	.word	0x40011400
 8001e1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <HAL_GPIO_Init+0x304>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	4909      	ldr	r1, [pc, #36]	@ (8001e50 <HAL_GPIO_Init+0x304>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	3301      	adds	r3, #1
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f47f ae8e 	bne.w	8001b60 <HAL_GPIO_Init+0x14>
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	372c      	adds	r7, #44	@ 0x2c
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	40010400 	.word	0x40010400

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e272      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8087 	beq.w	8001f82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e74:	4b92      	ldr	r3, [pc, #584]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d00c      	beq.n	8001e9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e80:	4b8f      	ldr	r3, [pc, #572]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d112      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x5e>
 8001e8c:	4b8c      	ldr	r3, [pc, #560]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e98:	d10b      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9a:	4b89      	ldr	r3, [pc, #548]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d06c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x12c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d168      	bne.n	8001f80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e24c      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x76>
 8001ebc:	4b80      	ldr	r3, [pc, #512]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a7f      	ldr	r2, [pc, #508]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	e02e      	b.n	8001f28 <HAL_RCC_OscConfig+0xd4>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x98>
 8001ed2:	4b7b      	ldr	r3, [pc, #492]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7a      	ldr	r2, [pc, #488]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b78      	ldr	r3, [pc, #480]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a77      	ldr	r2, [pc, #476]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e01d      	b.n	8001f28 <HAL_RCC_OscConfig+0xd4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0xbc>
 8001ef6:	4b72      	ldr	r3, [pc, #456]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a71      	ldr	r2, [pc, #452]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b6f      	ldr	r3, [pc, #444]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6e      	ldr	r2, [pc, #440]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xd4>
 8001f10:	4b6b      	ldr	r3, [pc, #428]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a6a      	ldr	r2, [pc, #424]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b68      	ldr	r3, [pc, #416]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a67      	ldr	r2, [pc, #412]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff fae2 	bl	80014f8 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fade 	bl	80014f8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	@ 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e200      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0xe4>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff face 	bl	80014f8 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff faca 	bl	80014f8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	@ 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1ec      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	4b53      	ldr	r3, [pc, #332]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x10c>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d063      	beq.n	8002056 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f8e:	4b4c      	ldr	r3, [pc, #304]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9a:	4b49      	ldr	r3, [pc, #292]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x18c>
 8001fa6:	4b46      	ldr	r3, [pc, #280]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	4b43      	ldr	r3, [pc, #268]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_OscConfig+0x176>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1c0      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b3d      	ldr	r3, [pc, #244]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4939      	ldr	r1, [pc, #228]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	e03a      	b.n	8002056 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	4b36      	ldr	r3, [pc, #216]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7ff fa83 	bl	80014f8 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff fa7f 	bl	80014f8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1a1      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	4b2d      	ldr	r3, [pc, #180]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b2a      	ldr	r3, [pc, #168]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4927      	ldr	r1, [pc, #156]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202a:	4b26      	ldr	r3, [pc, #152]	@ (80020c4 <HAL_RCC_OscConfig+0x270>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff fa62 	bl	80014f8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002038:	f7ff fa5e 	bl	80014f8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e180      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	4b1d      	ldr	r3, [pc, #116]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d03a      	beq.n	80020d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d019      	beq.n	800209e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206a:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <HAL_RCC_OscConfig+0x274>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002070:	f7ff fa42 	bl	80014f8 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff fa3e 	bl	80014f8 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e160      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002096:	2001      	movs	r0, #1
 8002098:	f000 fa9c 	bl	80025d4 <RCC_Delay>
 800209c:	e01c      	b.n	80020d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209e:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_RCC_OscConfig+0x274>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a4:	f7ff fa28 	bl	80014f8 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020aa:	e00f      	b.n	80020cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ac:	f7ff fa24 	bl	80014f8 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d908      	bls.n	80020cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e146      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	42420000 	.word	0x42420000
 80020c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	4b92      	ldr	r3, [pc, #584]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e9      	bne.n	80020ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a6 	beq.w	8002232 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10d      	bne.n	8002112 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	4b88      	ldr	r3, [pc, #544]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a87      	ldr	r2, [pc, #540]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002100:	61d3      	str	r3, [r2, #28]
 8002102:	4b85      	ldr	r3, [pc, #532]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210e:	2301      	movs	r3, #1
 8002110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002112:	4b82      	ldr	r3, [pc, #520]	@ (800231c <HAL_RCC_OscConfig+0x4c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d118      	bne.n	8002150 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211e:	4b7f      	ldr	r3, [pc, #508]	@ (800231c <HAL_RCC_OscConfig+0x4c8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7e      	ldr	r2, [pc, #504]	@ (800231c <HAL_RCC_OscConfig+0x4c8>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212a:	f7ff f9e5 	bl	80014f8 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002132:	f7ff f9e1 	bl	80014f8 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b64      	cmp	r3, #100	@ 0x64
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e103      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	4b75      	ldr	r3, [pc, #468]	@ (800231c <HAL_RCC_OscConfig+0x4c8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x312>
 8002158:	4b6f      	ldr	r3, [pc, #444]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a6e      	ldr	r2, [pc, #440]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	e02d      	b.n	80021c2 <HAL_RCC_OscConfig+0x36e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x334>
 800216e:	4b6a      	ldr	r3, [pc, #424]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4a69      	ldr	r2, [pc, #420]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	6213      	str	r3, [r2, #32]
 800217a:	4b67      	ldr	r3, [pc, #412]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a66      	ldr	r2, [pc, #408]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f023 0304 	bic.w	r3, r3, #4
 8002184:	6213      	str	r3, [r2, #32]
 8002186:	e01c      	b.n	80021c2 <HAL_RCC_OscConfig+0x36e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b05      	cmp	r3, #5
 800218e:	d10c      	bne.n	80021aa <HAL_RCC_OscConfig+0x356>
 8002190:	4b61      	ldr	r3, [pc, #388]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4a60      	ldr	r2, [pc, #384]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	6213      	str	r3, [r2, #32]
 800219c:	4b5e      	ldr	r3, [pc, #376]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6213      	str	r3, [r2, #32]
 80021a8:	e00b      	b.n	80021c2 <HAL_RCC_OscConfig+0x36e>
 80021aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a5a      	ldr	r2, [pc, #360]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	6213      	str	r3, [r2, #32]
 80021b6:	4b58      	ldr	r3, [pc, #352]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a57      	ldr	r2, [pc, #348]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d015      	beq.n	80021f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7ff f995 	bl	80014f8 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7ff f991 	bl	80014f8 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0b1      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ee      	beq.n	80021d2 <HAL_RCC_OscConfig+0x37e>
 80021f4:	e014      	b.n	8002220 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7ff f97f 	bl	80014f8 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7ff f97b 	bl	80014f8 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e09b      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002214:	4b40      	ldr	r3, [pc, #256]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ee      	bne.n	80021fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d105      	bne.n	8002232 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002226:	4b3c      	ldr	r3, [pc, #240]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4a3b      	ldr	r2, [pc, #236]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002230:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8087 	beq.w	800234a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800223c:	4b36      	ldr	r3, [pc, #216]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d061      	beq.n	800230c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d146      	bne.n	80022de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002250:	4b33      	ldr	r3, [pc, #204]	@ (8002320 <HAL_RCC_OscConfig+0x4cc>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff f94f 	bl	80014f8 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225e:	f7ff f94b 	bl	80014f8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e06d      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002270:	4b29      	ldr	r3, [pc, #164]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002284:	d108      	bne.n	8002298 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002286:	4b24      	ldr	r3, [pc, #144]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4921      	ldr	r1, [pc, #132]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002298:	4b1f      	ldr	r3, [pc, #124]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a19      	ldr	r1, [r3, #32]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	430b      	orrs	r3, r1
 80022aa:	491b      	ldr	r1, [pc, #108]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <HAL_RCC_OscConfig+0x4cc>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff f91f 	bl	80014f8 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022be:	f7ff f91b 	bl	80014f8 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e03d      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x46a>
 80022dc:	e035      	b.n	800234a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <HAL_RCC_OscConfig+0x4cc>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff f908 	bl	80014f8 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff f904 	bl	80014f8 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e026      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x498>
 800230a:	e01e      	b.n	800234a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e019      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
 8002318:	40021000 	.word	0x40021000
 800231c:	40007000 	.word	0x40007000
 8002320:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <HAL_RCC_OscConfig+0x500>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	429a      	cmp	r2, r3
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d001      	beq.n	800234a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0d0      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b6a      	ldr	r3, [pc, #424]	@ (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d910      	bls.n	800239c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b67      	ldr	r3, [pc, #412]	@ (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	4965      	ldr	r1, [pc, #404]	@ (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b63      	ldr	r3, [pc, #396]	@ (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0b8      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b4:	4b59      	ldr	r3, [pc, #356]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a58      	ldr	r2, [pc, #352]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	4b53      	ldr	r3, [pc, #332]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a52      	ldr	r2, [pc, #328]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b50      	ldr	r3, [pc, #320]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	494d      	ldr	r1, [pc, #308]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d040      	beq.n	8002478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b47      	ldr	r3, [pc, #284]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d115      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07f      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b41      	ldr	r3, [pc, #260]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e073      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4b3d      	ldr	r3, [pc, #244]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06b      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002436:	4b39      	ldr	r3, [pc, #228]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4936      	ldr	r1, [pc, #216]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002448:	f7ff f856 	bl	80014f8 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7ff f852 	bl	80014f8 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e053      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 020c 	and.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	429a      	cmp	r2, r3
 8002476:	d1eb      	bne.n	8002450 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b27      	ldr	r3, [pc, #156]	@ (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d210      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	4922      	ldr	r1, [pc, #136]	@ (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e032      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b19      	ldr	r3, [pc, #100]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4916      	ldr	r1, [pc, #88]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d2:	4b12      	ldr	r3, [pc, #72]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490e      	ldr	r1, [pc, #56]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024e6:	f000 f821 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490a      	ldr	r1, [pc, #40]	@ (8002520 <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a09      	ldr	r2, [pc, #36]	@ (8002524 <HAL_RCC_ClockConfig+0x1cc>)
 8002500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002502:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <HAL_RCC_ClockConfig+0x1d0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe ffb4 	bl	8001474 <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40022000 	.word	0x40022000
 800251c:	40021000 	.word	0x40021000
 8002520:	08003b40 	.word	0x08003b40
 8002524:	20000010 	.word	0x20000010
 8002528:	20000014 	.word	0x20000014

0800252c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002546:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b04      	cmp	r3, #4
 8002554:	d002      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x30>
 8002556:	2b08      	cmp	r3, #8
 8002558:	d003      	beq.n	8002562 <HAL_RCC_GetSysClockFreq+0x36>
 800255a:	e027      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800255c:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800255e:	613b      	str	r3, [r7, #16]
      break;
 8002560:	e027      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	0c9b      	lsrs	r3, r3, #18
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	4a17      	ldr	r2, [pc, #92]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800256c:	5cd3      	ldrb	r3, [r2, r3]
 800256e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d010      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800257a:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0c5b      	lsrs	r3, r3, #17
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	4a11      	ldr	r2, [pc, #68]	@ (80025cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800258e:	fb03 f202 	mul.w	r2, r3, r2
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e004      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a0c      	ldr	r2, [pc, #48]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	613b      	str	r3, [r7, #16]
      break;
 80025aa:	e002      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025ac:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ae:	613b      	str	r3, [r7, #16]
      break;
 80025b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b2:	693b      	ldr	r3, [r7, #16]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	007a1200 	.word	0x007a1200
 80025c8:	08003b50 	.word	0x08003b50
 80025cc:	08003b60 	.word	0x08003b60
 80025d0:	003d0900 	.word	0x003d0900

080025d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <RCC_Delay+0x34>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0a      	ldr	r2, [pc, #40]	@ (800260c <RCC_Delay+0x38>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	0a5b      	lsrs	r3, r3, #9
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025f0:	bf00      	nop
  }
  while (Delay --);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1e5a      	subs	r2, r3, #1
 80025f6:	60fa      	str	r2, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f9      	bne.n	80025f0 <RCC_Delay+0x1c>
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	20000010 	.word	0x20000010
 800260c:	10624dd3 	.word	0x10624dd3

08002610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e041      	b.n	80026a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe fe0c 	bl	8001254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3304      	adds	r3, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f000 fc9e 	bl	8002f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e041      	b.n	8002744 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d106      	bne.n	80026da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f839 	bl	800274c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	4610      	mov	r0, r2
 80026ee:	f000 fc4f 	bl	8002f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
	...

08002760 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <HAL_TIM_PWM_Start_DMA+0x2c>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	e022      	b.n	80027d2 <HAL_TIM_PWM_Start_DMA+0x72>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b04      	cmp	r3, #4
 8002790:	d109      	bne.n	80027a6 <HAL_TIM_PWM_Start_DMA+0x46>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	e015      	b.n	80027d2 <HAL_TIM_PWM_Start_DMA+0x72>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d109      	bne.n	80027c0 <HAL_TIM_PWM_Start_DMA+0x60>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e008      	b.n	80027d2 <HAL_TIM_PWM_Start_DMA+0x72>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
 80027d8:	e153      	b.n	8002a82 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d109      	bne.n	80027f4 <HAL_TIM_PWM_Start_DMA+0x94>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e022      	b.n	800283a <HAL_TIM_PWM_Start_DMA+0xda>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d109      	bne.n	800280e <HAL_TIM_PWM_Start_DMA+0xae>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	e015      	b.n	800283a <HAL_TIM_PWM_Start_DMA+0xda>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d109      	bne.n	8002828 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	e008      	b.n	800283a <HAL_TIM_PWM_Start_DMA+0xda>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d024      	beq.n	8002888 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_TIM_PWM_Start_DMA+0xea>
 8002844:	887b      	ldrh	r3, [r7, #2]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e119      	b.n	8002a82 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d104      	bne.n	800285e <HAL_TIM_PWM_Start_DMA+0xfe>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800285c:	e016      	b.n	800288c <HAL_TIM_PWM_Start_DMA+0x12c>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d104      	bne.n	800286e <HAL_TIM_PWM_Start_DMA+0x10e>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800286c:	e00e      	b.n	800288c <HAL_TIM_PWM_Start_DMA+0x12c>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d104      	bne.n	800287e <HAL_TIM_PWM_Start_DMA+0x11e>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800287c:	e006      	b.n	800288c <HAL_TIM_PWM_Start_DMA+0x12c>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2202      	movs	r2, #2
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002886:	e001      	b.n	800288c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0fa      	b.n	8002a82 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	f200 80ae 	bhi.w	80029f0 <HAL_TIM_PWM_Start_DMA+0x290>
 8002894:	a201      	add	r2, pc, #4	@ (adr r2, 800289c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289a:	bf00      	nop
 800289c:	080028d1 	.word	0x080028d1
 80028a0:	080029f1 	.word	0x080029f1
 80028a4:	080029f1 	.word	0x080029f1
 80028a8:	080029f1 	.word	0x080029f1
 80028ac:	08002919 	.word	0x08002919
 80028b0:	080029f1 	.word	0x080029f1
 80028b4:	080029f1 	.word	0x080029f1
 80028b8:	080029f1 	.word	0x080029f1
 80028bc:	08002961 	.word	0x08002961
 80028c0:	080029f1 	.word	0x080029f1
 80028c4:	080029f1 	.word	0x080029f1
 80028c8:	080029f1 	.word	0x080029f1
 80028cc:	080029a9 	.word	0x080029a9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	4a6d      	ldr	r2, [pc, #436]	@ (8002a8c <HAL_TIM_PWM_Start_DMA+0x32c>)
 80028d6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	4a6c      	ldr	r2, [pc, #432]	@ (8002a90 <HAL_TIM_PWM_Start_DMA+0x330>)
 80028de:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e4:	4a6b      	ldr	r2, [pc, #428]	@ (8002a94 <HAL_TIM_PWM_Start_DMA+0x334>)
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3334      	adds	r3, #52	@ 0x34
 80028f4:	461a      	mov	r2, r3
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	f7fe ff94 	bl	8001824 <HAL_DMA_Start_IT>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e0bd      	b.n	8002a82 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002914:	60da      	str	r2, [r3, #12]
      break;
 8002916:	e06e      	b.n	80029f6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	4a5b      	ldr	r2, [pc, #364]	@ (8002a8c <HAL_TIM_PWM_Start_DMA+0x32c>)
 800291e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	4a5a      	ldr	r2, [pc, #360]	@ (8002a90 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002926:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292c:	4a59      	ldr	r2, [pc, #356]	@ (8002a94 <HAL_TIM_PWM_Start_DMA+0x334>)
 800292e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3338      	adds	r3, #56	@ 0x38
 800293c:	461a      	mov	r2, r3
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	f7fe ff70 	bl	8001824 <HAL_DMA_Start_IT>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e099      	b.n	8002a82 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800295c:	60da      	str	r2, [r3, #12]
      break;
 800295e:	e04a      	b.n	80029f6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002964:	4a49      	ldr	r2, [pc, #292]	@ (8002a8c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002966:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296c:	4a48      	ldr	r2, [pc, #288]	@ (8002a90 <HAL_TIM_PWM_Start_DMA+0x330>)
 800296e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002974:	4a47      	ldr	r2, [pc, #284]	@ (8002a94 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002976:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	333c      	adds	r3, #60	@ 0x3c
 8002984:	461a      	mov	r2, r3
 8002986:	887b      	ldrh	r3, [r7, #2]
 8002988:	f7fe ff4c 	bl	8001824 <HAL_DMA_Start_IT>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e075      	b.n	8002a82 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029a4:	60da      	str	r2, [r3, #12]
      break;
 80029a6:	e026      	b.n	80029f6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	4a37      	ldr	r2, [pc, #220]	@ (8002a8c <HAL_TIM_PWM_Start_DMA+0x32c>)
 80029ae:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	4a36      	ldr	r2, [pc, #216]	@ (8002a90 <HAL_TIM_PWM_Start_DMA+0x330>)
 80029b6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029bc:	4a35      	ldr	r2, [pc, #212]	@ (8002a94 <HAL_TIM_PWM_Start_DMA+0x334>)
 80029be:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3340      	adds	r3, #64	@ 0x40
 80029cc:	461a      	mov	r2, r3
 80029ce:	887b      	ldrh	r3, [r7, #2]
 80029d0:	f7fe ff28 	bl	8001824 <HAL_DMA_Start_IT>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e051      	b.n	8002a82 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029ec:	60da      	str	r2, [r3, #12]
      break;
 80029ee:	e002      	b.n	80029f6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	75fb      	strb	r3, [r7, #23]
      break;
 80029f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d141      	bne.n	8002a80 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fd4f 	bl	80034a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a22      	ldr	r2, [pc, #136]	@ (8002a98 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d107      	bne.n	8002a24 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a22:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1b      	ldr	r2, [pc, #108]	@ (8002a98 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00e      	beq.n	8002a4c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a36:	d009      	beq.n	8002a4c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a17      	ldr	r2, [pc, #92]	@ (8002a9c <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a16      	ldr	r2, [pc, #88]	@ (8002aa0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d111      	bne.n	8002a70 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d010      	beq.n	8002a80 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6e:	e007      	b.n	8002a80 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	08002e7f 	.word	0x08002e7f
 8002a90:	08002f27 	.word	0x08002f27
 8002a94:	08002ded 	.word	0x08002ded
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40000800 	.word	0x40000800

08002aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e0ae      	b.n	8002c20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b0c      	cmp	r3, #12
 8002ace:	f200 809f 	bhi.w	8002c10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002b0d 	.word	0x08002b0d
 8002adc:	08002c11 	.word	0x08002c11
 8002ae0:	08002c11 	.word	0x08002c11
 8002ae4:	08002c11 	.word	0x08002c11
 8002ae8:	08002b4d 	.word	0x08002b4d
 8002aec:	08002c11 	.word	0x08002c11
 8002af0:	08002c11 	.word	0x08002c11
 8002af4:	08002c11 	.word	0x08002c11
 8002af8:	08002b8f 	.word	0x08002b8f
 8002afc:	08002c11 	.word	0x08002c11
 8002b00:	08002c11 	.word	0x08002c11
 8002b04:	08002c11 	.word	0x08002c11
 8002b08:	08002bcf 	.word	0x08002bcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 faaa 	bl	800306c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0208 	orr.w	r2, r2, #8
 8002b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0204 	bic.w	r2, r2, #4
 8002b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6999      	ldr	r1, [r3, #24]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	619a      	str	r2, [r3, #24]
      break;
 8002b4a:	e064      	b.n	8002c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 faf0 	bl	8003138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6999      	ldr	r1, [r3, #24]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	021a      	lsls	r2, r3, #8
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	619a      	str	r2, [r3, #24]
      break;
 8002b8c:	e043      	b.n	8002c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fb39 	bl	800320c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0208 	orr.w	r2, r2, #8
 8002ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0204 	bic.w	r2, r2, #4
 8002bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69d9      	ldr	r1, [r3, #28]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	61da      	str	r2, [r3, #28]
      break;
 8002bcc:	e023      	b.n	8002c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fb83 	bl	80032e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69d9      	ldr	r1, [r3, #28]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	021a      	lsls	r2, r3, #8
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	61da      	str	r2, [r3, #28]
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	75fb      	strb	r3, [r7, #23]
      break;
 8002c14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIM_ConfigClockSource+0x1c>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e0b4      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x186>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c7c:	d03e      	beq.n	8002cfc <HAL_TIM_ConfigClockSource+0xd4>
 8002c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c82:	f200 8087 	bhi.w	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c8a:	f000 8086 	beq.w	8002d9a <HAL_TIM_ConfigClockSource+0x172>
 8002c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c92:	d87f      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002c94:	2b70      	cmp	r3, #112	@ 0x70
 8002c96:	d01a      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0xa6>
 8002c98:	2b70      	cmp	r3, #112	@ 0x70
 8002c9a:	d87b      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002c9c:	2b60      	cmp	r3, #96	@ 0x60
 8002c9e:	d050      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x11a>
 8002ca0:	2b60      	cmp	r3, #96	@ 0x60
 8002ca2:	d877      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca4:	2b50      	cmp	r3, #80	@ 0x50
 8002ca6:	d03c      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0xfa>
 8002ca8:	2b50      	cmp	r3, #80	@ 0x50
 8002caa:	d873      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002cac:	2b40      	cmp	r3, #64	@ 0x40
 8002cae:	d058      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x13a>
 8002cb0:	2b40      	cmp	r3, #64	@ 0x40
 8002cb2:	d86f      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb4:	2b30      	cmp	r3, #48	@ 0x30
 8002cb6:	d064      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0x15a>
 8002cb8:	2b30      	cmp	r3, #48	@ 0x30
 8002cba:	d86b      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d060      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d867      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d05c      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d05a      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0x15a>
 8002ccc:	e062      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cde:	f000 fbc4 	bl	800346a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	609a      	str	r2, [r3, #8]
      break;
 8002cfa:	e04f      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d0c:	f000 fbad 	bl	800346a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d1e:	609a      	str	r2, [r3, #8]
      break;
 8002d20:	e03c      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f000 fb24 	bl	800337c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2150      	movs	r1, #80	@ 0x50
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fb7b 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 8002d40:	e02c      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f000 fb42 	bl	80033d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2160      	movs	r1, #96	@ 0x60
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fb6b 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 8002d60:	e01c      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f000 fb04 	bl	800337c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2140      	movs	r1, #64	@ 0x40
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fb5b 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 8002d80:	e00c      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f000 fb52 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 8002d92:	e003      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      break;
 8002d98:	e000      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d107      	bne.n	8002e14 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e12:	e02a      	b.n	8002e6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d107      	bne.n	8002e2e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2202      	movs	r2, #2
 8002e22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e2c:	e01d      	b.n	8002e6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d107      	bne.n	8002e48 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e46:	e010      	b.n	8002e6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d107      	bne.n	8002e62 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2208      	movs	r2, #8
 8002e56:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e60:	e003      	b.n	8002e6a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff ffb5 	bl	8002dda <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	771a      	strb	r2, [r3, #28]
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d10b      	bne.n	8002eae <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d136      	bne.n	8002f12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eac:	e031      	b.n	8002f12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d10b      	bne.n	8002ed0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d125      	bne.n	8002f12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ece:	e020      	b.n	8002f12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d10b      	bne.n	8002ef2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2204      	movs	r2, #4
 8002ede:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d114      	bne.n	8002f12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ef0:	e00f      	b.n	8002f12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d10a      	bne.n	8002f12 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2208      	movs	r2, #8
 8002f00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d103      	bne.n	8002f12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff ff4f 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	771a      	strb	r2, [r3, #28]
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d103      	bne.n	8002f46 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	771a      	strb	r2, [r3, #28]
 8002f44:	e019      	b.n	8002f7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d103      	bne.n	8002f58 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2202      	movs	r2, #2
 8002f54:	771a      	strb	r2, [r3, #28]
 8002f56:	e010      	b.n	8002f7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d103      	bne.n	8002f6a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2204      	movs	r2, #4
 8002f66:	771a      	strb	r2, [r3, #28]
 8002f68:	e007      	b.n	8002f7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d102      	bne.n	8002f7a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2208      	movs	r2, #8
 8002f78:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff ff24 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	771a      	strb	r2, [r3, #28]
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8003060 <TIM_Base_SetConfig+0xd0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00b      	beq.n	8002fc0 <TIM_Base_SetConfig+0x30>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fae:	d007      	beq.n	8002fc0 <TIM_Base_SetConfig+0x30>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8003064 <TIM_Base_SetConfig+0xd4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <TIM_Base_SetConfig+0x30>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a2b      	ldr	r2, [pc, #172]	@ (8003068 <TIM_Base_SetConfig+0xd8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d108      	bne.n	8002fd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a22      	ldr	r2, [pc, #136]	@ (8003060 <TIM_Base_SetConfig+0xd0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00b      	beq.n	8002ff2 <TIM_Base_SetConfig+0x62>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe0:	d007      	beq.n	8002ff2 <TIM_Base_SetConfig+0x62>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8003064 <TIM_Base_SetConfig+0xd4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_Base_SetConfig+0x62>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a1e      	ldr	r2, [pc, #120]	@ (8003068 <TIM_Base_SetConfig+0xd8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d108      	bne.n	8003004 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a0d      	ldr	r2, [pc, #52]	@ (8003060 <TIM_Base_SetConfig+0xd0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d103      	bne.n	8003038 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f023 0201 	bic.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	611a      	str	r2, [r3, #16]
  }
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800

0800306c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f023 0201 	bic.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800309a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0303 	bic.w	r3, r3, #3
 80030a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f023 0302 	bic.w	r3, r3, #2
 80030b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <TIM_OC1_SetConfig+0xc8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d10c      	bne.n	80030e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 0308 	bic.w	r3, r3, #8
 80030ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f023 0304 	bic.w	r3, r3, #4
 80030e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a13      	ldr	r2, [pc, #76]	@ (8003134 <TIM_OC1_SetConfig+0xc8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d111      	bne.n	800310e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	621a      	str	r2, [r3, #32]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40012c00 	.word	0x40012c00

08003138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 0210 	bic.w	r2, r3, #16
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800316e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f023 0320 	bic.w	r3, r3, #32
 8003182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a1d      	ldr	r2, [pc, #116]	@ (8003208 <TIM_OC2_SetConfig+0xd0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d10d      	bne.n	80031b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800319e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a14      	ldr	r2, [pc, #80]	@ (8003208 <TIM_OC2_SetConfig+0xd0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d113      	bne.n	80031e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	40012c00 	.word	0x40012c00

0800320c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800323a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1d      	ldr	r2, [pc, #116]	@ (80032dc <TIM_OC3_SetConfig+0xd0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10d      	bne.n	8003286 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a14      	ldr	r2, [pc, #80]	@ (80032dc <TIM_OC3_SetConfig+0xd0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d113      	bne.n	80032b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800329c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	621a      	str	r2, [r3, #32]
}
 80032d0:	bf00      	nop
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40012c00 	.word	0x40012c00

080032e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800330e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800332a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	031b      	lsls	r3, r3, #12
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a0f      	ldr	r2, [pc, #60]	@ (8003378 <TIM_OC4_SetConfig+0x98>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d109      	bne.n	8003354 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	019b      	lsls	r3, r3, #6
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	621a      	str	r2, [r3, #32]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr
 8003378:	40012c00 	.word	0x40012c00

0800337c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f023 0201 	bic.w	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f023 030a 	bic.w	r3, r3, #10
 80033b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	621a      	str	r2, [r3, #32]
}
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f023 0210 	bic.w	r2, r3, #16
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	031b      	lsls	r3, r3, #12
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003414:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	621a      	str	r2, [r3, #32]
}
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800344c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	f043 0307 	orr.w	r3, r3, #7
 8003458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800346a:	b480      	push	{r7}
 800346c:	b087      	sub	sp, #28
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003484:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	021a      	lsls	r2, r3, #8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	431a      	orrs	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	609a      	str	r2, [r3, #8]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	2201      	movs	r2, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a1a      	ldr	r2, [r3, #32]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	401a      	ands	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a1a      	ldr	r2, [r3, #32]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003504:	2302      	movs	r3, #2
 8003506:	e046      	b.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800352e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a16      	ldr	r2, [pc, #88]	@ (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00e      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003554:	d009      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a12      	ldr	r2, [pc, #72]	@ (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d004      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a10      	ldr	r2, [pc, #64]	@ (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10c      	bne.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	4313      	orrs	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800

080035ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e03d      	b.n	8003644 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *Handle);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fd ff58 	bl	800150c <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *Handle)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 800366c:	e002      	b.n	8003674 <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 800366e:	2001      	movs	r0, #1
 8003670:	f7ff ffed 	bl	800364e <WS28XX_Delay>
  while (Handle->Lock)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	795b      	ldrb	r3, [r3, #5]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f8      	bne.n	800366e <WS28XX_Lock+0xa>
  }
  Handle->Lock = 1;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	715a      	strb	r2, [r3, #5]
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *Handle)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	715a      	strb	r2, [r3, #5]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr
	...

080036a4 <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *Handle, TIM_HandleTypeDef *HTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	460b      	mov	r3, r1
 80036b4:	80fb      	strh	r3, [r7, #6]
 80036b6:	4613      	mov	r3, r2
 80036b8:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (Handle == NULL || HTim == NULL)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d07b      	beq.n	80037bc <WS28XX_Init+0x118>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d078      	beq.n	80037bc <WS28XX_Init+0x118>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 80036ca:	8c3b      	ldrh	r3, [r7, #32]
 80036cc:	2ba1      	cmp	r3, #161	@ 0xa1
 80036ce:	d874      	bhi.n	80037ba <WS28XX_Init+0x116>
    {
      break;
    }
    Handle->Channel = Channel;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	797a      	ldrb	r2, [r7, #5]
 80036d4:	711a      	strb	r2, [r3, #4]
    Handle->MaxPixel = Pixel;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8c3a      	ldrh	r2, [r7, #32]
 80036da:	815a      	strh	r2, [r3, #10]
    Handle->HTim = HTim;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fc fdeb 	bl	80002c0 <__aeabi_i2f>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4936      	ldr	r1, [pc, #216]	@ (80037c8 <WS28XX_Init+0x124>)
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fc feee 	bl	80004d0 <__aeabi_fdiv>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc fd2a 	bl	8000154 <__aeabi_fsub>
 8003700:	4603      	mov	r3, r0
 8003702:	4618      	mov	r0, r3
 8003704:	f7fc ff80 	bl	8000608 <__aeabi_f2uiz>
 8003708:	4603      	mov	r3, r0
 800370a:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(Handle->HTim ,aar_value);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(Handle->HTim, 0);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2200      	movs	r2, #0
 8003726:	629a      	str	r2, [r3, #40]	@ 0x28
    Handle->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8003728:	6938      	ldr	r0, [r7, #16]
 800372a:	f7fc fdc5 	bl	80002b8 <__aeabi_ui2f>
 800372e:	4603      	mov	r3, r0
 8003730:	4926      	ldr	r1, [pc, #152]	@ (80037cc <WS28XX_Init+0x128>)
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc fe18 	bl	8000368 <__aeabi_fmul>
 8003738:	4603      	mov	r3, r0
 800373a:	4925      	ldr	r1, [pc, #148]	@ (80037d0 <WS28XX_Init+0x12c>)
 800373c:	4618      	mov	r0, r3
 800373e:	f7fc fec7 	bl	80004d0 <__aeabi_fdiv>
 8003742:	4603      	mov	r3, r0
 8003744:	4618      	mov	r0, r3
 8003746:	f7fc ff5f 	bl	8000608 <__aeabi_f2uiz>
 800374a:	4603      	mov	r3, r0
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	80da      	strh	r2, [r3, #6]
    Handle->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8003752:	6938      	ldr	r0, [r7, #16]
 8003754:	f7fc fdb0 	bl	80002b8 <__aeabi_ui2f>
 8003758:	4603      	mov	r3, r0
 800375a:	491b      	ldr	r1, [pc, #108]	@ (80037c8 <WS28XX_Init+0x124>)
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc fe03 	bl	8000368 <__aeabi_fmul>
 8003762:	4603      	mov	r3, r0
 8003764:	491a      	ldr	r1, [pc, #104]	@ (80037d0 <WS28XX_Init+0x12c>)
 8003766:	4618      	mov	r0, r3
 8003768:	f7fc feb2 	bl	80004d0 <__aeabi_fdiv>
 800376c:	4603      	mov	r3, r0
 800376e:	4618      	mov	r0, r3
 8003770:	f7fc ff4a 	bl	8000608 <__aeabi_f2uiz>
 8003774:	4603      	mov	r3, r0
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	811a      	strh	r2, [r3, #8]
    memset(Handle->Pixel, 0, sizeof(Handle->Pixel));
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	330c      	adds	r3, #12
 8003780:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f9a1 	bl	8003ace <memset>
    memset(Handle->Buffer, 0, sizeof(Handle->Buffer));
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8003792:	f640 721a 	movw	r2, #3866	@ 0xf1a
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f000 f998 	bl	8003ace <memset>
    HAL_TIM_PWM_Start_DMA(Handle->HTim, Handle->Channel, (const uint32_t*)Handle->Buffer, Pixel);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	791b      	ldrb	r3, [r3, #4]
 80037a6:	4619      	mov	r1, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f203 12ef 	addw	r2, r3, #495	@ 0x1ef
 80037ae:	8c3b      	ldrh	r3, [r7, #32]
 80037b0:	f7fe ffd6 	bl	8002760 <HAL_TIM_PWM_Start_DMA>
    answer = true;
 80037b4:	2301      	movs	r3, #1
 80037b6:	75fb      	strb	r3, [r7, #23]
 80037b8:	e000      	b.n	80037bc <WS28XX_Init+0x118>
      break;
 80037ba:	bf00      	nop
  }
  while (0);

  return answer;
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	3f4ccccd 	.word	0x3f4ccccd
 80037cc:	3ecccccd 	.word	0x3ecccccd
 80037d0:	3fa00000 	.word	0x3fa00000

080037d4 <WS28XX_SetPixel_RGB_565>:
  * @param  Color: RGB565 Color Code
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGB_565(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint16_t Color)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	807b      	strh	r3, [r7, #2]
 80037e0:	4613      	mov	r3, r2
 80037e2:	803b      	strh	r3, [r7, #0]
  bool answer = true;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	895b      	ldrh	r3, [r3, #10]
 80037ec:	887a      	ldrh	r2, [r7, #2]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <WS28XX_SetPixel_RGB_565+0x24>
    {
      answer = false;
 80037f2:	2300      	movs	r3, #0
 80037f4:	73fb      	strb	r3, [r7, #15]
      break;
 80037f6:	e034      	b.n	8003862 <WS28XX_SetPixel_RGB_565+0x8e>
    }
    Red = ((Color >> 8) & 0xF8);
 80037f8:	883b      	ldrh	r3, [r7, #0]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f023 0307 	bic.w	r3, r3, #7
 8003804:	73bb      	strb	r3, [r7, #14]
    Green = ((Color >> 3) & 0xFC);
 8003806:	883b      	ldrh	r3, [r7, #0]
 8003808:	08db      	lsrs	r3, r3, #3
 800380a:	b29b      	uxth	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f023 0303 	bic.w	r3, r3, #3
 8003812:	737b      	strb	r3, [r7, #13]
    Blue = ((Color << 3) & 0xF8);
 8003814:	883b      	ldrh	r3, [r7, #0]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	733b      	strb	r3, [r7, #12]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 800381a:	7b7b      	ldrb	r3, [r7, #13]
 800381c:	887a      	ldrh	r2, [r7, #2]
 800381e:	4914      	ldr	r1, [pc, #80]	@ (8003870 <WS28XX_SetPixel_RGB_565+0x9c>)
 8003820:	5cc8      	ldrb	r0, [r1, r3]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4413      	add	r3, r2
 800382a:	440b      	add	r3, r1
 800382c:	330c      	adds	r3, #12
 800382e:	4602      	mov	r2, r0
 8003830:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8003832:	7bbb      	ldrb	r3, [r7, #14]
 8003834:	887a      	ldrh	r2, [r7, #2]
 8003836:	490e      	ldr	r1, [pc, #56]	@ (8003870 <WS28XX_SetPixel_RGB_565+0x9c>)
 8003838:	5cc8      	ldrb	r0, [r1, r3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	440b      	add	r3, r1
 8003844:	330d      	adds	r3, #13
 8003846:	4602      	mov	r2, r0
 8003848:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 800384a:	7b3b      	ldrb	r3, [r7, #12]
 800384c:	887a      	ldrh	r2, [r7, #2]
 800384e:	4908      	ldr	r1, [pc, #32]	@ (8003870 <WS28XX_SetPixel_RGB_565+0x9c>)
 8003850:	5cc8      	ldrb	r0, [r1, r3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4413      	add	r3, r2
 800385a:	440b      	add	r3, r1
 800385c:	330e      	adds	r3, #14
 800385e:	4602      	mov	r2, r0
 8003860:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	08003b64 	.word	0x08003b64

08003874 <WS28XX_SetPixel_RGB_888>:
  * @param  Color: RGB888 Color Code
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGB_888(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint32_t Color)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	460b      	mov	r3, r1
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	817b      	strh	r3, [r7, #10]
  bool answer = true;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	895b      	ldrh	r3, [r3, #10]
 800388a:	897a      	ldrh	r2, [r7, #10]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <WS28XX_SetPixel_RGB_888+0x22>
    {
      answer = false;
 8003890:	2300      	movs	r3, #0
 8003892:	75fb      	strb	r3, [r7, #23]
      break;
 8003894:	e02b      	b.n	80038ee <WS28XX_SetPixel_RGB_888+0x7a>
    }
    Red = ((Color & 0xFF0000) >> 16);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	75bb      	strb	r3, [r7, #22]
    Green = ((Color & 0x00FF00) >> 8);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	757b      	strb	r3, [r7, #21]
    Blue = (Color & 0x0000FF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 80038a6:	7d7b      	ldrb	r3, [r7, #21]
 80038a8:	897a      	ldrh	r2, [r7, #10]
 80038aa:	4914      	ldr	r1, [pc, #80]	@ (80038fc <WS28XX_SetPixel_RGB_888+0x88>)
 80038ac:	5cc8      	ldrb	r0, [r1, r3]
 80038ae:	68f9      	ldr	r1, [r7, #12]
 80038b0:	4613      	mov	r3, r2
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	4413      	add	r3, r2
 80038b6:	440b      	add	r3, r1
 80038b8:	330c      	adds	r3, #12
 80038ba:	4602      	mov	r2, r0
 80038bc:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 80038be:	7dbb      	ldrb	r3, [r7, #22]
 80038c0:	897a      	ldrh	r2, [r7, #10]
 80038c2:	490e      	ldr	r1, [pc, #56]	@ (80038fc <WS28XX_SetPixel_RGB_888+0x88>)
 80038c4:	5cc8      	ldrb	r0, [r1, r3]
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	440b      	add	r3, r1
 80038d0:	330d      	adds	r3, #13
 80038d2:	4602      	mov	r2, r0
 80038d4:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 80038d6:	7d3b      	ldrb	r3, [r7, #20]
 80038d8:	897a      	ldrh	r2, [r7, #10]
 80038da:	4908      	ldr	r1, [pc, #32]	@ (80038fc <WS28XX_SetPixel_RGB_888+0x88>)
 80038dc:	5cc8      	ldrb	r0, [r1, r3]
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	4613      	mov	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	330e      	adds	r3, #14
 80038ea:	4602      	mov	r2, r0
 80038ec:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	08003b64 	.word	0x08003b64

08003900 <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	4608      	mov	r0, r1
 800390a:	4611      	mov	r1, r2
 800390c:	461a      	mov	r2, r3
 800390e:	4603      	mov	r3, r0
 8003910:	817b      	strh	r3, [r7, #10]
 8003912:	460b      	mov	r3, r1
 8003914:	813b      	strh	r3, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	71fb      	strb	r3, [r7, #7]
  bool answer = true;
 800391a:	2301      	movs	r3, #1
 800391c:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	895b      	ldrh	r3, [r3, #10]
 8003922:	897a      	ldrh	r2, [r7, #10]
 8003924:	429a      	cmp	r2, r3
 8003926:	d302      	bcc.n	800392e <WS28XX_SetPixel_RGBW_565+0x2e>
    {
      answer = false;
 8003928:	2300      	movs	r3, #0
 800392a:	75fb      	strb	r3, [r7, #23]
      break;
 800392c:	e051      	b.n	80039d2 <WS28XX_SetPixel_RGBW_565+0xd2>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 800392e:	893b      	ldrh	r3, [r7, #8]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	b29b      	uxth	r3, r3
 8003934:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8003938:	79fa      	ldrb	r2, [r7, #7]
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	4a28      	ldr	r2, [pc, #160]	@ (80039e0 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8003940:	fb82 1203 	smull	r1, r2, r2, r3
 8003944:	441a      	add	r2, r3
 8003946:	11d2      	asrs	r2, r2, #7
 8003948:	17db      	asrs	r3, r3, #31
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	75bb      	strb	r3, [r7, #22]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 800394e:	893b      	ldrh	r3, [r7, #8]
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	b29b      	uxth	r3, r3
 8003954:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8003958:	79fa      	ldrb	r2, [r7, #7]
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	4a20      	ldr	r2, [pc, #128]	@ (80039e0 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8003960:	fb82 1203 	smull	r1, r2, r2, r3
 8003964:	441a      	add	r2, r3
 8003966:	11d2      	asrs	r2, r2, #7
 8003968:	17db      	asrs	r3, r3, #31
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	757b      	strb	r3, [r7, #21]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 800396e:	893b      	ldrh	r3, [r7, #8]
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	79fa      	ldrb	r2, [r7, #7]
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	4a19      	ldr	r2, [pc, #100]	@ (80039e0 <WS28XX_SetPixel_RGBW_565+0xe0>)
 800397c:	fb82 1203 	smull	r1, r2, r2, r3
 8003980:	441a      	add	r2, r3
 8003982:	11d2      	asrs	r2, r2, #7
 8003984:	17db      	asrs	r3, r3, #31
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 800398a:	7d7b      	ldrb	r3, [r7, #21]
 800398c:	897a      	ldrh	r2, [r7, #10]
 800398e:	4915      	ldr	r1, [pc, #84]	@ (80039e4 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8003990:	5cc8      	ldrb	r0, [r1, r3]
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	440b      	add	r3, r1
 800399c:	330c      	adds	r3, #12
 800399e:	4602      	mov	r2, r0
 80039a0:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 80039a2:	7dbb      	ldrb	r3, [r7, #22]
 80039a4:	897a      	ldrh	r2, [r7, #10]
 80039a6:	490f      	ldr	r1, [pc, #60]	@ (80039e4 <WS28XX_SetPixel_RGBW_565+0xe4>)
 80039a8:	5cc8      	ldrb	r0, [r1, r3]
 80039aa:	68f9      	ldr	r1, [r7, #12]
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	440b      	add	r3, r1
 80039b4:	330d      	adds	r3, #13
 80039b6:	4602      	mov	r2, r0
 80039b8:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 80039ba:	7d3b      	ldrb	r3, [r7, #20]
 80039bc:	897a      	ldrh	r2, [r7, #10]
 80039be:	4909      	ldr	r1, [pc, #36]	@ (80039e4 <WS28XX_SetPixel_RGBW_565+0xe4>)
 80039c0:	5cc8      	ldrb	r0, [r1, r3]
 80039c2:	68f9      	ldr	r1, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	4413      	add	r3, r2
 80039ca:	440b      	add	r3, r1
 80039cc:	330e      	adds	r3, #14
 80039ce:	4602      	mov	r2, r0
 80039d0:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	80808081 	.word	0x80808081
 80039e4:	08003b64 	.word	0x08003b64

080039e8 <WS28XX_Update>:
  * @param  *Handle: Pointer to WS28XX_HandleTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *Handle)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b089      	sub	sp, #36	@ 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  bool answer = true;
 80039f0:	2301      	movs	r3, #1
 80039f2:	77fb      	strb	r3, [r7, #31]
  uint32_t i = 1;
 80039f4:	2301      	movs	r3, #1
 80039f6:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(Handle);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff fe33 	bl	8003664 <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < Handle->MaxPixel; pixel++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	82fb      	strh	r3, [r7, #22]
 8003a02:	e03e      	b.n	8003a82 <WS28XX_Update+0x9a>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	e035      	b.n	8003a76 <WS28XX_Update+0x8e>
    {
      for (int b = 7; b >= 0 ; b--)
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	e02c      	b.n	8003a6a <WS28XX_Update+0x82>
      {
        if ((Handle->Pixel[pixel][rgb] & (1 << b)) == 0)
 8003a10:	8afa      	ldrh	r2, [r7, #22]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4413      	add	r3, r2
 8003a1a:	18ca      	adds	r2, r1, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	330c      	adds	r3, #12
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	fa42 f303 	asr.w	r3, r2, r3
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <WS28XX_Update+0x62>
        {
          Handle->Buffer[i] = Handle->Pulse0;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	88db      	ldrh	r3, [r3, #6]
 8003a38:	b2d9      	uxtb	r1, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8003a44:	460a      	mov	r2, r1
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e009      	b.n	8003a5e <WS28XX_Update+0x76>
        }
        else
        {
          Handle->Buffer[i] = Handle->Pulse1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	891b      	ldrh	r3, [r3, #8]
 8003a4e:	b2d9      	uxtb	r1, r3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	4413      	add	r3, r2
 8003a56:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8003a5a:	460a      	mov	r2, r1
 8003a5c:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	3301      	adds	r3, #1
 8003a62:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	dacf      	bge.n	8003a10 <WS28XX_Update+0x28>
    for (int rgb = 0; rgb < 3; rgb ++)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	3301      	adds	r3, #1
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	ddc6      	ble.n	8003a0a <WS28XX_Update+0x22>
  for (uint16_t pixel = 0; pixel < Handle->MaxPixel; pixel++)
 8003a7c:	8afb      	ldrh	r3, [r7, #22]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	82fb      	strh	r3, [r7, #22]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	895b      	ldrh	r3, [r3, #10]
 8003a86:	8afa      	ldrh	r2, [r7, #22]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d3bb      	bcc.n	8003a04 <WS28XX_Update+0x1c>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(Handle->HTim, Handle->Channel, (const uint32_t*)Handle->Buffer, (Handle->MaxPixel * 24) + 2) != HAL_OK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	791b      	ldrb	r3, [r3, #4]
 8003a94:	461c      	mov	r4, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f203 12ef 	addw	r2, r3, #495	@ 0x1ef
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	895b      	ldrh	r3, [r3, #10]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	0049      	lsls	r1, r1, #1
 8003aa4:	440b      	add	r3, r1
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3302      	adds	r3, #2
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	4621      	mov	r1, r4
 8003ab0:	f7fe fe56 	bl	8002760 <HAL_TIM_PWM_Start_DMA>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <WS28XX_Update+0xd6>
  {
    answer = false;
 8003aba:	2300      	movs	r3, #0
 8003abc:	77fb      	strb	r3, [r7, #31]
  }
  WS28XX_UnLock(Handle);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fde3 	bl	800368a <WS28XX_UnLock>
  return answer;
 8003ac4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3724      	adds	r7, #36	@ 0x24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd90      	pop	{r4, r7, pc}

08003ace <memset>:
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4402      	add	r2, r0
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d100      	bne.n	8003ad8 <memset+0xa>
 8003ad6:	4770      	bx	lr
 8003ad8:	f803 1b01 	strb.w	r1, [r3], #1
 8003adc:	e7f9      	b.n	8003ad2 <memset+0x4>
	...

08003ae0 <__libc_init_array>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	4d0c      	ldr	r5, [pc, #48]	@ (8003b18 <__libc_init_array+0x38>)
 8003ae6:	4c0d      	ldr	r4, [pc, #52]	@ (8003b1c <__libc_init_array+0x3c>)
 8003ae8:	1b64      	subs	r4, r4, r5
 8003aea:	10a4      	asrs	r4, r4, #2
 8003aec:	42a6      	cmp	r6, r4
 8003aee:	d109      	bne.n	8003b04 <__libc_init_array+0x24>
 8003af0:	f000 f81a 	bl	8003b28 <_init>
 8003af4:	2600      	movs	r6, #0
 8003af6:	4d0a      	ldr	r5, [pc, #40]	@ (8003b20 <__libc_init_array+0x40>)
 8003af8:	4c0a      	ldr	r4, [pc, #40]	@ (8003b24 <__libc_init_array+0x44>)
 8003afa:	1b64      	subs	r4, r4, r5
 8003afc:	10a4      	asrs	r4, r4, #2
 8003afe:	42a6      	cmp	r6, r4
 8003b00:	d105      	bne.n	8003b0e <__libc_init_array+0x2e>
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
 8003b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b08:	4798      	blx	r3
 8003b0a:	3601      	adds	r6, #1
 8003b0c:	e7ee      	b.n	8003aec <__libc_init_array+0xc>
 8003b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b12:	4798      	blx	r3
 8003b14:	3601      	adds	r6, #1
 8003b16:	e7f2      	b.n	8003afe <__libc_init_array+0x1e>
 8003b18:	08003c64 	.word	0x08003c64
 8003b1c:	08003c64 	.word	0x08003c64
 8003b20:	08003c64 	.word	0x08003c64
 8003b24:	08003c68 	.word	0x08003c68

08003b28 <_init>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	bf00      	nop
 8003b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2e:	bc08      	pop	{r3}
 8003b30:	469e      	mov	lr, r3
 8003b32:	4770      	bx	lr

08003b34 <_fini>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	bf00      	nop
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr
