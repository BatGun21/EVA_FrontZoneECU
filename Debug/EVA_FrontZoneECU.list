
EVA_FrontZoneECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005bf8  08005bf8  00006bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d38  08005d38  0000701c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d38  08005d38  0000701c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d38  08005d38  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d38  08005d38  00006d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d3c  08005d3c  00006d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005d40  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003510  2000001c  08005d5c  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000352c  08005d5c  0000752c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7c0  00000000  00000000  00007045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b7  00000000  00000000  00012805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00014bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ab  00000000  00000000  00015858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b6a  00000000  00000000  00016203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f899  00000000  00000000  0002ed6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8c8  00000000  00000000  0003e606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ccece  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003490  00000000  00000000  000ccf14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d03a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005be0 	.word	0x08005be0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	08005be0 	.word	0x08005be0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_frsub>:
 80005d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80005dc:	e002      	b.n	80005e4 <__addsf3>
 80005de:	bf00      	nop

080005e0 <__aeabi_fsub>:
 80005e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080005e4 <__addsf3>:
 80005e4:	0042      	lsls	r2, r0, #1
 80005e6:	bf1f      	itttt	ne
 80005e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005ec:	ea92 0f03 	teqne	r2, r3
 80005f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f8:	d06a      	beq.n	80006d0 <__addsf3+0xec>
 80005fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000602:	bfc1      	itttt	gt
 8000604:	18d2      	addgt	r2, r2, r3
 8000606:	4041      	eorgt	r1, r0
 8000608:	4048      	eorgt	r0, r1
 800060a:	4041      	eorgt	r1, r0
 800060c:	bfb8      	it	lt
 800060e:	425b      	neglt	r3, r3
 8000610:	2b19      	cmp	r3, #25
 8000612:	bf88      	it	hi
 8000614:	4770      	bxhi	lr
 8000616:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800062a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800062e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4249      	negne	r1, r1
 8000636:	ea92 0f03 	teq	r2, r3
 800063a:	d03f      	beq.n	80006bc <__addsf3+0xd8>
 800063c:	f1a2 0201 	sub.w	r2, r2, #1
 8000640:	fa41 fc03 	asr.w	ip, r1, r3
 8000644:	eb10 000c 	adds.w	r0, r0, ip
 8000648:	f1c3 0320 	rsb	r3, r3, #32
 800064c:	fa01 f103 	lsl.w	r1, r1, r3
 8000650:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000654:	d502      	bpl.n	800065c <__addsf3+0x78>
 8000656:	4249      	negs	r1, r1
 8000658:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800065c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000660:	d313      	bcc.n	800068a <__addsf3+0xa6>
 8000662:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000666:	d306      	bcc.n	8000676 <__addsf3+0x92>
 8000668:	0840      	lsrs	r0, r0, #1
 800066a:	ea4f 0131 	mov.w	r1, r1, rrx
 800066e:	f102 0201 	add.w	r2, r2, #1
 8000672:	2afe      	cmp	r2, #254	@ 0xfe
 8000674:	d251      	bcs.n	800071a <__addsf3+0x136>
 8000676:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800067a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067e:	bf08      	it	eq
 8000680:	f020 0001 	biceq.w	r0, r0, #1
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	4770      	bx	lr
 800068a:	0049      	lsls	r1, r1, #1
 800068c:	eb40 0000 	adc.w	r0, r0, r0
 8000690:	3a01      	subs	r2, #1
 8000692:	bf28      	it	cs
 8000694:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000698:	d2ed      	bcs.n	8000676 <__addsf3+0x92>
 800069a:	fab0 fc80 	clz	ip, r0
 800069e:	f1ac 0c08 	sub.w	ip, ip, #8
 80006a2:	ebb2 020c 	subs.w	r2, r2, ip
 80006a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006aa:	bfaa      	itet	ge
 80006ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006b0:	4252      	neglt	r2, r2
 80006b2:	4318      	orrge	r0, r3
 80006b4:	bfbc      	itt	lt
 80006b6:	40d0      	lsrlt	r0, r2
 80006b8:	4318      	orrlt	r0, r3
 80006ba:	4770      	bx	lr
 80006bc:	f092 0f00 	teq	r2, #0
 80006c0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80006c4:	bf06      	itte	eq
 80006c6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80006ca:	3201      	addeq	r2, #1
 80006cc:	3b01      	subne	r3, #1
 80006ce:	e7b5      	b.n	800063c <__addsf3+0x58>
 80006d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d8:	bf18      	it	ne
 80006da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006de:	d021      	beq.n	8000724 <__addsf3+0x140>
 80006e0:	ea92 0f03 	teq	r2, r3
 80006e4:	d004      	beq.n	80006f0 <__addsf3+0x10c>
 80006e6:	f092 0f00 	teq	r2, #0
 80006ea:	bf08      	it	eq
 80006ec:	4608      	moveq	r0, r1
 80006ee:	4770      	bx	lr
 80006f0:	ea90 0f01 	teq	r0, r1
 80006f4:	bf1c      	itt	ne
 80006f6:	2000      	movne	r0, #0
 80006f8:	4770      	bxne	lr
 80006fa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80006fe:	d104      	bne.n	800070a <__addsf3+0x126>
 8000700:	0040      	lsls	r0, r0, #1
 8000702:	bf28      	it	cs
 8000704:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000708:	4770      	bx	lr
 800070a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800070e:	bf3c      	itt	cc
 8000710:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000714:	4770      	bxcc	lr
 8000716:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800071a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800071e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000722:	4770      	bx	lr
 8000724:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000728:	bf16      	itet	ne
 800072a:	4608      	movne	r0, r1
 800072c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000730:	4601      	movne	r1, r0
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	bf06      	itte	eq
 8000736:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800073a:	ea90 0f01 	teqeq	r0, r1
 800073e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000742:	4770      	bx	lr

08000744 <__aeabi_ui2f>:
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e004      	b.n	8000754 <__aeabi_i2f+0x8>
 800074a:	bf00      	nop

0800074c <__aeabi_i2f>:
 800074c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	ea5f 0c00 	movs.w	ip, r0
 8000758:	bf08      	it	eq
 800075a:	4770      	bxeq	lr
 800075c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000760:	4601      	mov	r1, r0
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	e01c      	b.n	80007a2 <__aeabi_l2f+0x2a>

08000768 <__aeabi_ul2f>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	e00a      	b.n	800078c <__aeabi_l2f+0x14>
 8000776:	bf00      	nop

08000778 <__aeabi_l2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__aeabi_l2f+0x14>
 8000786:	4240      	negs	r0, r0
 8000788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078c:	ea5f 0c01 	movs.w	ip, r1
 8000790:	bf02      	ittt	eq
 8000792:	4684      	moveq	ip, r0
 8000794:	4601      	moveq	r1, r0
 8000796:	2000      	moveq	r0, #0
 8000798:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800079c:	bf08      	it	eq
 800079e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80007a6:	fabc f28c 	clz	r2, ip
 80007aa:	3a08      	subs	r2, #8
 80007ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007b0:	db10      	blt.n	80007d4 <__aeabi_l2f+0x5c>
 80007b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b6:	4463      	add	r3, ip
 80007b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007bc:	f1c2 0220 	rsb	r2, r2, #32
 80007c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80007c4:	fa20 f202 	lsr.w	r2, r0, r2
 80007c8:	eb43 0002 	adc.w	r0, r3, r2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f102 0220 	add.w	r2, r2, #32
 80007d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e4:	fa21 f202 	lsr.w	r2, r1, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_fmul>:
 80007f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007fc:	bf1e      	ittt	ne
 80007fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000802:	ea92 0f0c 	teqne	r2, ip
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d06f      	beq.n	80008ec <__aeabi_fmul+0xf8>
 800080c:	441a      	add	r2, r3
 800080e:	ea80 0c01 	eor.w	ip, r0, r1
 8000812:	0240      	lsls	r0, r0, #9
 8000814:	bf18      	it	ne
 8000816:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800081a:	d01e      	beq.n	800085a <__aeabi_fmul+0x66>
 800081c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000820:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000824:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000828:	fba0 3101 	umull	r3, r1, r0, r1
 800082c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000830:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000834:	bf3e      	ittt	cc
 8000836:	0049      	lslcc	r1, r1, #1
 8000838:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800083c:	005b      	lslcc	r3, r3, #1
 800083e:	ea40 0001 	orr.w	r0, r0, r1
 8000842:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000846:	2afd      	cmp	r2, #253	@ 0xfd
 8000848:	d81d      	bhi.n	8000886 <__aeabi_fmul+0x92>
 800084a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	4770      	bx	lr
 800085a:	f090 0f00 	teq	r0, #0
 800085e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000862:	bf08      	it	eq
 8000864:	0249      	lsleq	r1, r1, #9
 8000866:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800086a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086e:	3a7f      	subs	r2, #127	@ 0x7f
 8000870:	bfc2      	ittt	gt
 8000872:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000876:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800087a:	4770      	bxgt	lr
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	3a01      	subs	r2, #1
 8000886:	dc5d      	bgt.n	8000944 <__aeabi_fmul+0x150>
 8000888:	f112 0f19 	cmn.w	r2, #25
 800088c:	bfdc      	itt	le
 800088e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000892:	4770      	bxle	lr
 8000894:	f1c2 0200 	rsb	r2, r2, #0
 8000898:	0041      	lsls	r1, r0, #1
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	f1c2 0220 	rsb	r2, r2, #32
 80008a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008aa:	f140 0000 	adc.w	r0, r0, #0
 80008ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008b2:	bf08      	it	eq
 80008b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b8:	4770      	bx	lr
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80008c2:	bf02      	ittt	eq
 80008c4:	0040      	lsleq	r0, r0, #1
 80008c6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80008ca:	3a01      	subeq	r2, #1
 80008cc:	d0f9      	beq.n	80008c2 <__aeabi_fmul+0xce>
 80008ce:	ea40 000c 	orr.w	r0, r0, ip
 80008d2:	f093 0f00 	teq	r3, #0
 80008d6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008da:	bf02      	ittt	eq
 80008dc:	0049      	lsleq	r1, r1, #1
 80008de:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80008e2:	3b01      	subeq	r3, #1
 80008e4:	d0f9      	beq.n	80008da <__aeabi_fmul+0xe6>
 80008e6:	ea41 010c 	orr.w	r1, r1, ip
 80008ea:	e78f      	b.n	800080c <__aeabi_fmul+0x18>
 80008ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008f0:	ea92 0f0c 	teq	r2, ip
 80008f4:	bf18      	it	ne
 80008f6:	ea93 0f0c 	teqne	r3, ip
 80008fa:	d00a      	beq.n	8000912 <__aeabi_fmul+0x11e>
 80008fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000900:	bf18      	it	ne
 8000902:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000906:	d1d8      	bne.n	80008ba <__aeabi_fmul+0xc6>
 8000908:	ea80 0001 	eor.w	r0, r0, r1
 800090c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f090 0f00 	teq	r0, #0
 8000916:	bf17      	itett	ne
 8000918:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800091c:	4608      	moveq	r0, r1
 800091e:	f091 0f00 	teqne	r1, #0
 8000922:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000926:	d014      	beq.n	8000952 <__aeabi_fmul+0x15e>
 8000928:	ea92 0f0c 	teq	r2, ip
 800092c:	d101      	bne.n	8000932 <__aeabi_fmul+0x13e>
 800092e:	0242      	lsls	r2, r0, #9
 8000930:	d10f      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000932:	ea93 0f0c 	teq	r3, ip
 8000936:	d103      	bne.n	8000940 <__aeabi_fmul+0x14c>
 8000938:	024b      	lsls	r3, r1, #9
 800093a:	bf18      	it	ne
 800093c:	4608      	movne	r0, r1
 800093e:	d108      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000940:	ea80 0001 	eor.w	r0, r0, r1
 8000944:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000950:	4770      	bx	lr
 8000952:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000956:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800095a:	4770      	bx	lr

0800095c <__aeabi_fdiv>:
 800095c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000964:	bf1e      	ittt	ne
 8000966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800096a:	ea92 0f0c 	teqne	r2, ip
 800096e:	ea93 0f0c 	teqne	r3, ip
 8000972:	d069      	beq.n	8000a48 <__aeabi_fdiv+0xec>
 8000974:	eba2 0203 	sub.w	r2, r2, r3
 8000978:	ea80 0c01 	eor.w	ip, r0, r1
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000982:	d037      	beq.n	80009f4 <__aeabi_fdiv+0x98>
 8000984:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000988:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800098c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000990:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000994:	428b      	cmp	r3, r1
 8000996:	bf38      	it	cc
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800099e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80009a2:	428b      	cmp	r3, r1
 80009a4:	bf24      	itt	cs
 80009a6:	1a5b      	subcs	r3, r3, r1
 80009a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009b0:	bf24      	itt	cs
 80009b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009be:	bf24      	itt	cs
 80009c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009cc:	bf24      	itt	cs
 80009ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	bf18      	it	ne
 80009da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009de:	d1e0      	bne.n	80009a2 <__aeabi_fdiv+0x46>
 80009e0:	2afd      	cmp	r2, #253	@ 0xfd
 80009e2:	f63f af50 	bhi.w	8000886 <__aeabi_fmul+0x92>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fc:	327f      	adds	r2, #127	@ 0x7f
 80009fe:	bfc2      	ittt	gt
 8000a00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a08:	4770      	bxgt	lr
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	3a01      	subs	r2, #1
 8000a14:	e737      	b.n	8000886 <__aeabi_fmul+0x92>
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fdiv+0xc2>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fdiv+0xda>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e795      	b.n	8000974 <__aeabi_fdiv+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	d108      	bne.n	8000a64 <__aeabi_fdiv+0x108>
 8000a52:	0242      	lsls	r2, r0, #9
 8000a54:	f47f af7d 	bne.w	8000952 <__aeabi_fmul+0x15e>
 8000a58:	ea93 0f0c 	teq	r3, ip
 8000a5c:	f47f af70 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e776      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a64:	ea93 0f0c 	teq	r3, ip
 8000a68:	d104      	bne.n	8000a74 <__aeabi_fdiv+0x118>
 8000a6a:	024b      	lsls	r3, r1, #9
 8000a6c:	f43f af4c 	beq.w	8000908 <__aeabi_fmul+0x114>
 8000a70:	4608      	mov	r0, r1
 8000a72:	e76e      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a78:	bf18      	it	ne
 8000a7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a7e:	d1ca      	bne.n	8000a16 <__aeabi_fdiv+0xba>
 8000a80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000a84:	f47f af5c 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000a8c:	f47f af3c 	bne.w	8000908 <__aeabi_fmul+0x114>
 8000a90:	e75f      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a92:	bf00      	nop

08000a94 <__aeabi_f2uiz>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	d20e      	bcs.n	8000ab6 <__aeabi_f2uiz+0x22>
 8000a98:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a9c:	d30b      	bcc.n	8000ab6 <__aeabi_f2uiz+0x22>
 8000a9e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000aa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aa6:	d409      	bmi.n	8000abc <__aeabi_f2uiz+0x28>
 8000aa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000aac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ab0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr
 8000abc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ac0:	d101      	bne.n	8000ac6 <__aeabi_f2uiz+0x32>
 8000ac2:	0242      	lsls	r2, r0, #9
 8000ac4:	d102      	bne.n	8000acc <__aeabi_f2uiz+0x38>
 8000ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ae4:	4b25      	ldr	r3, [pc, #148]	@ (8000b7c <MX_ADC1_Init+0xa8>)
 8000ae6:	4a26      	ldr	r2, [pc, #152]	@ (8000b80 <MX_ADC1_Init+0xac>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000aea:	4b24      	ldr	r3, [pc, #144]	@ (8000b7c <MX_ADC1_Init+0xa8>)
 8000aec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000af0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000af2:	4b22      	ldr	r3, [pc, #136]	@ (8000b7c <MX_ADC1_Init+0xa8>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af8:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <MX_ADC1_Init+0xa8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <MX_ADC1_Init+0xa8>)
 8000b00:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <MX_ADC1_Init+0xa8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <MX_ADC1_Init+0xa8>)
 8000b0e:	2203      	movs	r2, #3
 8000b10:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b12:	481a      	ldr	r0, [pc, #104]	@ (8000b7c <MX_ADC1_Init+0xa8>)
 8000b14:	f001 fdd2 	bl	80026bc <HAL_ADC_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b1e:	f001 fb0d 	bl	800213c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b22:	2302      	movs	r3, #2
 8000b24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4812      	ldr	r0, [pc, #72]	@ (8000b7c <MX_ADC1_Init+0xa8>)
 8000b34:	f002 f886 	bl	8002c44 <HAL_ADC_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f001 fafd 	bl	800213c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <MX_ADC1_Init+0xa8>)
 8000b4c:	f002 f87a 	bl	8002c44 <HAL_ADC_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000b56:	f001 faf1 	bl	800213c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	4806      	ldr	r0, [pc, #24]	@ (8000b7c <MX_ADC1_Init+0xa8>)
 8000b64:	f002 f86e 	bl	8002c44 <HAL_ADC_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000b6e:	f001 fae5 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000038 	.word	0x20000038
 8000b80:	40012400 	.word	0x40012400

08000b84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <HAL_ADC_MspInit+0x6c>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d121      	bne.n	8000be8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <HAL_ADC_MspInit+0x70>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <HAL_ADC_MspInit+0x70>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <HAL_ADC_MspInit+0x70>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <HAL_ADC_MspInit+0x70>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf4 <HAL_ADC_MspInit+0x70>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <HAL_ADC_MspInit+0x70>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000bd4:	231c      	movs	r3, #28
 8000bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4619      	mov	r1, r3
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <HAL_ADC_MspInit+0x74>)
 8000be4:	f002 fd36 	bl	8003654 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40012400 	.word	0x40012400
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010800 	.word	0x40010800

08000bfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_DMA_Init+0x58>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a13      	ldr	r2, [pc, #76]	@ (8000c54 <MX_DMA_Init+0x58>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_DMA_Init+0x58>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	200c      	movs	r0, #12
 8000c20:	f002 fa7b 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c24:	200c      	movs	r0, #12
 8000c26:	f002 fa94 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	200d      	movs	r0, #13
 8000c30:	f002 fa73 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c34:	200d      	movs	r0, #13
 8000c36:	f002 fa8c 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2010      	movs	r0, #16
 8000c40:	f002 fa6b 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c44:	2010      	movs	r0, #16
 8000c46:	f002 fa84 	bl	8003152 <HAL_NVIC_EnableIRQ>

}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000

08000c58 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <MX_GPIO_Init+0x28>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	4a07      	ldr	r2, [pc, #28]	@ (8000c80 <MX_GPIO_Init+0x28>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6193      	str	r3, [r2, #24]
 8000c6a:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <MX_GPIO_Init+0x28>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8a:	f001 fc91 	bl	80025b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8e:	f000 f851 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c92:	f7ff ffe1 	bl	8000c58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c96:	f7ff ffb1 	bl	8000bfc <MX_DMA_Init>
  MX_TIM1_Init();
 8000c9a:	f001 fad7 	bl	800224c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000c9e:	f7ff ff19 	bl	8000ad4 <MX_ADC1_Init>
  GPIO_Init_PA0_PA1_PA6();
 8000ca2:	f000 f89d 	bl	8000de0 <GPIO_Init_PA0_PA1_PA6>
  /* USER CODE BEGIN 2 */
  WS28XX_Init(&ws_pa8, &htim1, 36, TIM_CHANNEL_1, WS28XX_LEFT_LED_COUNT);   // Initialize for PA8
 8000ca6:	2319      	movs	r3, #25
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2300      	movs	r3, #0
 8000cac:	2224      	movs	r2, #36	@ 0x24
 8000cae:	491c      	ldr	r1, [pc, #112]	@ (8000d20 <main+0x9c>)
 8000cb0:	481c      	ldr	r0, [pc, #112]	@ (8000d24 <main+0xa0>)
 8000cb2:	f004 fcf1 	bl	8005698 <WS28XX_Init>
  WS28XX_Init(&ws_pa9, &htim1, 36, TIM_CHANNEL_2, WS28XX_MIDDLE_LED_COUNT); // Initialize for PA9 (middle strip)
 8000cb6:	2396      	movs	r3, #150	@ 0x96
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	2304      	movs	r3, #4
 8000cbc:	2224      	movs	r2, #36	@ 0x24
 8000cbe:	4918      	ldr	r1, [pc, #96]	@ (8000d20 <main+0x9c>)
 8000cc0:	4819      	ldr	r0, [pc, #100]	@ (8000d28 <main+0xa4>)
 8000cc2:	f004 fce9 	bl	8005698 <WS28XX_Init>
  WS28XX_Init(&ws_pa10, &htim1, 36, TIM_CHANNEL_3, WS28XX_RIGHT_LED_COUNT); // Initialize for PA10
 8000cc6:	2319      	movs	r3, #25
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2308      	movs	r3, #8
 8000ccc:	2224      	movs	r2, #36	@ 0x24
 8000cce:	4914      	ldr	r1, [pc, #80]	@ (8000d20 <main+0x9c>)
 8000cd0:	4816      	ldr	r0, [pc, #88]	@ (8000d2c <main+0xa8>)
 8000cd2:	f004 fce1 	bl	8005698 <WS28XX_Init>
  SetGPIOHigh(GPIOA, GPIO_PIN_0);  //  Horn Off
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4815      	ldr	r0, [pc, #84]	@ (8000d30 <main+0xac>)
 8000cda:	f000 fdd5 	bl	8001888 <SetGPIOHigh>
  SetGPIOHigh(GPIOA, GPIO_PIN_1);  //  Head Lamp off
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4813      	ldr	r0, [pc, #76]	@ (8000d30 <main+0xac>)
 8000ce2:	f000 fdd1 	bl	8001888 <SetGPIOHigh>
  SetGPIOHigh(GPIOA, GPIO_PIN_6);  //  in Low Beam Mode
 8000ce6:	2140      	movs	r1, #64	@ 0x40
 8000ce8:	4811      	ldr	r0, [pc, #68]	@ (8000d30 <main+0xac>)
 8000cea:	f000 fdcd 	bl	8001888 <SetGPIOHigh>
  Init_InputPins();
 8000cee:	f001 f8b9 	bl	8001e64 <Init_InputPins>
       // UART_ReceiveAndProcess();

	// ========================
	// Handle Inputs and Update Flags
	// ========================
	readBrakeSwitch();
 8000cf2:	f001 f90b 	bl	8001f0c <readBrakeSwitch>
	readSteeringControls();
 8000cf6:	f000 fe4b 	bl	8001990 <readSteeringControls>
	readHorn();
 8000cfa:	f001 f927 	bl	8001f4c <readHorn>
	readReverseGear();
 8000cfe:	f001 f943 	bl	8001f88 <readReverseGear>

	#ifdef TEST_MODE
	    Handle_TestMode();  // Call the test mode handler
 8000d02:	f001 f9a3 	bl	800204c <Handle_TestMode>
	#endif
	// ========================
	// Handle State Machines
	// ========================
	  HandleMiddleStripState();
 8000d06:	f000 f8b1 	bl	8000e6c <HandleMiddleStripState>
	  HandleLeftStripState();
 8000d0a:	f000 f90d 	bl	8000f28 <HandleLeftStripState>
	  HandleRightStripState();
 8000d0e:	f000 f9a5 	bl	800105c <HandleRightStripState>
	  HandleHornState();
 8000d12:	f000 fdd9 	bl	80018c8 <HandleHornState>
	  HandleHeadlampState();
 8000d16:	f000 fdfb 	bl	8001910 <HandleHeadlampState>
	readBrakeSwitch();
 8000d1a:	bf00      	nop
 8000d1c:	e7e9      	b.n	8000cf2 <main+0x6e>
 8000d1e:	bf00      	nop
 8000d20:	20003414 	.word	0x20003414
 8000d24:	20000068 	.word	0x20000068
 8000d28:	20001174 	.word	0x20001174
 8000d2c:	20002280 	.word	0x20002280
 8000d30:	40010800 	.word	0x40010800

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b094      	sub	sp, #80	@ 0x50
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d3e:	2228      	movs	r2, #40	@ 0x28
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f004 ff1f 	bl	8005b86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d64:	2302      	movs	r3, #2
 8000d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d70:	2302      	movs	r3, #2
 8000d72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d74:	2300      	movs	r3, #0
 8000d76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d78:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 fe1a 	bl	80039bc <HAL_RCC_OscConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000d8e:	f001 f9d5 	bl	800213c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d92:	230f      	movs	r3, #15
 8000d94:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	2101      	movs	r1, #1
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 f887 	bl	8003ec0 <HAL_RCC_ClockConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000db8:	f001 f9c0 	bl	800213c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000dc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dc4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 f9f3 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000dd4:	f001 f9b2 	bl	800213c <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3750      	adds	r7, #80	@ 0x50
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <GPIO_Init_PA0_PA1_PA6>:

/* USER CODE BEGIN 4 */
void GPIO_Init_PA0_PA1_PA6(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (assuming it's AHB1 on your microcontroller)
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // Enable clock for GPIOA
 8000de4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <GPIO_Init_PA0_PA1_PA6+0x84>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e64 <GPIO_Init_PA0_PA1_PA6+0x84>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]

    // Configure PA0, PA1, PA6 as output, push-pull, high-speed

    // PA0 Configuration
    GPIOA->CRL &= ~GPIO_CRL_CNF0;   // Clear CNF0[1:0] (set as push-pull)
 8000df0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000df6:	f023 030c 	bic.w	r3, r3, #12
 8000dfa:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_MODE0_1 | GPIO_CRL_MODE0_0;  // Set MODE0 to 11 (high-speed output 50 MHz)
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a19      	ldr	r2, [pc, #100]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e02:	f043 0303 	orr.w	r3, r3, #3
 8000e06:	6013      	str	r3, [r2, #0]

    // PA1 Configuration
    GPIOA->CRL &= ~GPIO_CRL_CNF1;   // Clear CNF1[1:0] (set as push-pull)
 8000e08:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a16      	ldr	r2, [pc, #88]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e0e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000e12:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_MODE1_1 | GPIO_CRL_MODE1_0;  // Set MODE1 to 11 (high-speed output 50 MHz)
 8000e14:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a13      	ldr	r2, [pc, #76]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e1a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000e1e:	6013      	str	r3, [r2, #0]

    // PA6 Configuration
    GPIOA->CRL &= ~GPIO_CRL_CNF6;   // Clear CNF6[1:0] (set as push-pull)
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e26:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000e2a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_MODE6_1 | GPIO_CRL_MODE6_0;  // Set MODE6 to 11 (high-speed output 50 MHz)
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e32:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8000e36:	6013      	str	r3, [r2, #0]

    // Set PA0, PA1, PA6 initially to high (deactivate relays)
    GPIOA->ODR |= GPIO_ODR_ODR0;  // Set PA0 high
 8000e38:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	60d3      	str	r3, [r2, #12]
    GPIOA->ODR |= GPIO_ODR_ODR1;  // Set PA1 high
 8000e44:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	4a07      	ldr	r2, [pc, #28]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	60d3      	str	r3, [r2, #12]
    GPIOA->ODR |= GPIO_ODR_ODR6;  // Set PA6 high
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010800 	.word	0x40010800

08000e6c <HandleMiddleStripState>:

void HandleMiddleStripState(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	// Adjusted priority code for setting current_mode_pa9
	if (charging_signal_received) {
 8000e70:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <HandleMiddleStripState+0xa0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <HandleMiddleStripState+0x14>
	    current_mode_pa9 = CHARGING_MODE;  // Highest priority: Charging mode
 8000e78:	4b25      	ldr	r3, [pc, #148]	@ (8000f10 <HandleMiddleStripState+0xa4>)
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	e012      	b.n	8000ea6 <HandleMiddleStripState+0x3a>
	} else if (drl_signal_received) {
 8000e80:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <HandleMiddleStripState+0xa8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HandleMiddleStripState+0x24>
	    current_mode_pa9 = DRL_MODE;       // Next priority: DRL mode if charging is inactive
 8000e88:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <HandleMiddleStripState+0xa4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e00a      	b.n	8000ea6 <HandleMiddleStripState+0x3a>
	} else if (breathing_signal_received) {
 8000e90:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <HandleMiddleStripState+0xac>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HandleMiddleStripState+0x34>
	    current_mode_pa9 = BREATHING_MODE; // Next: Breathing mode if no charging or DRL
 8000e98:	4b1d      	ldr	r3, [pc, #116]	@ (8000f10 <HandleMiddleStripState+0xa4>)
 8000e9a:	2205      	movs	r2, #5
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e002      	b.n	8000ea6 <HandleMiddleStripState+0x3a>
	} else {
	    current_mode_pa9 = STARTUP_MODE;   // Default to startup mode if no other signals are active
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <HandleMiddleStripState+0xa4>)
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	701a      	strb	r2, [r3, #0]
	}


    switch (current_mode_pa9) {
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <HandleMiddleStripState+0xa4>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b05      	cmp	r3, #5
 8000eac:	d82b      	bhi.n	8000f06 <HandleMiddleStripState+0x9a>
 8000eae:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb4 <HandleMiddleStripState+0x48>)
 8000eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb4:	08000ee3 	.word	0x08000ee3
 8000eb8:	08000f07 	.word	0x08000f07
 8000ebc:	08000f07 	.word	0x08000f07
 8000ec0:	08000ef9 	.word	0x08000ef9
 8000ec4:	08000ecd 	.word	0x08000ecd
 8000ec8:	08000eef 	.word	0x08000eef
        case CHARGING_MODE:
            UpdateSOCIndication(&ws_pa9, soc_percentage, DC_CHARGING);
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <HandleMiddleStripState+0xb0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4812      	ldr	r0, [pc, #72]	@ (8000f20 <HandleMiddleStripState+0xb4>)
 8000ed6:	f000 fbd3 	bl	8001680 <UpdateSOCIndication>
            is_drl_displayed_pa9 = 0;
 8000eda:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HandleMiddleStripState+0xb8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
            break;
 8000ee0:	e012      	b.n	8000f08 <HandleMiddleStripState+0x9c>
        case DRL_MODE:
            UpdateDRLMode(&ws_pa9, WS28XX_MIDDLE_LED_COUNT, &is_drl_displayed_pa9);
 8000ee2:	4a10      	ldr	r2, [pc, #64]	@ (8000f24 <HandleMiddleStripState+0xb8>)
 8000ee4:	2196      	movs	r1, #150	@ 0x96
 8000ee6:	480e      	ldr	r0, [pc, #56]	@ (8000f20 <HandleMiddleStripState+0xb4>)
 8000ee8:	f000 f986 	bl	80011f8 <UpdateDRLMode>
            break;
 8000eec:	e00c      	b.n	8000f08 <HandleMiddleStripState+0x9c>
        case BREATHING_MODE:
            BreathingEffect(&ws_pa9, BREATHING_DURATION);  // Custom breathing color
 8000eee:	2101      	movs	r1, #1
 8000ef0:	480b      	ldr	r0, [pc, #44]	@ (8000f20 <HandleMiddleStripState+0xb4>)
 8000ef2:	f000 fb67 	bl	80015c4 <BreathingEffect>
            break;
 8000ef6:	e007      	b.n	8000f08 <HandleMiddleStripState+0x9c>
        case STARTUP_MODE:
            UpdateStartupWaveForMiddle(&ws_pa9);
 8000ef8:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <HandleMiddleStripState+0xb4>)
 8000efa:	f000 fa1b 	bl	8001334 <UpdateStartupWaveForMiddle>
            is_drl_displayed_pa9 = 0;
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <HandleMiddleStripState+0xb8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
            break;
 8000f04:	e000      	b.n	8000f08 <HandleMiddleStripState+0x9c>
        default:
            break;
 8000f06:	bf00      	nop
    }
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200033a8 	.word	0x200033a8
 8000f10:	2000338d 	.word	0x2000338d
 8000f14:	200033ac 	.word	0x200033ac
 8000f18:	200033c8 	.word	0x200033c8
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20001174 	.word	0x20001174
 8000f24:	200033a4 	.word	0x200033a4

08000f28 <HandleLeftStripState>:

void HandleLeftStripState(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    // Priority management for left strip
    if (charging_signal_received) {
 8000f2c:	4b43      	ldr	r3, [pc, #268]	@ (800103c <HandleLeftStripState+0x114>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00b      	beq.n	8000f4c <HandleLeftStripState+0x24>
        // Check for hazard mode during charging mode
        if (hazard_signal_received) {
 8000f34:	4b42      	ldr	r3, [pc, #264]	@ (8001040 <HandleLeftStripState+0x118>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HandleLeftStripState+0x1c>
            current_mode_pa8 = HAZARD_LIGHT_MODE;
 8000f3c:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <HandleLeftStripState+0x11c>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e02a      	b.n	8000f9a <HandleLeftStripState+0x72>
        } else {
            current_mode_pa8 = CHARGING_MODE;  // Side strips off in charging mode unless hazard is active
 8000f44:	4b3f      	ldr	r3, [pc, #252]	@ (8001044 <HandleLeftStripState+0x11c>)
 8000f46:	2204      	movs	r2, #4
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e026      	b.n	8000f9a <HandleLeftStripState+0x72>
        }
    }
    else if (hazard_signal_received) {
 8000f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001040 <HandleLeftStripState+0x118>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HandleLeftStripState+0x34>
        current_mode_pa8 = HAZARD_LIGHT_MODE;
 8000f54:	4b3b      	ldr	r3, [pc, #236]	@ (8001044 <HandleLeftStripState+0x11c>)
 8000f56:	2202      	movs	r2, #2
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	e01e      	b.n	8000f9a <HandleLeftStripState+0x72>
    }
    else if (turn_signal_left_received && !hazard_signal_received) {
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001048 <HandleLeftStripState+0x120>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d007      	beq.n	8000f74 <HandleLeftStripState+0x4c>
 8000f64:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <HandleLeftStripState+0x118>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d103      	bne.n	8000f74 <HandleLeftStripState+0x4c>
        current_mode_pa8 = TURN_SIGNAL_MODE;
 8000f6c:	4b35      	ldr	r3, [pc, #212]	@ (8001044 <HandleLeftStripState+0x11c>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	e012      	b.n	8000f9a <HandleLeftStripState+0x72>
    }
    else if (drl_signal_received && !hazard_signal_received && !turn_signal_left_received) {
 8000f74:	4b35      	ldr	r3, [pc, #212]	@ (800104c <HandleLeftStripState+0x124>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00b      	beq.n	8000f94 <HandleLeftStripState+0x6c>
 8000f7c:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <HandleLeftStripState+0x118>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d107      	bne.n	8000f94 <HandleLeftStripState+0x6c>
 8000f84:	4b30      	ldr	r3, [pc, #192]	@ (8001048 <HandleLeftStripState+0x120>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d103      	bne.n	8000f94 <HandleLeftStripState+0x6c>
        current_mode_pa8 = DRL_MODE;
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <HandleLeftStripState+0x11c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e002      	b.n	8000f9a <HandleLeftStripState+0x72>
    }
    else {
        current_mode_pa8 = DRL_MODE;
 8000f94:	4b2b      	ldr	r3, [pc, #172]	@ (8001044 <HandleLeftStripState+0x11c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
    }

    // State machine for left strip (PA8)
    switch (current_mode_pa8) {
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <HandleLeftStripState+0x11c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d845      	bhi.n	800102e <HandleLeftStripState+0x106>
 8000fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa8 <HandleLeftStripState+0x80>)
 8000fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa8:	0800101d 	.word	0x0800101d
 8000fac:	08000fe9 	.word	0x08000fe9
 8000fb0:	08000fcd 	.word	0x08000fcd
 8000fb4:	0800102f 	.word	0x0800102f
 8000fb8:	08000fbd 	.word	0x08000fbd
        case CHARGING_MODE:
            ResetLEDStrip(&ws_pa8, WS28XX_LEFT_LED_COUNT);  // Turn off left strip in charging mode
 8000fbc:	2119      	movs	r1, #25
 8000fbe:	4824      	ldr	r0, [pc, #144]	@ (8001050 <HandleLeftStripState+0x128>)
 8000fc0:	f000 f99a 	bl	80012f8 <ResetLEDStrip>
            is_drl_displayed_pa8 = 0;  // Reset DRL flag
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <HandleLeftStripState+0x12c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
            break;
 8000fca:	e034      	b.n	8001036 <HandleLeftStripState+0x10e>

        case HAZARD_LIGHT_MODE:
            frame_pa8 = 0;
 8000fcc:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <HandleLeftStripState+0x130>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
            UpdateHazardBlink(WS28XX_LEFT_LED_COUNT);
 8000fd2:	2019      	movs	r0, #25
 8000fd4:	f000 f944 	bl	8001260 <UpdateHazardBlink>
            HAL_Delay(HAZARD_BLINK_DELAY);
 8000fd8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fdc:	f001 fb4a 	bl	8002674 <HAL_Delay>
            is_drl_displayed_pa8 = 0;  // Reset DRL flag
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <HandleLeftStripState+0x12c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
            break;
 8000fe6:	e026      	b.n	8001036 <HandleLeftStripState+0x10e>

        case TURN_SIGNAL_MODE:
            UpdateWaveEffect(&ws_pa8, frame_pa8, WS28XX_LEFT_LED_COUNT);
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <HandleLeftStripState+0x130>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2219      	movs	r2, #25
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4817      	ldr	r0, [pc, #92]	@ (8001050 <HandleLeftStripState+0x128>)
 8000ff2:	f000 f8cd 	bl	8001190 <UpdateWaveEffect>
            frame_pa8 += WAVE_STEP_SIZE;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HandleLeftStripState+0x130>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a16      	ldr	r2, [pc, #88]	@ (8001058 <HandleLeftStripState+0x130>)
 8000ffe:	6013      	str	r3, [r2, #0]
            if (frame_pa8 >= WS28XX_LEFT_LED_COUNT) frame_pa8 = 0;
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <HandleLeftStripState+0x130>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b18      	cmp	r3, #24
 8001006:	dd02      	ble.n	800100e <HandleLeftStripState+0xe6>
 8001008:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <HandleLeftStripState+0x130>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
            HAL_Delay(WAVE_SPEED);
 800100e:	2005      	movs	r0, #5
 8001010:	f001 fb30 	bl	8002674 <HAL_Delay>
            is_drl_displayed_pa8 = 0;  // Reset DRL flag
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HandleLeftStripState+0x12c>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
            break;
 800101a:	e00c      	b.n	8001036 <HandleLeftStripState+0x10e>

        case DRL_MODE:
            frame_pa8 = 0;
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HandleLeftStripState+0x130>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
            UpdateDRLMode(&ws_pa8, WS28XX_LEFT_LED_COUNT, &is_drl_displayed_pa8);
 8001022:	4a0c      	ldr	r2, [pc, #48]	@ (8001054 <HandleLeftStripState+0x12c>)
 8001024:	2119      	movs	r1, #25
 8001026:	480a      	ldr	r0, [pc, #40]	@ (8001050 <HandleLeftStripState+0x128>)
 8001028:	f000 f8e6 	bl	80011f8 <UpdateDRLMode>
            break;
 800102c:	e003      	b.n	8001036 <HandleLeftStripState+0x10e>

        default:
            current_mode_pa8 = DRL_MODE;
 800102e:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HandleLeftStripState+0x11c>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
            break;
 8001034:	bf00      	nop
    }
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200033a8 	.word	0x200033a8
 8001040:	200033b0 	.word	0x200033b0
 8001044:	2000338c 	.word	0x2000338c
 8001048:	200033b4 	.word	0x200033b4
 800104c:	200033ac 	.word	0x200033ac
 8001050:	20000068 	.word	0x20000068
 8001054:	2000339c 	.word	0x2000339c
 8001058:	20003394 	.word	0x20003394

0800105c <HandleRightStripState>:

void HandleRightStripState(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    // Priority management for right strip
    if (charging_signal_received) {
 8001060:	4b43      	ldr	r3, [pc, #268]	@ (8001170 <HandleRightStripState+0x114>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00b      	beq.n	8001080 <HandleRightStripState+0x24>
        // Check for hazard mode during charging mode
        if (hazard_signal_received) {
 8001068:	4b42      	ldr	r3, [pc, #264]	@ (8001174 <HandleRightStripState+0x118>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HandleRightStripState+0x1c>
            current_mode_pa10 = HAZARD_LIGHT_MODE;
 8001070:	4b41      	ldr	r3, [pc, #260]	@ (8001178 <HandleRightStripState+0x11c>)
 8001072:	2202      	movs	r2, #2
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e02a      	b.n	80010ce <HandleRightStripState+0x72>
        } else {
            current_mode_pa10 = CHARGING_MODE;  // Side strips off in charging mode unless hazard is active
 8001078:	4b3f      	ldr	r3, [pc, #252]	@ (8001178 <HandleRightStripState+0x11c>)
 800107a:	2204      	movs	r2, #4
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e026      	b.n	80010ce <HandleRightStripState+0x72>
        }
    }
    else if (hazard_signal_received) {
 8001080:	4b3c      	ldr	r3, [pc, #240]	@ (8001174 <HandleRightStripState+0x118>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HandleRightStripState+0x34>
        current_mode_pa10 = HAZARD_LIGHT_MODE;
 8001088:	4b3b      	ldr	r3, [pc, #236]	@ (8001178 <HandleRightStripState+0x11c>)
 800108a:	2202      	movs	r2, #2
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	e01e      	b.n	80010ce <HandleRightStripState+0x72>
    }
    else if (turn_signal_right_received && !hazard_signal_received) {
 8001090:	4b3a      	ldr	r3, [pc, #232]	@ (800117c <HandleRightStripState+0x120>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d007      	beq.n	80010a8 <HandleRightStripState+0x4c>
 8001098:	4b36      	ldr	r3, [pc, #216]	@ (8001174 <HandleRightStripState+0x118>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <HandleRightStripState+0x4c>
        current_mode_pa10 = TURN_SIGNAL_MODE;
 80010a0:	4b35      	ldr	r3, [pc, #212]	@ (8001178 <HandleRightStripState+0x11c>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e012      	b.n	80010ce <HandleRightStripState+0x72>
    }
    else if (drl_signal_received && !hazard_signal_received && !turn_signal_right_received) {
 80010a8:	4b35      	ldr	r3, [pc, #212]	@ (8001180 <HandleRightStripState+0x124>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00b      	beq.n	80010c8 <HandleRightStripState+0x6c>
 80010b0:	4b30      	ldr	r3, [pc, #192]	@ (8001174 <HandleRightStripState+0x118>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d107      	bne.n	80010c8 <HandleRightStripState+0x6c>
 80010b8:	4b30      	ldr	r3, [pc, #192]	@ (800117c <HandleRightStripState+0x120>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d103      	bne.n	80010c8 <HandleRightStripState+0x6c>
        current_mode_pa10 = DRL_MODE;
 80010c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001178 <HandleRightStripState+0x11c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e002      	b.n	80010ce <HandleRightStripState+0x72>
    }
    else {
        current_mode_pa10 = DRL_MODE;
 80010c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <HandleRightStripState+0x11c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
    }

    // State machine for right strip (PA10)
    switch (current_mode_pa10) {
 80010ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001178 <HandleRightStripState+0x11c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d845      	bhi.n	8001162 <HandleRightStripState+0x106>
 80010d6:	a201      	add	r2, pc, #4	@ (adr r2, 80010dc <HandleRightStripState+0x80>)
 80010d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010dc:	08001151 	.word	0x08001151
 80010e0:	0800111d 	.word	0x0800111d
 80010e4:	08001101 	.word	0x08001101
 80010e8:	08001163 	.word	0x08001163
 80010ec:	080010f1 	.word	0x080010f1
        case CHARGING_MODE:
            ResetLEDStrip(&ws_pa10, WS28XX_RIGHT_LED_COUNT);  // Turn off right strip in charging mode
 80010f0:	2119      	movs	r1, #25
 80010f2:	4824      	ldr	r0, [pc, #144]	@ (8001184 <HandleRightStripState+0x128>)
 80010f4:	f000 f900 	bl	80012f8 <ResetLEDStrip>
            is_drl_displayed_pa10 = 0;  // Reset DRL flag
 80010f8:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <HandleRightStripState+0x12c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
            break;
 80010fe:	e034      	b.n	800116a <HandleRightStripState+0x10e>

        case HAZARD_LIGHT_MODE:
            frame_pa10 = 0;
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <HandleRightStripState+0x130>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
            UpdateHazardBlink(WS28XX_RIGHT_LED_COUNT);
 8001106:	2019      	movs	r0, #25
 8001108:	f000 f8aa 	bl	8001260 <UpdateHazardBlink>
            HAL_Delay(HAZARD_BLINK_DELAY);
 800110c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001110:	f001 fab0 	bl	8002674 <HAL_Delay>
            is_drl_displayed_pa10 = 0;
 8001114:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <HandleRightStripState+0x12c>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
            break;
 800111a:	e026      	b.n	800116a <HandleRightStripState+0x10e>

        case TURN_SIGNAL_MODE:
            UpdateWaveEffect(&ws_pa10, frame_pa10, WS28XX_RIGHT_LED_COUNT);
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <HandleRightStripState+0x130>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2219      	movs	r2, #25
 8001122:	4619      	mov	r1, r3
 8001124:	4817      	ldr	r0, [pc, #92]	@ (8001184 <HandleRightStripState+0x128>)
 8001126:	f000 f833 	bl	8001190 <UpdateWaveEffect>
            frame_pa10 += WAVE_STEP_SIZE;
 800112a:	4b18      	ldr	r3, [pc, #96]	@ (800118c <HandleRightStripState+0x130>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	4a16      	ldr	r2, [pc, #88]	@ (800118c <HandleRightStripState+0x130>)
 8001132:	6013      	str	r3, [r2, #0]
            if (frame_pa10 >= WS28XX_RIGHT_LED_COUNT) frame_pa10 = 0;
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HandleRightStripState+0x130>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b18      	cmp	r3, #24
 800113a:	dd02      	ble.n	8001142 <HandleRightStripState+0xe6>
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <HandleRightStripState+0x130>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
            HAL_Delay(WAVE_SPEED);
 8001142:	2005      	movs	r0, #5
 8001144:	f001 fa96 	bl	8002674 <HAL_Delay>
            is_drl_displayed_pa10 = 0;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HandleRightStripState+0x12c>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
            break;
 800114e:	e00c      	b.n	800116a <HandleRightStripState+0x10e>

        case DRL_MODE:
            frame_pa10 = 0;
 8001150:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <HandleRightStripState+0x130>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
            UpdateDRLMode(&ws_pa10, WS28XX_RIGHT_LED_COUNT, &is_drl_displayed_pa10);
 8001156:	4a0c      	ldr	r2, [pc, #48]	@ (8001188 <HandleRightStripState+0x12c>)
 8001158:	2119      	movs	r1, #25
 800115a:	480a      	ldr	r0, [pc, #40]	@ (8001184 <HandleRightStripState+0x128>)
 800115c:	f000 f84c 	bl	80011f8 <UpdateDRLMode>
            break;
 8001160:	e003      	b.n	800116a <HandleRightStripState+0x10e>

        default:
            current_mode_pa10 = DRL_MODE;
 8001162:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HandleRightStripState+0x11c>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
            break;
 8001168:	bf00      	nop
    }
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200033a8 	.word	0x200033a8
 8001174:	200033b0 	.word	0x200033b0
 8001178:	2000338e 	.word	0x2000338e
 800117c:	200033b8 	.word	0x200033b8
 8001180:	200033ac 	.word	0x200033ac
 8001184:	20002280 	.word	0x20002280
 8001188:	200033a0 	.word	0x200033a0
 800118c:	20003398 	.word	0x20003398

08001190 <UpdateWaveEffect>:

void UpdateWaveEffect(WS28XX_HandleTypeDef* ws, int frame, int pixel_count)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
    ResetLEDStrip(ws, pixel_count);
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 f8aa 	bl	80012f8 <ResetLEDStrip>
    for (int i = 0; i < pixel_count; i++) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	e01b      	b.n	80011e2 <UpdateWaveEffect+0x52>
        if (i >= frame && i < frame + WAVE_PACKET_SIZE) {
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	db0d      	blt.n	80011ce <UpdateWaveEffect+0x3e>
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3306      	adds	r3, #6
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dc08      	bgt.n	80011ce <UpdateWaveEffect+0x3e>
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_AMBER, 255);
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	b299      	uxth	r1, r3
 80011c0:	23ff      	movs	r3, #255	@ 0xff
 80011c2:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f004 fb94 	bl	80058f4 <WS28XX_SetPixel_RGBW_565>
 80011cc:	e006      	b.n	80011dc <UpdateWaveEffect+0x4c>
        } else {
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_BLACK, 0);
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	b299      	uxth	r1, r3
 80011d2:	2300      	movs	r3, #0
 80011d4:	2200      	movs	r2, #0
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f004 fb8c 	bl	80058f4 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < pixel_count; i++) {
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbdf      	blt.n	80011aa <UpdateWaveEffect+0x1a>
        }
    }
    WS28XX_Update(ws);
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f004 fc58 	bl	8005aa0 <WS28XX_Update>
}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <UpdateDRLMode>:

void UpdateDRLMode(WS28XX_HandleTypeDef* ws, int pixel_count, int* is_drl_displayed)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
    // Check if DRL mode is already displayed
    if (*is_drl_displayed) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d123      	bne.n	8001254 <UpdateDRLMode+0x5c>
        return;  // Avoid redundant refreshes (to prevent flickering)
    }

    // Reset the LED strip and update to DRL mode
    ResetLEDStrip(ws, pixel_count);
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f000 f872 	bl	80012f8 <ResetLEDStrip>

    for (int i = 0; i < pixel_count; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e00a      	b.n	8001230 <UpdateDRLMode+0x38>
        WS28XX_SetPixel_RGB_888(ws, i, COLOR_RGB888_WHITE);  // Set all LEDs to full white
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	b29b      	uxth	r3, r3
 800121e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001222:	4619      	mov	r1, r3
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f004 fb1f 	bl	8005868 <WS28XX_SetPixel_RGB_888>
    for (int i = 0; i < pixel_count; i++) {
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3301      	adds	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbf0      	blt.n	800121a <UpdateDRLMode+0x22>
    }

    WS28XX_Update(ws);  // Refresh the strip with the new DRL state
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f004 fc31 	bl	8005aa0 <WS28XX_Update>
    HAL_Delay(6);
 800123e:	2006      	movs	r0, #6
 8001240:	f001 fa18 	bl	8002674 <HAL_Delay>
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8001244:	2104      	movs	r1, #4
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <UpdateDRLMode+0x64>)
 8001248:	f003 fb6a 	bl	8004920 <HAL_TIM_PWM_Stop_DMA>

    // Mark DRL as displayed
    *is_drl_displayed = 1;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e000      	b.n	8001256 <UpdateDRLMode+0x5e>
        return;  // Avoid redundant refreshes (to prevent flickering)
 8001254:	bf00      	nop
}
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20003414 	.word	0x20003414

08001260 <UpdateHazardBlink>:

void UpdateHazardBlink(int led_count)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
    static int blink_on = 0;  // Track blink state (on/off)

    for (int i = 0; i < led_count; i++) {
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e025      	b.n	80012ba <UpdateHazardBlink+0x5a>
        if (blink_on) {
 800126e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <UpdateHazardBlink+0x8c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d010      	beq.n	8001298 <UpdateHazardBlink+0x38>
        	WS28XX_SetPixel_RGB_565(&ws_pa10, i, COLOR_RGB565_AMBER); // Amber on for right strip
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	b29b      	uxth	r3, r3
 800127a:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 800127e:	4619      	mov	r1, r3
 8001280:	481b      	ldr	r0, [pc, #108]	@ (80012f0 <UpdateHazardBlink+0x90>)
 8001282:	f004 faa1 	bl	80057c8 <WS28XX_SetPixel_RGB_565>
            WS28XX_SetPixel_RGB_565(&ws_pa8, i, COLOR_RGB565_AMBER);  // Amber on for left strip
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	b29b      	uxth	r3, r3
 800128a:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 800128e:	4619      	mov	r1, r3
 8001290:	4818      	ldr	r0, [pc, #96]	@ (80012f4 <UpdateHazardBlink+0x94>)
 8001292:	f004 fa99 	bl	80057c8 <WS28XX_SetPixel_RGB_565>
 8001296:	e00d      	b.n	80012b4 <UpdateHazardBlink+0x54>
        } else {
            WS28XX_SetPixel_RGB_565(&ws_pa8, i, COLOR_RGB565_BLACK);    // Off for left strip
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	b29b      	uxth	r3, r3
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	4814      	ldr	r0, [pc, #80]	@ (80012f4 <UpdateHazardBlink+0x94>)
 80012a2:	f004 fa91 	bl	80057c8 <WS28XX_SetPixel_RGB_565>
            WS28XX_SetPixel_RGB_565(&ws_pa10, i, COLOR_RGB565_BLACK);   // Off for right strip
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	4810      	ldr	r0, [pc, #64]	@ (80012f0 <UpdateHazardBlink+0x90>)
 80012b0:	f004 fa8a 	bl	80057c8 <WS28XX_SetPixel_RGB_565>
    for (int i = 0; i < led_count; i++) {
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3301      	adds	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dbd5      	blt.n	800126e <UpdateHazardBlink+0xe>
        }
    }
    blink_on = !blink_on;
 80012c2:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <UpdateHazardBlink+0x8c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bf0c      	ite	eq
 80012ca:	2301      	moveq	r3, #1
 80012cc:	2300      	movne	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <UpdateHazardBlink+0x8c>)
 80012d4:	601a      	str	r2, [r3, #0]
    WS28XX_Update(&ws_pa8);
 80012d6:	4807      	ldr	r0, [pc, #28]	@ (80012f4 <UpdateHazardBlink+0x94>)
 80012d8:	f004 fbe2 	bl	8005aa0 <WS28XX_Update>
    WS28XX_Update(&ws_pa10);
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <UpdateHazardBlink+0x90>)
 80012de:	f004 fbdf 	bl	8005aa0 <WS28XX_Update>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200033e0 	.word	0x200033e0
 80012f0:	20002280 	.word	0x20002280
 80012f4:	20000068 	.word	0x20000068

080012f8 <ResetLEDStrip>:

void ResetLEDStrip(WS28XX_HandleTypeDef* ws, int pixel_count)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < pixel_count; i++) {
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	e009      	b.n	800131c <ResetLEDStrip+0x24>
        WS28XX_SetPixel_RGBW_888(ws, i, COLOR_RGB888_BLACK, 0);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	b299      	uxth	r1, r3
 800130c:	2300      	movs	r3, #0
 800130e:	2200      	movs	r2, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f004 fb63 	bl	80059dc <WS28XX_SetPixel_RGBW_888>
    for (int i = 0; i < pixel_count; i++) {
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf1      	blt.n	8001308 <ResetLEDStrip+0x10>
    }
    WS28XX_Update(ws);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f004 fbbb 	bl	8005aa0 <WS28XX_Update>
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <UpdateStartupWaveForMiddle>:

void UpdateStartupWaveForMiddle(WS28XX_HandleTypeDef* ws)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    static int frame_right = MIDDLE_LED_MID_INDEX;  // Start from the middle (right side)
    static uint8_t wave_direction = 0;              // 0 = outward, 1 = inward
    static int last_update_time = 0;                // To control update speed and reduce flickering
    static int drl_wave_complete_middle = 0;        // To indicate when DRL transition is complete
    static int sequential_turn_on = 0;              // Counter for sequential turn-on after waves
    int current_time = HAL_GetTick();               // Get the current system time in milliseconds
 800133c:	f001 f990 	bl	8002660 <HAL_GetTick>
 8001340:	4603      	mov	r3, r0
 8001342:	60bb      	str	r3, [r7, #8]

    // Phase 1: Wave Animation (Two full passes: outward and inward)
    if (wave_count_middle < 2) {
 8001344:	4b96      	ldr	r3, [pc, #600]	@ (80015a0 <UpdateStartupWaveForMiddle+0x26c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	f300 80c3 	bgt.w	80014d4 <UpdateStartupWaveForMiddle+0x1a0>
        if (current_time - last_update_time >= STARTUP_WAVE_SPEED) {
 800134e:	4b95      	ldr	r3, [pc, #596]	@ (80015a4 <UpdateStartupWaveForMiddle+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	f340 811e 	ble.w	8001598 <UpdateStartupWaveForMiddle+0x264>
            // Outward wave animation
            if (wave_direction == 0) {
 800135c:	4b92      	ldr	r3, [pc, #584]	@ (80015a8 <UpdateStartupWaveForMiddle+0x274>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d152      	bne.n	800140a <UpdateStartupWaveForMiddle+0xd6>
                ResetLEDStrip(ws, WS28XX_MIDDLE_LED_COUNT);  // Clear LEDs for next wave update
 8001364:	2196      	movs	r1, #150	@ 0x96
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffc6 	bl	80012f8 <ResetLEDStrip>
                for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e028      	b.n	80013c4 <UpdateStartupWaveForMiddle+0x90>
                    if (frame_left - i >= 0) {
 8001372:	4b8e      	ldr	r3, [pc, #568]	@ (80015ac <UpdateStartupWaveForMiddle+0x278>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0c      	blt.n	8001398 <UpdateStartupWaveForMiddle+0x64>
                        WS28XX_SetPixel_RGBW_888(ws, frame_left - i, COLOR_RGB888_WHITE, DRL_BRIGHTNESS);  // Set white color with RGB 888
 800137e:	4b8b      	ldr	r3, [pc, #556]	@ (80015ac <UpdateStartupWaveForMiddle+0x278>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b29a      	uxth	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	b29b      	uxth	r3, r3
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b299      	uxth	r1, r3
 800138c:	23ff      	movs	r3, #255	@ 0xff
 800138e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f004 fb22 	bl	80059dc <WS28XX_SetPixel_RGBW_888>
                    }
                    if (frame_right + i < WS28XX_MIDDLE_LED_COUNT) {
 8001398:	4b85      	ldr	r3, [pc, #532]	@ (80015b0 <UpdateStartupWaveForMiddle+0x27c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	4413      	add	r3, r2
 80013a0:	2b95      	cmp	r3, #149	@ 0x95
 80013a2:	dc0c      	bgt.n	80013be <UpdateStartupWaveForMiddle+0x8a>
                        WS28XX_SetPixel_RGBW_888(ws, frame_right + i, COLOR_RGB888_WHITE, DRL_BRIGHTNESS);  // Set white color with RGB 888
 80013a4:	4b82      	ldr	r3, [pc, #520]	@ (80015b0 <UpdateStartupWaveForMiddle+0x27c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	b299      	uxth	r1, r3
 80013b2:	23ff      	movs	r3, #255	@ 0xff
 80013b4:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f004 fb0f 	bl	80059dc <WS28XX_SetPixel_RGBW_888>
                for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	ddd3      	ble.n	8001372 <UpdateStartupWaveForMiddle+0x3e>
                    }
                }
                WS28XX_Update(ws);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f004 fb68 	bl	8005aa0 <WS28XX_Update>
                HAL_Delay(6);
 80013d0:	2006      	movs	r0, #6
 80013d2:	f001 f94f 	bl	8002674 <HAL_Delay>
                HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 80013d6:	2104      	movs	r1, #4
 80013d8:	4876      	ldr	r0, [pc, #472]	@ (80015b4 <UpdateStartupWaveForMiddle+0x280>)
 80013da:	f003 faa1 	bl	8004920 <HAL_TIM_PWM_Stop_DMA>

                frame_left--;
 80013de:	4b73      	ldr	r3, [pc, #460]	@ (80015ac <UpdateStartupWaveForMiddle+0x278>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	4a71      	ldr	r2, [pc, #452]	@ (80015ac <UpdateStartupWaveForMiddle+0x278>)
 80013e6:	6013      	str	r3, [r2, #0]
                frame_right++;
 80013e8:	4b71      	ldr	r3, [pc, #452]	@ (80015b0 <UpdateStartupWaveForMiddle+0x27c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a70      	ldr	r2, [pc, #448]	@ (80015b0 <UpdateStartupWaveForMiddle+0x27c>)
 80013f0:	6013      	str	r3, [r2, #0]

                if (frame_left < 0 && frame_right >= WS28XX_MIDDLE_LED_COUNT) {
 80013f2:	4b6e      	ldr	r3, [pc, #440]	@ (80015ac <UpdateStartupWaveForMiddle+0x278>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	da68      	bge.n	80014cc <UpdateStartupWaveForMiddle+0x198>
 80013fa:	4b6d      	ldr	r3, [pc, #436]	@ (80015b0 <UpdateStartupWaveForMiddle+0x27c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b95      	cmp	r3, #149	@ 0x95
 8001400:	dd64      	ble.n	80014cc <UpdateStartupWaveForMiddle+0x198>
                    wave_direction = 1;  // Switch to inward direction
 8001402:	4b69      	ldr	r3, [pc, #420]	@ (80015a8 <UpdateStartupWaveForMiddle+0x274>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e060      	b.n	80014cc <UpdateStartupWaveForMiddle+0x198>
                }
            }
            // Inward wave animation
            else if (wave_direction == 1) {
 800140a:	4b67      	ldr	r3, [pc, #412]	@ (80015a8 <UpdateStartupWaveForMiddle+0x274>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d15c      	bne.n	80014cc <UpdateStartupWaveForMiddle+0x198>
                ResetLEDStrip(ws, WS28XX_MIDDLE_LED_COUNT);  // Clear LEDs for the next update
 8001412:	2196      	movs	r1, #150	@ 0x96
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff6f 	bl	80012f8 <ResetLEDStrip>
                for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	e028      	b.n	8001472 <UpdateStartupWaveForMiddle+0x13e>
                    if (frame_left + i < MIDDLE_LED_MID_INDEX) {
 8001420:	4b62      	ldr	r3, [pc, #392]	@ (80015ac <UpdateStartupWaveForMiddle+0x278>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4413      	add	r3, r2
 8001428:	2b4a      	cmp	r3, #74	@ 0x4a
 800142a:	dc0c      	bgt.n	8001446 <UpdateStartupWaveForMiddle+0x112>
                        WS28XX_SetPixel_RGBW_888(ws, frame_left + i, COLOR_RGB888_WHITE, DRL_BRIGHTNESS);  // Set white color
 800142c:	4b5f      	ldr	r3, [pc, #380]	@ (80015ac <UpdateStartupWaveForMiddle+0x278>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	b29a      	uxth	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	b29b      	uxth	r3, r3
 8001436:	4413      	add	r3, r2
 8001438:	b299      	uxth	r1, r3
 800143a:	23ff      	movs	r3, #255	@ 0xff
 800143c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f004 facb 	bl	80059dc <WS28XX_SetPixel_RGBW_888>
                    }
                    if (frame_right - i >= MIDDLE_LED_MID_INDEX) {
 8001446:	4b5a      	ldr	r3, [pc, #360]	@ (80015b0 <UpdateStartupWaveForMiddle+0x27c>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b4a      	cmp	r3, #74	@ 0x4a
 8001450:	dd0c      	ble.n	800146c <UpdateStartupWaveForMiddle+0x138>
                        WS28XX_SetPixel_RGBW_888(ws, frame_right - i, COLOR_RGB888_WHITE, DRL_BRIGHTNESS);  // Set white color
 8001452:	4b57      	ldr	r3, [pc, #348]	@ (80015b0 <UpdateStartupWaveForMiddle+0x27c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29a      	uxth	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	b29b      	uxth	r3, r3
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	b299      	uxth	r1, r3
 8001460:	23ff      	movs	r3, #255	@ 0xff
 8001462:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f004 fab8 	bl	80059dc <WS28XX_SetPixel_RGBW_888>
                for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	3301      	adds	r3, #1
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2b03      	cmp	r3, #3
 8001476:	ddd3      	ble.n	8001420 <UpdateStartupWaveForMiddle+0xec>
                    }
                }
                WS28XX_Update(ws);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f004 fb11 	bl	8005aa0 <WS28XX_Update>
                HAL_Delay(6);
 800147e:	2006      	movs	r0, #6
 8001480:	f001 f8f8 	bl	8002674 <HAL_Delay>
                HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8001484:	2104      	movs	r1, #4
 8001486:	484b      	ldr	r0, [pc, #300]	@ (80015b4 <UpdateStartupWaveForMiddle+0x280>)
 8001488:	f003 fa4a 	bl	8004920 <HAL_TIM_PWM_Stop_DMA>

                frame_left++;
 800148c:	4b47      	ldr	r3, [pc, #284]	@ (80015ac <UpdateStartupWaveForMiddle+0x278>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a46      	ldr	r2, [pc, #280]	@ (80015ac <UpdateStartupWaveForMiddle+0x278>)
 8001494:	6013      	str	r3, [r2, #0]
                frame_right--;
 8001496:	4b46      	ldr	r3, [pc, #280]	@ (80015b0 <UpdateStartupWaveForMiddle+0x27c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3b01      	subs	r3, #1
 800149c:	4a44      	ldr	r2, [pc, #272]	@ (80015b0 <UpdateStartupWaveForMiddle+0x27c>)
 800149e:	6013      	str	r3, [r2, #0]

                if (frame_left >= MIDDLE_LED_MID_INDEX && frame_right <= MIDDLE_LED_MID_INDEX) {
 80014a0:	4b42      	ldr	r3, [pc, #264]	@ (80015ac <UpdateStartupWaveForMiddle+0x278>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b4a      	cmp	r3, #74	@ 0x4a
 80014a6:	dd11      	ble.n	80014cc <UpdateStartupWaveForMiddle+0x198>
 80014a8:	4b41      	ldr	r3, [pc, #260]	@ (80015b0 <UpdateStartupWaveForMiddle+0x27c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b4b      	cmp	r3, #75	@ 0x4b
 80014ae:	dc0d      	bgt.n	80014cc <UpdateStartupWaveForMiddle+0x198>
                    frame_left = MIDDLE_LED_MID_INDEX;
 80014b0:	4b3e      	ldr	r3, [pc, #248]	@ (80015ac <UpdateStartupWaveForMiddle+0x278>)
 80014b2:	224b      	movs	r2, #75	@ 0x4b
 80014b4:	601a      	str	r2, [r3, #0]
                    frame_right = MIDDLE_LED_MID_INDEX;
 80014b6:	4b3e      	ldr	r3, [pc, #248]	@ (80015b0 <UpdateStartupWaveForMiddle+0x27c>)
 80014b8:	224b      	movs	r2, #75	@ 0x4b
 80014ba:	601a      	str	r2, [r3, #0]
                    wave_direction = 0;  // Reset to outward
 80014bc:	4b3a      	ldr	r3, [pc, #232]	@ (80015a8 <UpdateStartupWaveForMiddle+0x274>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
                    wave_count_middle++;  // Increment pass count
 80014c2:	4b37      	ldr	r3, [pc, #220]	@ (80015a0 <UpdateStartupWaveForMiddle+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	4a35      	ldr	r2, [pc, #212]	@ (80015a0 <UpdateStartupWaveForMiddle+0x26c>)
 80014ca:	6013      	str	r3, [r2, #0]
                }
            }
            last_update_time = current_time;  // Update time for next wave step
 80014cc:	4a35      	ldr	r2, [pc, #212]	@ (80015a4 <UpdateStartupWaveForMiddle+0x270>)
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	6013      	str	r3, [r2, #0]
        drl_signal_received = 1;  // Signal that DRL mode is active
        wave_count_middle = 0;    // Reset wave count for future sequences
        drl_wave_complete_middle = 0;  // Reset DRL completion flag
        sequential_turn_on = 0;   // Reset sequential turn-on counter
    }
}
 80014d2:	e061      	b.n	8001598 <UpdateStartupWaveForMiddle+0x264>
    } else if (!drl_wave_complete_middle) {
 80014d4:	4b38      	ldr	r3, [pc, #224]	@ (80015b8 <UpdateStartupWaveForMiddle+0x284>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d136      	bne.n	800154a <UpdateStartupWaveForMiddle+0x216>
        if (current_time - last_update_time >= STARTUP_WAVE_SPEED * 2) {  // Slower speed for smooth sequential effect
 80014dc:	4b31      	ldr	r3, [pc, #196]	@ (80015a4 <UpdateStartupWaveForMiddle+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	dd57      	ble.n	8001598 <UpdateStartupWaveForMiddle+0x264>
            WS28XX_SetPixel_RGBW_565(ws, MIDDLE_LED_MID_INDEX - sequential_turn_on, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // White
 80014e8:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <UpdateStartupWaveForMiddle+0x288>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	f1c3 034b 	rsb	r3, r3, #75	@ 0x4b
 80014f2:	b299      	uxth	r1, r3
 80014f4:	23ff      	movs	r3, #255	@ 0xff
 80014f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f004 f9fa 	bl	80058f4 <WS28XX_SetPixel_RGBW_565>
            WS28XX_SetPixel_RGBW_565(ws, MIDDLE_LED_MID_INDEX + sequential_turn_on, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // White
 8001500:	4b2e      	ldr	r3, [pc, #184]	@ (80015bc <UpdateStartupWaveForMiddle+0x288>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	334b      	adds	r3, #75	@ 0x4b
 8001508:	b299      	uxth	r1, r3
 800150a:	23ff      	movs	r3, #255	@ 0xff
 800150c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f004 f9ef 	bl	80058f4 <WS28XX_SetPixel_RGBW_565>
            WS28XX_Update(ws);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f004 fac2 	bl	8005aa0 <WS28XX_Update>
            HAL_Delay(6);
 800151c:	2006      	movs	r0, #6
 800151e:	f001 f8a9 	bl	8002674 <HAL_Delay>
            HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8001522:	2104      	movs	r1, #4
 8001524:	4823      	ldr	r0, [pc, #140]	@ (80015b4 <UpdateStartupWaveForMiddle+0x280>)
 8001526:	f003 f9fb 	bl	8004920 <HAL_TIM_PWM_Stop_DMA>
            sequential_turn_on++;
 800152a:	4b24      	ldr	r3, [pc, #144]	@ (80015bc <UpdateStartupWaveForMiddle+0x288>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	4a22      	ldr	r2, [pc, #136]	@ (80015bc <UpdateStartupWaveForMiddle+0x288>)
 8001532:	6013      	str	r3, [r2, #0]
            if (sequential_turn_on >= MIDDLE_LED_MID_INDEX) {
 8001534:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <UpdateStartupWaveForMiddle+0x288>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b4a      	cmp	r3, #74	@ 0x4a
 800153a:	dd02      	ble.n	8001542 <UpdateStartupWaveForMiddle+0x20e>
                drl_wave_complete_middle = 1;  // Mark sequential turn-on complete
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <UpdateStartupWaveForMiddle+0x284>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]
            last_update_time = current_time;  // Update time for next step
 8001542:	4a18      	ldr	r2, [pc, #96]	@ (80015a4 <UpdateStartupWaveForMiddle+0x270>)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	e026      	b.n	8001598 <UpdateStartupWaveForMiddle+0x264>
        for (int i = 0; i < WS28XX_MIDDLE_LED_COUNT; i++) {
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	e00a      	b.n	8001566 <UpdateStartupWaveForMiddle+0x232>
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Full brightness in DRL mode
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	b299      	uxth	r1, r3
 8001554:	23ff      	movs	r3, #255	@ 0xff
 8001556:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f004 f9ca 	bl	80058f4 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < WS28XX_MIDDLE_LED_COUNT; i++) {
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b95      	cmp	r3, #149	@ 0x95
 800156a:	ddf1      	ble.n	8001550 <UpdateStartupWaveForMiddle+0x21c>
        WS28XX_Update(ws);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f004 fa97 	bl	8005aa0 <WS28XX_Update>
        HAL_Delay(6);
 8001572:	2006      	movs	r0, #6
 8001574:	f001 f87e 	bl	8002674 <HAL_Delay>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8001578:	2104      	movs	r1, #4
 800157a:	480e      	ldr	r0, [pc, #56]	@ (80015b4 <UpdateStartupWaveForMiddle+0x280>)
 800157c:	f003 f9d0 	bl	8004920 <HAL_TIM_PWM_Stop_DMA>
        drl_signal_received = 1;  // Signal that DRL mode is active
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <UpdateStartupWaveForMiddle+0x28c>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
        wave_count_middle = 0;    // Reset wave count for future sequences
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <UpdateStartupWaveForMiddle+0x26c>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
        drl_wave_complete_middle = 0;  // Reset DRL completion flag
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <UpdateStartupWaveForMiddle+0x284>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
        sequential_turn_on = 0;   // Reset sequential turn-on counter
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <UpdateStartupWaveForMiddle+0x288>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200033e4 	.word	0x200033e4
 80015a4:	200033e8 	.word	0x200033e8
 80015a8:	200033ec 	.word	0x200033ec
 80015ac:	20000004 	.word	0x20000004
 80015b0:	20000008 	.word	0x20000008
 80015b4:	20003414 	.word	0x20003414
 80015b8:	200033f0 	.word	0x200033f0
 80015bc:	200033f4 	.word	0x200033f4
 80015c0:	200033ac 	.word	0x200033ac

080015c4 <BreathingEffect>:

void BreathingEffect(WS28XX_HandleTypeDef* ws, int duration)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
    static int last_update_time = 0;
    static uint8_t brightness = 0;
    static int increasing = 1; // 1 for increasing, 0 for decreasing
    int current_time = HAL_GetTick();
 80015ce:	f001 f847 	bl	8002660 <HAL_GetTick>
 80015d2:	4603      	mov	r3, r0
 80015d4:	60bb      	str	r3, [r7, #8]

    // Adjust duration for smoother transitions
    if (current_time - last_update_time >= duration) {
 80015d6:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <BreathingEffect+0xac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dc40      	bgt.n	8001666 <BreathingEffect+0xa2>
        last_update_time = current_time;
 80015e4:	4a22      	ldr	r2, [pc, #136]	@ (8001670 <BreathingEffect+0xac>)
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	6013      	str	r3, [r2, #0]

        // Modify brightness increment/decrement step for smoother effect
        if (increasing) {
 80015ea:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <BreathingEffect+0xb0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00d      	beq.n	800160e <BreathingEffect+0x4a>
            brightness += 1;  // Increase brightness step by 5
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <BreathingEffect+0xb4>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <BreathingEffect+0xb4>)
 80015fc:	701a      	strb	r2, [r3, #0]
            if (brightness >= 255) increasing = 0; // Reverse direction
 80015fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <BreathingEffect+0xb4>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2bff      	cmp	r3, #255	@ 0xff
 8001604:	d110      	bne.n	8001628 <BreathingEffect+0x64>
 8001606:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <BreathingEffect+0xb0>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e00c      	b.n	8001628 <BreathingEffect+0x64>
        } else {
            brightness -= 1;
 800160e:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <BreathingEffect+0xb4>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	3b01      	subs	r3, #1
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <BreathingEffect+0xb4>)
 8001618:	701a      	strb	r2, [r3, #0]
            if (brightness <= 0) increasing = 1;  // Reverse direction
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <BreathingEffect+0xb4>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <BreathingEffect+0x64>
 8001622:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <BreathingEffect+0xb0>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]
        }

        // Apply brightness level to each LED
        for (int i = 0; i < ws->MaxPixel; i++) {
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e00b      	b.n	8001646 <BreathingEffect+0x82>
            WS28XX_SetPixel_RGBW_888(ws, i, COLOR_RGB888_WHITE, brightness);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	b299      	uxth	r1, r3
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <BreathingEffect+0xb4>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f004 f9ce 	bl	80059dc <WS28XX_SetPixel_RGBW_888>
        for (int i = 0; i < ws->MaxPixel; i++) {
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3301      	adds	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	895b      	ldrh	r3, [r3, #10]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4293      	cmp	r3, r2
 8001650:	dbed      	blt.n	800162e <BreathingEffect+0x6a>
        }

        WS28XX_Update(ws);  // Refresh LED strip with current brightness level
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f004 fa24 	bl	8005aa0 <WS28XX_Update>
        HAL_Delay(6);
 8001658:	2006      	movs	r0, #6
 800165a:	f001 f80b 	bl	8002674 <HAL_Delay>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 800165e:	2104      	movs	r1, #4
 8001660:	4806      	ldr	r0, [pc, #24]	@ (800167c <BreathingEffect+0xb8>)
 8001662:	f003 f95d 	bl	8004920 <HAL_TIM_PWM_Stop_DMA>
    }
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200033f8 	.word	0x200033f8
 8001674:	2000000c 	.word	0x2000000c
 8001678:	200033fc 	.word	0x200033fc
 800167c:	20003414 	.word	0x20003414

08001680 <UpdateSOCIndication>:

void UpdateSOCIndication(WS28XX_HandleTypeDef* ws, int soc_percentage, int charging_type) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	@ 0x30
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
    static int last_update_time = 0;
    static uint8_t charging_blink_state = 0;
    int current_time = HAL_GetTick();
 800168c:	f000 ffe8 	bl	8002660 <HAL_GetTick>
 8001690:	4603      	mov	r3, r0
 8001692:	623b      	str	r3, [r7, #32]
    int led_count_to_light = (WS28XX_MIDDLE_LED_COUNT * soc_percentage) / 100;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2296      	movs	r2, #150	@ 0x96
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	4a76      	ldr	r2, [pc, #472]	@ (8001878 <UpdateSOCIndication+0x1f8>)
 800169e:	fb82 1203 	smull	r1, r2, r2, r3
 80016a2:	1152      	asrs	r2, r2, #5
 80016a4:	17db      	asrs	r3, r3, #31
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	61fb      	str	r3, [r7, #28]
    int left_led = MIDDLE_LED_MID_INDEX;
 80016aa:	234b      	movs	r3, #75	@ 0x4b
 80016ac:	61bb      	str	r3, [r7, #24]
    int right_led = MIDDLE_LED_MID_INDEX;
 80016ae:	234b      	movs	r3, #75	@ 0x4b
 80016b0:	617b      	str	r3, [r7, #20]

    if (current_time - last_update_time >= 1000) {
 80016b2:	4b72      	ldr	r3, [pc, #456]	@ (800187c <UpdateSOCIndication+0x1fc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6a3a      	ldr	r2, [r7, #32]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016be:	f2c0 80d7 	blt.w	8001870 <UpdateSOCIndication+0x1f0>
        last_update_time = current_time;
 80016c2:	4a6e      	ldr	r2, [pc, #440]	@ (800187c <UpdateSOCIndication+0x1fc>)
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	6013      	str	r3, [r2, #0]

        // Clear blinking LEDs only
        for (int i = 0; i < 10; i++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016cc:	e022      	b.n	8001714 <UpdateSOCIndication+0x94>
            if (left_led - i >= 0) {
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <UpdateSOCIndication+0x6e>
                WS28XX_SetPixel_RGBW_565(ws, left_led - i, COLOR_RGB565_BLACK, 0);
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016de:	b29b      	uxth	r3, r3
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	b299      	uxth	r1, r3
 80016e4:	2300      	movs	r3, #0
 80016e6:	2200      	movs	r2, #0
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f004 f903 	bl	80058f4 <WS28XX_SetPixel_RGBW_565>
            }
            if (right_led + i < WS28XX_MIDDLE_LED_COUNT) {
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f2:	4413      	add	r3, r2
 80016f4:	2b95      	cmp	r3, #149	@ 0x95
 80016f6:	dc0a      	bgt.n	800170e <UpdateSOCIndication+0x8e>
                WS28XX_SetPixel_RGBW_565(ws, right_led + i, COLOR_RGB565_BLACK, 0);
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b299      	uxth	r1, r3
 8001704:	2300      	movs	r3, #0
 8001706:	2200      	movs	r2, #0
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f004 f8f3 	bl	80058f4 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < 10; i++) {
 800170e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001710:	3301      	adds	r3, #1
 8001712:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001716:	2b09      	cmp	r3, #9
 8001718:	ddd9      	ble.n	80016ce <UpdateSOCIndication+0x4e>
            }
        }

        // Set steady LEDs up to SOC percentage
        for (int i = 0; i < led_count_to_light / 2; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800171e:	e030      	b.n	8001782 <UpdateSOCIndication+0x102>
            if (left_led - i >= 0) {
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	db11      	blt.n	800174e <UpdateSOCIndication+0xce>
                WS28XX_SetPixel_RGBW_565(ws, left_led - i,
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	b29a      	uxth	r2, r3
 800172e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001730:	b29b      	uxth	r3, r3
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	b299      	uxth	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d102      	bne.n	8001742 <UpdateSOCIndication+0xc2>
 800173c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001740:	e001      	b.n	8001746 <UpdateSOCIndication+0xc6>
 8001742:	f242 4244 	movw	r2, #9284	@ 0x2444
 8001746:	23ff      	movs	r3, #255	@ 0xff
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f004 f8d3 	bl	80058f4 <WS28XX_SetPixel_RGBW_565>
                    (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, DRL_BRIGHTNESS);
            }
            if (right_led + i < WS28XX_MIDDLE_LED_COUNT) {
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001752:	4413      	add	r3, r2
 8001754:	2b95      	cmp	r3, #149	@ 0x95
 8001756:	dc11      	bgt.n	800177c <UpdateSOCIndication+0xfc>
                WS28XX_SetPixel_RGBW_565(ws, right_led + i,
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	b29a      	uxth	r2, r3
 800175c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175e:	b29b      	uxth	r3, r3
 8001760:	4413      	add	r3, r2
 8001762:	b299      	uxth	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d102      	bne.n	8001770 <UpdateSOCIndication+0xf0>
 800176a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800176e:	e001      	b.n	8001774 <UpdateSOCIndication+0xf4>
 8001770:	f242 4244 	movw	r2, #9284	@ 0x2444
 8001774:	23ff      	movs	r3, #255	@ 0xff
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f004 f8bc 	bl	80058f4 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < led_count_to_light / 2; i++) {
 800177c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177e:	3301      	adds	r3, #1
 8001780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	0fda      	lsrs	r2, r3, #31
 8001786:	4413      	add	r3, r2
 8001788:	105b      	asrs	r3, r3, #1
 800178a:	461a      	mov	r2, r3
 800178c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178e:	4293      	cmp	r3, r2
 8001790:	dbc6      	blt.n	8001720 <UpdateSOCIndication+0xa0>
                    (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, DRL_BRIGHTNESS);
            }
        }

        // Blink next 10 LEDs
        charging_blink_state = !charging_blink_state;
 8001792:	4b3b      	ldr	r3, [pc, #236]	@ (8001880 <UpdateSOCIndication+0x200>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	bf0c      	ite	eq
 800179a:	2301      	moveq	r3, #1
 800179c:	2300      	movne	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b37      	ldr	r3, [pc, #220]	@ (8001880 <UpdateSOCIndication+0x200>)
 80017a4:	701a      	strb	r2, [r3, #0]
        uint8_t blink_brightness = charging_blink_state ? DRL_BRIGHTNESS : 0;
 80017a6:	4b36      	ldr	r3, [pc, #216]	@ (8001880 <UpdateSOCIndication+0x200>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <UpdateSOCIndication+0x132>
 80017ae:	23ff      	movs	r3, #255	@ 0xff
 80017b0:	e000      	b.n	80017b4 <UpdateSOCIndication+0x134>
 80017b2:	2300      	movs	r3, #0
 80017b4:	74fb      	strb	r3, [r7, #19]
        for (int i = 0; i < 10; i++) {
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ba:	e04c      	b.n	8001856 <UpdateSOCIndication+0x1d6>
            if (left_led - (led_count_to_light / 2) - i >= 0) {
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	0fda      	lsrs	r2, r3, #31
 80017c0:	4413      	add	r3, r2
 80017c2:	105b      	asrs	r3, r3, #1
 80017c4:	425b      	negs	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	441a      	add	r2, r3
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	db19      	blt.n	8001808 <UpdateSOCIndication+0x188>
                WS28XX_SetPixel_RGBW_565(ws, left_led - (led_count_to_light / 2) - i,
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	0fda      	lsrs	r2, r3, #31
 80017d8:	4413      	add	r3, r2
 80017da:	105b      	asrs	r3, r3, #1
 80017dc:	425b      	negs	r3, r3
 80017de:	b29a      	uxth	r2, r3
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	b299      	uxth	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d102      	bne.n	80017fc <UpdateSOCIndication+0x17c>
 80017f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80017fa:	e001      	b.n	8001800 <UpdateSOCIndication+0x180>
 80017fc:	f242 4244 	movw	r2, #9284	@ 0x2444
 8001800:	7cfb      	ldrb	r3, [r7, #19]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f004 f876 	bl	80058f4 <WS28XX_SetPixel_RGBW_565>
                    (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, blink_brightness);
            }
            if (right_led + (led_count_to_light / 2) + i < WS28XX_MIDDLE_LED_COUNT) {
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	0fda      	lsrs	r2, r3, #31
 800180c:	4413      	add	r3, r2
 800180e:	105b      	asrs	r3, r3, #1
 8001810:	461a      	mov	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	441a      	add	r2, r3
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	4413      	add	r3, r2
 800181a:	2b95      	cmp	r3, #149	@ 0x95
 800181c:	dc18      	bgt.n	8001850 <UpdateSOCIndication+0x1d0>
                WS28XX_SetPixel_RGBW_565(ws, right_led + (led_count_to_light / 2) + i,
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	0fda      	lsrs	r2, r3, #31
 8001822:	4413      	add	r3, r2
 8001824:	105b      	asrs	r3, r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	b29b      	uxth	r3, r3
 800182c:	4413      	add	r3, r2
 800182e:	b29a      	uxth	r2, r3
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	b29b      	uxth	r3, r3
 8001834:	4413      	add	r3, r2
 8001836:	b299      	uxth	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <UpdateSOCIndication+0x1c4>
 800183e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001842:	e001      	b.n	8001848 <UpdateSOCIndication+0x1c8>
 8001844:	f242 4244 	movw	r2, #9284	@ 0x2444
 8001848:	7cfb      	ldrb	r3, [r7, #19]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f004 f852 	bl	80058f4 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < 10; i++) {
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	3301      	adds	r3, #1
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	2b09      	cmp	r3, #9
 800185a:	ddaf      	ble.n	80017bc <UpdateSOCIndication+0x13c>
                    (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, blink_brightness);
            }
        }
        WS28XX_Update(ws);
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f004 f91f 	bl	8005aa0 <WS28XX_Update>
        HAL_Delay(6);
 8001862:	2006      	movs	r0, #6
 8001864:	f000 ff06 	bl	8002674 <HAL_Delay>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8001868:	2104      	movs	r1, #4
 800186a:	4806      	ldr	r0, [pc, #24]	@ (8001884 <UpdateSOCIndication+0x204>)
 800186c:	f003 f858 	bl	8004920 <HAL_TIM_PWM_Stop_DMA>

    }
}
 8001870:	bf00      	nop
 8001872:	3730      	adds	r7, #48	@ 0x30
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	51eb851f 	.word	0x51eb851f
 800187c:	20003400 	.word	0x20003400
 8001880:	20003404 	.word	0x20003404
 8001884:	20003414 	.word	0x20003414

08001888 <SetGPIOHigh>:

void SetGPIOHigh(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001894:	887b      	ldrh	r3, [r7, #2]
 8001896:	2201      	movs	r2, #1
 8001898:	4619      	mov	r1, r3
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f002 f875 	bl	800398a <HAL_GPIO_WritePin>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <SetGPIOLow>:

void SetGPIOLow(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	2200      	movs	r2, #0
 80018b8:	4619      	mov	r1, r3
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f002 f865 	bl	800398a <HAL_GPIO_WritePin>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HandleHornState>:

void HandleHornState(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
    if (horn_signal_received) {
 80018cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <HandleHornState+0x3c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HandleHornState+0x14>
        current_horn_state = HORN_ON;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <HandleHornState+0x40>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	e002      	b.n	80018e2 <HandleHornState+0x1a>
    } else {
        current_horn_state = HORN_OFF;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <HandleHornState+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
    }

    switch (current_horn_state) {
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <HandleHornState+0x40>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d104      	bne.n	80018f4 <HandleHornState+0x2c>
        case HORN_ON:
            SetGPIOLow(GPIOA, GPIO_PIN_0);  // PA0 LOW to turn on the horn
 80018ea:	2101      	movs	r1, #1
 80018ec:	4807      	ldr	r0, [pc, #28]	@ (800190c <HandleHornState+0x44>)
 80018ee:	f7ff ffdb 	bl	80018a8 <SetGPIOLow>
            break;
 80018f2:	e004      	b.n	80018fe <HandleHornState+0x36>

        case HORN_OFF:
        default:
            SetGPIOHigh(GPIOA, GPIO_PIN_0);  // PA0 HIGH to turn off the horn
 80018f4:	2101      	movs	r1, #1
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <HandleHornState+0x44>)
 80018f8:	f7ff ffc6 	bl	8001888 <SetGPIOHigh>
            break;
 80018fc:	bf00      	nop
    }
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200033bc 	.word	0x200033bc
 8001908:	2000338f 	.word	0x2000338f
 800190c:	40010800 	.word	0x40010800

08001910 <HandleHeadlampState>:

void HandleHeadlampState(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
    if (headlamp_high_beam_signal_received) {
 8001914:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <HandleHeadlampState+0x70>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HandleHeadlampState+0x14>
        current_headlamp_state = HEADLAMP_HIGH_BEAM;
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HandleHeadlampState+0x74>)
 800191e:	2202      	movs	r2, #2
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	e00a      	b.n	800193a <HandleHeadlampState+0x2a>
    } else if (headlamp_low_beam_signal_received) {
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <HandleHeadlampState+0x78>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HandleHeadlampState+0x24>
        current_headlamp_state = HEADLAMP_LOW_BEAM;
 800192c:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <HandleHeadlampState+0x74>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	e002      	b.n	800193a <HandleHeadlampState+0x2a>
    } else {
        current_headlamp_state = HEADLAMP_OFF;
 8001934:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <HandleHeadlampState+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
    }

    switch (current_headlamp_state) {
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HandleHeadlampState+0x74>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d00a      	beq.n	8001958 <HandleHeadlampState+0x48>
 8001942:	2b02      	cmp	r3, #2
 8001944:	d111      	bne.n	800196a <HandleHeadlampState+0x5a>
        case HEADLAMP_HIGH_BEAM:
            // High beam active (Both low beam and high beam relays should be on)
            SetGPIOLow(GPIOA, GPIO_PIN_1);  // PA1 LOW for headlamp power
 8001946:	2102      	movs	r1, #2
 8001948:	4810      	ldr	r0, [pc, #64]	@ (800198c <HandleHeadlampState+0x7c>)
 800194a:	f7ff ffad 	bl	80018a8 <SetGPIOLow>
            SetGPIOLow(GPIOA, GPIO_PIN_6);  // PA6 LOW for beam selector
 800194e:	2140      	movs	r1, #64	@ 0x40
 8001950:	480e      	ldr	r0, [pc, #56]	@ (800198c <HandleHeadlampState+0x7c>)
 8001952:	f7ff ffa9 	bl	80018a8 <SetGPIOLow>
            break;
 8001956:	e011      	b.n	800197c <HandleHeadlampState+0x6c>

        case HEADLAMP_LOW_BEAM:
            // Low beam active (Only low beam relay should be on)
            SetGPIOLow(GPIOA, GPIO_PIN_1);  // PA1 LOW for headlamp power
 8001958:	2102      	movs	r1, #2
 800195a:	480c      	ldr	r0, [pc, #48]	@ (800198c <HandleHeadlampState+0x7c>)
 800195c:	f7ff ffa4 	bl	80018a8 <SetGPIOLow>
            SetGPIOHigh(GPIOA, GPIO_PIN_6);  // PA6 HIGH to deactivate high beam
 8001960:	2140      	movs	r1, #64	@ 0x40
 8001962:	480a      	ldr	r0, [pc, #40]	@ (800198c <HandleHeadlampState+0x7c>)
 8001964:	f7ff ff90 	bl	8001888 <SetGPIOHigh>
            break;
 8001968:	e008      	b.n	800197c <HandleHeadlampState+0x6c>

        case HEADLAMP_OFF:
        default:
            // Headlamps off
            SetGPIOHigh(GPIOA, GPIO_PIN_1);  // PA1 HIGH to turn off the headlamp power
 800196a:	2102      	movs	r1, #2
 800196c:	4807      	ldr	r0, [pc, #28]	@ (800198c <HandleHeadlampState+0x7c>)
 800196e:	f7ff ff8b 	bl	8001888 <SetGPIOHigh>
            SetGPIOHigh(GPIOA, GPIO_PIN_6);  // PA6 HIGH to turn off beam selector
 8001972:	2140      	movs	r1, #64	@ 0x40
 8001974:	4805      	ldr	r0, [pc, #20]	@ (800198c <HandleHeadlampState+0x7c>)
 8001976:	f7ff ff87 	bl	8001888 <SetGPIOHigh>
            break;
 800197a:	bf00      	nop
    }
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200033c4 	.word	0x200033c4
 8001984:	20003390 	.word	0x20003390
 8001988:	200033c0 	.word	0x200033c0
 800198c:	40010800 	.word	0x40010800

08001990 <readSteeringControls>:

void readSteeringControls(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==0 && hazard_signal_received == 0){
 8001994:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001998:	48a1      	ldr	r0, [pc, #644]	@ (8001c20 <readSteeringControls+0x290>)
 800199a:	f001 ffdf 	bl	800395c <HAL_GPIO_ReadPin>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d112      	bne.n	80019ca <readSteeringControls+0x3a>
 80019a4:	4b9f      	ldr	r3, [pc, #636]	@ (8001c24 <readSteeringControls+0x294>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10e      	bne.n	80019ca <readSteeringControls+0x3a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // give 12 volt power through relay connected to PB1
 80019ac:	2200      	movs	r2, #0
 80019ae:	2102      	movs	r1, #2
 80019b0:	489b      	ldr	r0, [pc, #620]	@ (8001c20 <readSteeringControls+0x290>)
 80019b2:	f001 ffea 	bl	800398a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); //sending signal to rear side
 80019b6:	2201      	movs	r2, #1
 80019b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019bc:	4898      	ldr	r0, [pc, #608]	@ (8001c20 <readSteeringControls+0x290>)
 80019be:	f001 ffe4 	bl	800398a <HAL_GPIO_WritePin>
		  hazard_signal_received = 1;
 80019c2:	4b98      	ldr	r3, [pc, #608]	@ (8001c24 <readSteeringControls+0x294>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e019      	b.n	80019fe <readSteeringControls+0x6e>
	  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==0 && hazard_signal_received == 1){
 80019ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ce:	4894      	ldr	r0, [pc, #592]	@ (8001c20 <readSteeringControls+0x290>)
 80019d0:	f001 ffc4 	bl	800395c <HAL_GPIO_ReadPin>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d111      	bne.n	80019fe <readSteeringControls+0x6e>
 80019da:	4b92      	ldr	r3, [pc, #584]	@ (8001c24 <readSteeringControls+0x294>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d10d      	bne.n	80019fe <readSteeringControls+0x6e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // removing 12 volt power through relay
 80019e2:	2201      	movs	r2, #1
 80019e4:	2102      	movs	r1, #2
 80019e6:	488e      	ldr	r0, [pc, #568]	@ (8001c20 <readSteeringControls+0x290>)
 80019e8:	f001 ffcf 	bl	800398a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //sending signal to rear side
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019f2:	488b      	ldr	r0, [pc, #556]	@ (8001c20 <readSteeringControls+0x290>)
 80019f4:	f001 ffc9 	bl	800398a <HAL_GPIO_WritePin>
		  hazard_signal_received = 0;
 80019f8:	4b8a      	ldr	r3, [pc, #552]	@ (8001c24 <readSteeringControls+0x294>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
	  }

	  ADC_Select_CH3();
 80019fe:	f000 f9d7 	bl	8001db0 <ADC_Select_CH3>
	  HAL_ADC_Start(&hadc1);
 8001a02:	4889      	ldr	r0, [pc, #548]	@ (8001c28 <readSteeringControls+0x298>)
 8001a04:	f000 ff32 	bl	800286c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8001a08:	2164      	movs	r1, #100	@ 0x64
 8001a0a:	4887      	ldr	r0, [pc, #540]	@ (8001c28 <readSteeringControls+0x298>)
 8001a0c:	f001 f808 	bl	8002a20 <HAL_ADC_PollForConversion>
	  adc_val_pa3 = HAL_ADC_GetValue(&hadc1);
 8001a10:	4885      	ldr	r0, [pc, #532]	@ (8001c28 <readSteeringControls+0x298>)
 8001a12:	f001 f90b 	bl	8002c2c <HAL_ADC_GetValue>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b84      	ldr	r3, [pc, #528]	@ (8001c2c <readSteeringControls+0x29c>)
 8001a1c:	801a      	strh	r2, [r3, #0]
	  voltage_pa3 = (adc_val_pa3 * VREF) / 4095.0; // Convert to voltage
 8001a1e:	4b83      	ldr	r3, [pc, #524]	@ (8001c2c <readSteeringControls+0x29c>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fe92 	bl	800074c <__aeabi_i2f>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a81      	ldr	r2, [pc, #516]	@ (8001c30 <readSteeringControls+0x2a0>)
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fee0 	bl	80007f4 <__aeabi_fmul>
 8001a34:	4603      	mov	r3, r0
 8001a36:	497f      	ldr	r1, [pc, #508]	@ (8001c34 <readSteeringControls+0x2a4>)
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe ff8f 	bl	800095c <__aeabi_fdiv>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b7d      	ldr	r3, [pc, #500]	@ (8001c38 <readSteeringControls+0x2a8>)
 8001a44:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8001a46:	4878      	ldr	r0, [pc, #480]	@ (8001c28 <readSteeringControls+0x298>)
 8001a48:	f000 ffbe 	bl	80029c8 <HAL_ADC_Stop>

	  ADC_Select_CH4();
 8001a4c:	f000 f9ce 	bl	8001dec <ADC_Select_CH4>
	  HAL_ADC_Start(&hadc1);
 8001a50:	4875      	ldr	r0, [pc, #468]	@ (8001c28 <readSteeringControls+0x298>)
 8001a52:	f000 ff0b 	bl	800286c <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 100);
 8001a56:	2164      	movs	r1, #100	@ 0x64
 8001a58:	4873      	ldr	r0, [pc, #460]	@ (8001c28 <readSteeringControls+0x298>)
 8001a5a:	f000 ffe1 	bl	8002a20 <HAL_ADC_PollForConversion>
	  adc_val_pa4 = HAL_ADC_GetValue(&hadc1);
 8001a5e:	4872      	ldr	r0, [pc, #456]	@ (8001c28 <readSteeringControls+0x298>)
 8001a60:	f001 f8e4 	bl	8002c2c <HAL_ADC_GetValue>
 8001a64:	4603      	mov	r3, r0
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	4b74      	ldr	r3, [pc, #464]	@ (8001c3c <readSteeringControls+0x2ac>)
 8001a6a:	801a      	strh	r2, [r3, #0]
	  voltage_pa4 = (adc_val_pa4 * VREF) / 4095.0; // Convert to voltage
 8001a6c:	4b73      	ldr	r3, [pc, #460]	@ (8001c3c <readSteeringControls+0x2ac>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fe6b 	bl	800074c <__aeabi_i2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a6d      	ldr	r2, [pc, #436]	@ (8001c30 <readSteeringControls+0x2a0>)
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe feb9 	bl	80007f4 <__aeabi_fmul>
 8001a82:	4603      	mov	r3, r0
 8001a84:	496b      	ldr	r1, [pc, #428]	@ (8001c34 <readSteeringControls+0x2a4>)
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe ff68 	bl	800095c <__aeabi_fdiv>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b6b      	ldr	r3, [pc, #428]	@ (8001c40 <readSteeringControls+0x2b0>)
 8001a92:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8001a94:	4864      	ldr	r0, [pc, #400]	@ (8001c28 <readSteeringControls+0x298>)
 8001a96:	f000 ff97 	bl	80029c8 <HAL_ADC_Stop>

	  ADC_Select_CH2();
 8001a9a:	f000 f9c5 	bl	8001e28 <ADC_Select_CH2>
	  HAL_ADC_Start(&hadc1);
 8001a9e:	4862      	ldr	r0, [pc, #392]	@ (8001c28 <readSteeringControls+0x298>)
 8001aa0:	f000 fee4 	bl	800286c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8001aa4:	2164      	movs	r1, #100	@ 0x64
 8001aa6:	4860      	ldr	r0, [pc, #384]	@ (8001c28 <readSteeringControls+0x298>)
 8001aa8:	f000 ffba 	bl	8002a20 <HAL_ADC_PollForConversion>
	  adc_val_pa2 = HAL_ADC_GetValue(&hadc1);
 8001aac:	485e      	ldr	r0, [pc, #376]	@ (8001c28 <readSteeringControls+0x298>)
 8001aae:	f001 f8bd 	bl	8002c2c <HAL_ADC_GetValue>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b63      	ldr	r3, [pc, #396]	@ (8001c44 <readSteeringControls+0x2b4>)
 8001ab8:	801a      	strh	r2, [r3, #0]
	  voltage_pa2 = (adc_val_pa2 * VREF) / 4095.0; // Convert to voltage
 8001aba:	4b62      	ldr	r3, [pc, #392]	@ (8001c44 <readSteeringControls+0x2b4>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fe44 	bl	800074c <__aeabi_i2f>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a5a      	ldr	r2, [pc, #360]	@ (8001c30 <readSteeringControls+0x2a0>)
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fe92 	bl	80007f4 <__aeabi_fmul>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4958      	ldr	r1, [pc, #352]	@ (8001c34 <readSteeringControls+0x2a4>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe ff41 	bl	800095c <__aeabi_fdiv>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b5a      	ldr	r3, [pc, #360]	@ (8001c48 <readSteeringControls+0x2b8>)
 8001ae0:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8001ae2:	4851      	ldr	r0, [pc, #324]	@ (8001c28 <readSteeringControls+0x298>)
 8001ae4:	f000 ff70 	bl	80029c8 <HAL_ADC_Stop>

	      if (voltage_pa3 < 2.6 && voltage_pa3 > 2.3){
 8001ae8:	4b53      	ldr	r3, [pc, #332]	@ (8001c38 <readSteeringControls+0x2a8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fc93 	bl	8000418 <__aeabi_f2d>
 8001af2:	a343      	add	r3, pc, #268	@ (adr r3, 8001c00 <readSteeringControls+0x270>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fd46 	bl	8000588 <__aeabi_dcmplt>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d01e      	beq.n	8001b40 <readSteeringControls+0x1b0>
 8001b02:	4b4d      	ldr	r3, [pc, #308]	@ (8001c38 <readSteeringControls+0x2a8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fc86 	bl	8000418 <__aeabi_f2d>
 8001b0c:	a33e      	add	r3, pc, #248	@ (adr r3, 8001c08 <readSteeringControls+0x278>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fd57 	bl	80005c4 <__aeabi_dcmpgt>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d011      	beq.n	8001b40 <readSteeringControls+0x1b0>
	    	  turn_signal_left_received = 0; /// off left indicator
 8001b1c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c4c <readSteeringControls+0x2bc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
	  		  turn_signal_right_received = 1; /// on right indicator
 8001b22:	4b4b      	ldr	r3, [pc, #300]	@ (8001c50 <readSteeringControls+0x2c0>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);  // on right indicator sending to rear
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b2e:	483c      	ldr	r0, [pc, #240]	@ (8001c20 <readSteeringControls+0x290>)
 8001b30:	f001 ff2b 	bl	800398a <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // off left indicator sending to rear
 8001b34:	2200      	movs	r2, #0
 8001b36:	2180      	movs	r1, #128	@ 0x80
 8001b38:	4839      	ldr	r0, [pc, #228]	@ (8001c20 <readSteeringControls+0x290>)
 8001b3a:	f001 ff26 	bl	800398a <HAL_GPIO_WritePin>
 8001b3e:	e03c      	b.n	8001bba <readSteeringControls+0x22a>


	      } else if (voltage_pa3 < 1.7 && voltage_pa3 > 1.4){
 8001b40:	4b3d      	ldr	r3, [pc, #244]	@ (8001c38 <readSteeringControls+0x2a8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fc67 	bl	8000418 <__aeabi_f2d>
 8001b4a:	a331      	add	r3, pc, #196	@ (adr r3, 8001c10 <readSteeringControls+0x280>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	f7fe fd1a 	bl	8000588 <__aeabi_dcmplt>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d01e      	beq.n	8001b98 <readSteeringControls+0x208>
 8001b5a:	4b37      	ldr	r3, [pc, #220]	@ (8001c38 <readSteeringControls+0x2a8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fc5a 	bl	8000418 <__aeabi_f2d>
 8001b64:	a32c      	add	r3, pc, #176	@ (adr r3, 8001c18 <readSteeringControls+0x288>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fd2b 	bl	80005c4 <__aeabi_dcmpgt>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d011      	beq.n	8001b98 <readSteeringControls+0x208>
	  		  turn_signal_right_received = 0; /// off right indicator
 8001b74:	4b36      	ldr	r3, [pc, #216]	@ (8001c50 <readSteeringControls+0x2c0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
	  		  turn_signal_left_received = 1; /// on left indicator
 8001b7a:	4b34      	ldr	r3, [pc, #208]	@ (8001c4c <readSteeringControls+0x2bc>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  // off right indicator sending to rear
 8001b80:	2201      	movs	r2, #1
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	4826      	ldr	r0, [pc, #152]	@ (8001c20 <readSteeringControls+0x290>)
 8001b86:	f001 ff00 	bl	800398a <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // on left indicator sending to rear
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b90:	4823      	ldr	r0, [pc, #140]	@ (8001c20 <readSteeringControls+0x290>)
 8001b92:	f001 fefa 	bl	800398a <HAL_GPIO_WritePin>
 8001b96:	e010      	b.n	8001bba <readSteeringControls+0x22a>
	      }else{
	    	  turn_signal_right_received = 0; /// off right indicator
 8001b98:	4b2d      	ldr	r3, [pc, #180]	@ (8001c50 <readSteeringControls+0x2c0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
	    	  turn_signal_left_received = 0; /// off left indicator
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c4c <readSteeringControls+0x2bc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
	    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);  // off right indicator sending to rear
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2180      	movs	r1, #128	@ 0x80
 8001ba8:	481d      	ldr	r0, [pc, #116]	@ (8001c20 <readSteeringControls+0x290>)
 8001baa:	f001 feee 	bl	800398a <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // off left indicator sending to rear
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bb4:	481a      	ldr	r0, [pc, #104]	@ (8001c20 <readSteeringControls+0x290>)
 8001bb6:	f001 fee8 	bl	800398a <HAL_GPIO_WritePin>
	  	  }

	      if (voltage_pa4 < 2.6 && voltage_pa4 > 2.3){
 8001bba:	4b21      	ldr	r3, [pc, #132]	@ (8001c40 <readSteeringControls+0x2b0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc2a 	bl	8000418 <__aeabi_f2d>
 8001bc4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001c00 <readSteeringControls+0x270>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fcdd 	bl	8000588 <__aeabi_dcmplt>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d041      	beq.n	8001c58 <readSteeringControls+0x2c8>
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <readSteeringControls+0x2b0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fc1d 	bl	8000418 <__aeabi_f2d>
 8001bde:	a30a      	add	r3, pc, #40	@ (adr r3, 8001c08 <readSteeringControls+0x278>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fcee 	bl	80005c4 <__aeabi_dcmpgt>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d034      	beq.n	8001c58 <readSteeringControls+0x2c8>
	    	  headlamp_high_beam_signal_received = 1; /// turn on highbeam
 8001bee:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <readSteeringControls+0x2c4>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
	    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Sending position ON to rear side
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2120      	movs	r1, #32
 8001bf8:	4809      	ldr	r0, [pc, #36]	@ (8001c20 <readSteeringControls+0x290>)
 8001bfa:	f001 fec6 	bl	800398a <HAL_GPIO_WritePin>
 8001bfe:	e051      	b.n	8001ca4 <readSteeringControls+0x314>
 8001c00:	cccccccd 	.word	0xcccccccd
 8001c04:	4004cccc 	.word	0x4004cccc
 8001c08:	66666666 	.word	0x66666666
 8001c0c:	40026666 	.word	0x40026666
 8001c10:	33333333 	.word	0x33333333
 8001c14:	3ffb3333 	.word	0x3ffb3333
 8001c18:	66666666 	.word	0x66666666
 8001c1c:	3ff66666 	.word	0x3ff66666
 8001c20:	40010c00 	.word	0x40010c00
 8001c24:	200033b0 	.word	0x200033b0
 8001c28:	20000038 	.word	0x20000038
 8001c2c:	200033cc 	.word	0x200033cc
 8001c30:	40533333 	.word	0x40533333
 8001c34:	457ff000 	.word	0x457ff000
 8001c38:	200033d4 	.word	0x200033d4
 8001c3c:	200033d0 	.word	0x200033d0
 8001c40:	200033dc 	.word	0x200033dc
 8001c44:	200033ce 	.word	0x200033ce
 8001c48:	200033d8 	.word	0x200033d8
 8001c4c:	200033b4 	.word	0x200033b4
 8001c50:	200033b8 	.word	0x200033b8
 8001c54:	200033c4 	.word	0x200033c4

	      } else if (voltage_pa4 < 1.7 && voltage_pa4 > 1.4){
 8001c58:	4b47      	ldr	r3, [pc, #284]	@ (8001d78 <readSteeringControls+0x3e8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fbdb 	bl	8000418 <__aeabi_f2d>
 8001c62:	a339      	add	r3, pc, #228	@ (adr r3, 8001d48 <readSteeringControls+0x3b8>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f7fe fc8e 	bl	8000588 <__aeabi_dcmplt>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d015      	beq.n	8001c9e <readSteeringControls+0x30e>
 8001c72:	4b41      	ldr	r3, [pc, #260]	@ (8001d78 <readSteeringControls+0x3e8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fbce 	bl	8000418 <__aeabi_f2d>
 8001c7c:	a334      	add	r3, pc, #208	@ (adr r3, 8001d50 <readSteeringControls+0x3c0>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe fc9f 	bl	80005c4 <__aeabi_dcmpgt>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <readSteeringControls+0x30e>
	    	  headlamp_high_beam_signal_received = 1; /// turn on highbeam
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d7c <readSteeringControls+0x3ec>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
	    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Sending position ON to rear side
 8001c92:	2201      	movs	r2, #1
 8001c94:	2120      	movs	r1, #32
 8001c96:	483a      	ldr	r0, [pc, #232]	@ (8001d80 <readSteeringControls+0x3f0>)
 8001c98:	f001 fe77 	bl	800398a <HAL_GPIO_WritePin>
 8001c9c:	e002      	b.n	8001ca4 <readSteeringControls+0x314>
	      }else{
	    	  headlamp_high_beam_signal_received = 0; /// turn off flasher
 8001c9e:	4b37      	ldr	r3, [pc, #220]	@ (8001d7c <readSteeringControls+0x3ec>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
	  	  }

	      if (voltage_pa2 < 2.2 && voltage_pa2 > 1.8){
 8001ca4:	4b37      	ldr	r3, [pc, #220]	@ (8001d84 <readSteeringControls+0x3f4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fbb5 	bl	8000418 <__aeabi_f2d>
 8001cae:	a32a      	add	r3, pc, #168	@ (adr r3, 8001d58 <readSteeringControls+0x3c8>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe fc68 	bl	8000588 <__aeabi_dcmplt>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d015      	beq.n	8001cea <readSteeringControls+0x35a>
 8001cbe:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <readSteeringControls+0x3f4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fba8 	bl	8000418 <__aeabi_f2d>
 8001cc8:	a325      	add	r3, pc, #148	@ (adr r3, 8001d60 <readSteeringControls+0x3d0>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fc79 	bl	80005c4 <__aeabi_dcmpgt>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <readSteeringControls+0x35a>
	    	  headlamp_low_beam_signal_received = 0; // turn off low beam
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d88 <readSteeringControls+0x3f8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
	    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Sending position ON to rear side
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	4827      	ldr	r0, [pc, #156]	@ (8001d80 <readSteeringControls+0x3f0>)
 8001ce4:	f001 fe51 	bl	800398a <HAL_GPIO_WritePin>
 8001ce8:	e02b      	b.n	8001d42 <readSteeringControls+0x3b2>
	      } else if (voltage_pa2 < 2.95 && voltage_pa2 > 2.6){
 8001cea:	4b26      	ldr	r3, [pc, #152]	@ (8001d84 <readSteeringControls+0x3f4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fb92 	bl	8000418 <__aeabi_f2d>
 8001cf4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001d68 <readSteeringControls+0x3d8>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fc45 	bl	8000588 <__aeabi_dcmplt>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d015      	beq.n	8001d30 <readSteeringControls+0x3a0>
 8001d04:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <readSteeringControls+0x3f4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fb85 	bl	8000418 <__aeabi_f2d>
 8001d0e:	a318      	add	r3, pc, #96	@ (adr r3, 8001d70 <readSteeringControls+0x3e0>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fc56 	bl	80005c4 <__aeabi_dcmpgt>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d008      	beq.n	8001d30 <readSteeringControls+0x3a0>
	    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Sending position ON to rear side
 8001d1e:	2201      	movs	r2, #1
 8001d20:	2120      	movs	r1, #32
 8001d22:	4817      	ldr	r0, [pc, #92]	@ (8001d80 <readSteeringControls+0x3f0>)
 8001d24:	f001 fe31 	bl	800398a <HAL_GPIO_WritePin>
	       	  headlamp_low_beam_signal_received = 1; // turn on low beam
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <readSteeringControls+0x3f8>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e008      	b.n	8001d42 <readSteeringControls+0x3b2>
	      }else{
	    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Sending position OFF to rear side
 8001d30:	2200      	movs	r2, #0
 8001d32:	2120      	movs	r1, #32
 8001d34:	4812      	ldr	r0, [pc, #72]	@ (8001d80 <readSteeringControls+0x3f0>)
 8001d36:	f001 fe28 	bl	800398a <HAL_GPIO_WritePin>
	       	  headlamp_low_beam_signal_received = 0; // turn off low beam
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <readSteeringControls+0x3f8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
	      }

}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	33333333 	.word	0x33333333
 8001d4c:	3ffb3333 	.word	0x3ffb3333
 8001d50:	66666666 	.word	0x66666666
 8001d54:	3ff66666 	.word	0x3ff66666
 8001d58:	9999999a 	.word	0x9999999a
 8001d5c:	40019999 	.word	0x40019999
 8001d60:	cccccccd 	.word	0xcccccccd
 8001d64:	3ffccccc 	.word	0x3ffccccc
 8001d68:	9999999a 	.word	0x9999999a
 8001d6c:	40079999 	.word	0x40079999
 8001d70:	cccccccd 	.word	0xcccccccd
 8001d74:	4004cccc 	.word	0x4004cccc
 8001d78:	200033dc 	.word	0x200033dc
 8001d7c:	200033c4 	.word	0x200033c4
 8001d80:	40010c00 	.word	0x40010c00
 8001d84:	200033d8 	.word	0x200033d8
 8001d88:	200033c0 	.word	0x200033c0

08001d8c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001d94:	2100      	movs	r1, #0
 8001d96:	4805      	ldr	r0, [pc, #20]	@ (8001dac <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001d98:	f002 fdc2 	bl	8004920 <HAL_TIM_PWM_Stop_DMA>
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 8001d9c:	2108      	movs	r1, #8
 8001d9e:	4803      	ldr	r0, [pc, #12]	@ (8001dac <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001da0:	f002 fdbe 	bl	8004920 <HAL_TIM_PWM_Stop_DMA>
//	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2); //We don't stop this PWM as this LED strip is too long and doesn't get update fast enough
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20003414 	.word	0x20003414

08001db0 <ADC_Select_CH3>:

void ADC_Select_CH3(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <ADC_Select_CH3+0x38>)
 8001dd2:	f000 ff37 	bl	8002c44 <HAL_ADC_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <ADC_Select_CH3+0x30>
	  {
	    Error_Handler();
 8001ddc:	f000 f9ae 	bl	800213c <Error_Handler>
	  }
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000038 	.word	0x20000038

08001dec <ADC_Select_CH4>:

void ADC_Select_CH4(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001e04:	2304      	movs	r3, #4
 8001e06:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	@ (8001e24 <ADC_Select_CH4+0x38>)
 8001e0e:	f000 ff19 	bl	8002c44 <HAL_ADC_ConfigChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <ADC_Select_CH4+0x30>
	  {
	    Error_Handler();
 8001e18:	f000 f990 	bl	800213c <Error_Handler>
	  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000038 	.word	0x20000038

08001e28 <ADC_Select_CH2>:

void ADC_Select_CH2(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001e40:	2305      	movs	r3, #5
 8001e42:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <ADC_Select_CH2+0x38>)
 8001e4a:	f000 fefb 	bl	8002c44 <HAL_ADC_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 8001e54:	f000 f972 	bl	800213c <Error_Handler>
	  }
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000038 	.word	0x20000038

08001e64 <Init_InputPins>:

void Init_InputPins(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6a:	f107 0308 	add.w	r3, r7, #8
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]

    // Enable clock for GPIO ports
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e78:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <Init_InputPins+0x9c>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a20      	ldr	r2, [pc, #128]	@ (8001f00 <Init_InputPins+0x9c>)
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <Init_InputPins+0x9c>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <Init_InputPins+0x9c>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a1a      	ldr	r2, [pc, #104]	@ (8001f00 <Init_InputPins+0x9c>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <Init_InputPins+0x9c>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]

    // PB12 (Horn), PB13 (Hazard), PB3 (Brake fluid): Floating if inactive, pulled down when active
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_3;
 8001ea8:	f243 0308 	movw	r3, #12296	@ 0x3008
 8001eac:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4811      	ldr	r0, [pc, #68]	@ (8001f04 <Init_InputPins+0xa0>)
 8001ebe:	f001 fbc9 	bl	8003654 <HAL_GPIO_Init>

    // PB15 (Brake) (3.3V when inactive, GND when brake switch pressed)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ec6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed0:	f107 0308 	add.w	r3, r7, #8
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480b      	ldr	r0, [pc, #44]	@ (8001f04 <Init_InputPins+0xa0>)
 8001ed8:	f001 fbbc 	bl	8003654 <HAL_GPIO_Init>

    // PA12 (Reverse): Pulled up when active
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <Init_InputPins+0xa4>)
 8001ef2:	f001 fbaf 	bl	8003654 <HAL_GPIO_Init>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010c00 	.word	0x40010c00
 8001f08:	40010800 	.word	0x40010800

08001f0c <readBrakeSwitch>:

void readBrakeSwitch(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
    // Use debounce logic with a delay of 50 ms
    uint8_t brake_pressed = DebouncePin(GPIOB, GPIO_PIN_15, 15);
 8001f12:	220f      	movs	r2, #15
 8001f14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f18:	480b      	ldr	r0, [pc, #44]	@ (8001f48 <readBrakeSwitch+0x3c>)
 8001f1a:	f000 f855 	bl	8001fc8 <DebouncePin>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]

    if (brake_pressed == GPIO_PIN_RESET) // Active Low: Brake is pressed
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d105      	bne.n	8001f34 <readBrakeSwitch+0x28>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // Set PB4
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	4806      	ldr	r0, [pc, #24]	@ (8001f48 <readBrakeSwitch+0x3c>)
 8001f2e:	f001 fd2c 	bl	800398a <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // Reset PB4
    }
}
 8001f32:	e004      	b.n	8001f3e <readBrakeSwitch+0x32>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // Reset PB4
 8001f34:	2200      	movs	r2, #0
 8001f36:	2110      	movs	r1, #16
 8001f38:	4803      	ldr	r0, [pc, #12]	@ (8001f48 <readBrakeSwitch+0x3c>)
 8001f3a:	f001 fd26 	bl	800398a <HAL_GPIO_WritePin>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40010c00 	.word	0x40010c00

08001f4c <readHorn>:

void readHorn(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
    // Use debounce logic with a delay of 50 ms
    uint8_t horn_active = DebouncePin(GPIOB, GPIO_PIN_12, 15);
 8001f52:	220f      	movs	r2, #15
 8001f54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f58:	4809      	ldr	r0, [pc, #36]	@ (8001f80 <readHorn+0x34>)
 8001f5a:	f000 f835 	bl	8001fc8 <DebouncePin>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]

    if (horn_active == GPIO_PIN_RESET) // Active Low: Horn is pressed
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d103      	bne.n	8001f70 <readHorn+0x24>
    {
        horn_signal_received = 1; // Set horn signal flag
 8001f68:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <readHorn+0x38>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        horn_signal_received = 0; // Reset horn signal flag
    }
}
 8001f6e:	e002      	b.n	8001f76 <readHorn+0x2a>
        horn_signal_received = 0; // Reset horn signal flag
 8001f70:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <readHorn+0x38>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40010c00 	.word	0x40010c00
 8001f84:	200033bc 	.word	0x200033bc

08001f88 <readReverseGear>:

void readReverseGear(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
    uint8_t reverse_active = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12); // No debounce needed
 8001f8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f92:	480b      	ldr	r0, [pc, #44]	@ (8001fc0 <readReverseGear+0x38>)
 8001f94:	f001 fce2 	bl	800395c <HAL_GPIO_ReadPin>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	71fb      	strb	r3, [r7, #7]

    if (reverse_active == GPIO_PIN_SET) // Active High: Reverse is engaged
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <readReverseGear+0x26>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Set PB6
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2140      	movs	r1, #64	@ 0x40
 8001fa6:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <readReverseGear+0x3c>)
 8001fa8:	f001 fcef 	bl	800398a <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Reset PB6
    }
}
 8001fac:	e004      	b.n	8001fb8 <readReverseGear+0x30>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Reset PB6
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2140      	movs	r1, #64	@ 0x40
 8001fb2:	4804      	ldr	r0, [pc, #16]	@ (8001fc4 <readReverseGear+0x3c>)
 8001fb4:	f001 fce9 	bl	800398a <HAL_GPIO_WritePin>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40010800 	.word	0x40010800
 8001fc4:	40010c00 	.word	0x40010c00

08001fc8 <DebouncePin>:

uint8_t DebouncePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t debounce_delay)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	817b      	strh	r3, [r7, #10]
    static uint32_t last_tick = 0;
    static uint8_t stable_state = 0; // Final stable state of the pin
    static uint8_t counter = 0;     // Counter for consistent reads

    uint8_t current_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8001fd6:	897b      	ldrh	r3, [r7, #10]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f001 fcbe 	bl	800395c <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	75fb      	strb	r3, [r7, #23]

    if (current_state == stable_state) {
 8001fe4:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <DebouncePin+0x78>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	7dfa      	ldrb	r2, [r7, #23]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d103      	bne.n	8001ff6 <DebouncePin+0x2e>
        counter = 0; // Reset counter if the state matches the stable state
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <DebouncePin+0x7c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	e01d      	b.n	8002032 <DebouncePin+0x6a>
    } else {
        if (HAL_GetTick() - last_tick >= debounce_delay) {
 8001ff6:	f000 fb33 	bl	8002660 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <DebouncePin+0x80>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	d80a      	bhi.n	800201e <DebouncePin+0x56>
            counter++;
 8002008:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <DebouncePin+0x7c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <DebouncePin+0x7c>)
 8002012:	701a      	strb	r2, [r3, #0]
            last_tick = HAL_GetTick(); // Update last tick only on a state mismatch
 8002014:	f000 fb24 	bl	8002660 <HAL_GetTick>
 8002018:	4603      	mov	r3, r0
 800201a:	4a0b      	ldr	r2, [pc, #44]	@ (8002048 <DebouncePin+0x80>)
 800201c:	6013      	str	r3, [r2, #0]
        }

        if (counter >= 3) { // Require three consistent reads
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <DebouncePin+0x7c>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d905      	bls.n	8002032 <DebouncePin+0x6a>
            stable_state = current_state;
 8002026:	4a06      	ldr	r2, [pc, #24]	@ (8002040 <DebouncePin+0x78>)
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	7013      	strb	r3, [r2, #0]
            counter = 0; // Reset counter after updating the stable state
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <DebouncePin+0x7c>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
        }
    }

    return stable_state;
 8002032:	4b03      	ldr	r3, [pc, #12]	@ (8002040 <DebouncePin+0x78>)
 8002034:	781b      	ldrb	r3, [r3, #0]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20003405 	.word	0x20003405
 8002044:	20003406 	.word	0x20003406
 8002048:	20003408 	.word	0x20003408

0800204c <Handle_TestMode>:

#ifdef TEST_MODE
void Handle_TestMode(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
    static int test_state = 0;
    static uint32_t last_state_change_time = 0;
    uint32_t current_time = HAL_GetTick();
 8002052:	f000 fb05 	bl	8002660 <HAL_GetTick>
 8002056:	6078      	str	r0, [r7, #4]

    // Transition to the next state every 14 seconds
    if (current_time - last_state_change_time >= 14000) {
 8002058:	4b2d      	ldr	r3, [pc, #180]	@ (8002110 <Handle_TestMode+0xc4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	f243 62af 	movw	r2, #13999	@ 0x36af
 8002064:	4293      	cmp	r3, r2
 8002066:	d94f      	bls.n	8002108 <Handle_TestMode+0xbc>
        // Reset all flags to 0
        charging_signal_received = 0;
 8002068:	4b2a      	ldr	r3, [pc, #168]	@ (8002114 <Handle_TestMode+0xc8>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
        drl_signal_received = 0;
 800206e:	4b2a      	ldr	r3, [pc, #168]	@ (8002118 <Handle_TestMode+0xcc>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
        hazard_signal_received = 0;
 8002074:	4b29      	ldr	r3, [pc, #164]	@ (800211c <Handle_TestMode+0xd0>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
        turn_signal_left_received = 0;
 800207a:	4b29      	ldr	r3, [pc, #164]	@ (8002120 <Handle_TestMode+0xd4>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
        turn_signal_right_received = 0;
 8002080:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <Handle_TestMode+0xd8>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
        horn_signal_received = 0;
 8002086:	4b28      	ldr	r3, [pc, #160]	@ (8002128 <Handle_TestMode+0xdc>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
        headlamp_low_beam_signal_received = 0;
 800208c:	4b27      	ldr	r3, [pc, #156]	@ (800212c <Handle_TestMode+0xe0>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
        headlamp_high_beam_signal_received = 0;
 8002092:	4b27      	ldr	r3, [pc, #156]	@ (8002130 <Handle_TestMode+0xe4>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
        breathing_signal_received = 0;
 8002098:	4b26      	ldr	r3, [pc, #152]	@ (8002134 <Handle_TestMode+0xe8>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

        // Test mode states
        switch (test_state) {
 800209e:	4b26      	ldr	r3, [pc, #152]	@ (8002138 <Handle_TestMode+0xec>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d823      	bhi.n	80020ee <Handle_TestMode+0xa2>
 80020a6:	a201      	add	r2, pc, #4	@ (adr r2, 80020ac <Handle_TestMode+0x60>)
 80020a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ac:	080020bd 	.word	0x080020bd
 80020b0:	080020c5 	.word	0x080020c5
 80020b4:	080020d9 	.word	0x080020d9
 80020b8:	080020e7 	.word	0x080020e7
            case 0:
                // Startup mode for all
                breathing_signal_received = 1; // Enable startup mode initially
 80020bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002134 <Handle_TestMode+0xe8>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
                break;
 80020c2:	e019      	b.n	80020f8 <Handle_TestMode+0xac>
            case 1:
                // Turn signals for side strips, DRL for middle strip
                turn_signal_left_received = 1;
 80020c4:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <Handle_TestMode+0xd4>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]
                turn_signal_right_received = 1;
 80020ca:	4b16      	ldr	r3, [pc, #88]	@ (8002124 <Handle_TestMode+0xd8>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
                drl_signal_received = 1;
 80020d0:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <Handle_TestMode+0xcc>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
                break;
 80020d6:	e00f      	b.n	80020f8 <Handle_TestMode+0xac>
            case 2:
                // SOC charging for middle, hazard for side strips
                charging_signal_received = 1;
 80020d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <Handle_TestMode+0xc8>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
                hazard_signal_received = 1;
 80020de:	4b0f      	ldr	r3, [pc, #60]	@ (800211c <Handle_TestMode+0xd0>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
                break;
 80020e4:	e008      	b.n	80020f8 <Handle_TestMode+0xac>
            case 3:
                // All in DRL mode
                drl_signal_received = 1;
 80020e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <Handle_TestMode+0xcc>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
                break;
 80020ec:	e004      	b.n	80020f8 <Handle_TestMode+0xac>
            default:
                // Reset the test state after the last one
                test_state = -1;
 80020ee:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <Handle_TestMode+0xec>)
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	601a      	str	r2, [r3, #0]
                break;
 80020f6:	bf00      	nop
        }

        // Move to the next test state
        test_state++;
 80020f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <Handle_TestMode+0xec>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002138 <Handle_TestMode+0xec>)
 8002100:	6013      	str	r3, [r2, #0]
        last_state_change_time = current_time;
 8002102:	4a03      	ldr	r2, [pc, #12]	@ (8002110 <Handle_TestMode+0xc4>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6013      	str	r3, [r2, #0]
    }
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000340c 	.word	0x2000340c
 8002114:	200033a8 	.word	0x200033a8
 8002118:	200033ac 	.word	0x200033ac
 800211c:	200033b0 	.word	0x200033b0
 8002120:	200033b4 	.word	0x200033b4
 8002124:	200033b8 	.word	0x200033b8
 8002128:	200033bc 	.word	0x200033bc
 800212c:	200033c0 	.word	0x200033c0
 8002130:	200033c4 	.word	0x200033c4
 8002134:	200033c8 	.word	0x200033c8
 8002138:	20003410 	.word	0x20003410

0800213c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <Error_Handler+0x8>

08002148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6193      	str	r3, [r2, #24]
 800215a:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_MspInit+0x5c>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4a0e      	ldr	r2, [pc, #56]	@ (80021a4 <HAL_MspInit+0x5c>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002170:	61d3      	str	r3, [r2, #28]
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800217e:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <HAL_MspInit+0x60>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <HAL_MspInit+0x60>)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010000 	.word	0x40010000

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <NMI_Handler+0x4>

080021b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <MemManage_Handler+0x4>

080021c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <BusFault_Handler+0x4>

080021cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <UsageFault_Handler+0x4>

080021d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fc:	f000 fa1e 	bl	800263c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002208:	4802      	ldr	r0, [pc, #8]	@ (8002214 <DMA1_Channel2_IRQHandler+0x10>)
 800220a:	f001 f8ef 	bl	80033ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2000345c 	.word	0x2000345c

08002218 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800221c:	4802      	ldr	r0, [pc, #8]	@ (8002228 <DMA1_Channel3_IRQHandler+0x10>)
 800221e:	f001 f8e5 	bl	80033ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200034a0 	.word	0x200034a0

0800222c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8002230:	4802      	ldr	r0, [pc, #8]	@ (800223c <DMA1_Channel6_IRQHandler+0x10>)
 8002232:	f001 f8db 	bl	80033ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200034e4 	.word	0x200034e4

08002240 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch2;
DMA_HandleTypeDef hdma_tim1_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b096      	sub	sp, #88	@ 0x58
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002252:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002260:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800226a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]
 800227a:	615a      	str	r2, [r3, #20]
 800227c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	2220      	movs	r2, #32
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fc7e 	bl	8005b86 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800228a:	4b4a      	ldr	r3, [pc, #296]	@ (80023b4 <MX_TIM1_Init+0x168>)
 800228c:	4a4a      	ldr	r2, [pc, #296]	@ (80023b8 <MX_TIM1_Init+0x16c>)
 800228e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002290:	4b48      	ldr	r3, [pc, #288]	@ (80023b4 <MX_TIM1_Init+0x168>)
 8002292:	2200      	movs	r2, #0
 8002294:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002296:	4b47      	ldr	r3, [pc, #284]	@ (80023b4 <MX_TIM1_Init+0x168>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800229c:	4b45      	ldr	r3, [pc, #276]	@ (80023b4 <MX_TIM1_Init+0x168>)
 800229e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a4:	4b43      	ldr	r3, [pc, #268]	@ (80023b4 <MX_TIM1_Init+0x168>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022aa:	4b42      	ldr	r3, [pc, #264]	@ (80023b4 <MX_TIM1_Init+0x168>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b0:	4b40      	ldr	r3, [pc, #256]	@ (80023b4 <MX_TIM1_Init+0x168>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022b6:	483f      	ldr	r0, [pc, #252]	@ (80023b4 <MX_TIM1_Init+0x168>)
 80022b8:	f002 f8e8 	bl	800448c <HAL_TIM_Base_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80022c2:	f7ff ff3b 	bl	800213c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80022d0:	4619      	mov	r1, r3
 80022d2:	4838      	ldr	r0, [pc, #224]	@ (80023b4 <MX_TIM1_Init+0x168>)
 80022d4:	f002 fcac 	bl	8004c30 <HAL_TIM_ConfigClockSource>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022de:	f7ff ff2d 	bl	800213c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022e2:	4834      	ldr	r0, [pc, #208]	@ (80023b4 <MX_TIM1_Init+0x168>)
 80022e4:	f002 f921 	bl	800452a <HAL_TIM_PWM_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80022ee:	f7ff ff25 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022fe:	4619      	mov	r1, r3
 8002300:	482c      	ldr	r0, [pc, #176]	@ (80023b4 <MX_TIM1_Init+0x168>)
 8002302:	f003 f8ef 	bl	80054e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800230c:	f7ff ff16 	bl	800213c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002310:	2360      	movs	r3, #96	@ 0x60
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002318:	2300      	movs	r3, #0
 800231a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800231c:	2300      	movs	r3, #0
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002328:	2300      	movs	r3, #0
 800232a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800232c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002330:	2200      	movs	r2, #0
 8002332:	4619      	mov	r1, r3
 8002334:	481f      	ldr	r0, [pc, #124]	@ (80023b4 <MX_TIM1_Init+0x168>)
 8002336:	f002 fbb9 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002340:	f7ff fefc 	bl	800213c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002348:	2204      	movs	r2, #4
 800234a:	4619      	mov	r1, r3
 800234c:	4819      	ldr	r0, [pc, #100]	@ (80023b4 <MX_TIM1_Init+0x168>)
 800234e:	f002 fbad 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002358:	f7ff fef0 	bl	800213c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800235c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002360:	2208      	movs	r2, #8
 8002362:	4619      	mov	r1, r3
 8002364:	4813      	ldr	r0, [pc, #76]	@ (80023b4 <MX_TIM1_Init+0x168>)
 8002366:	f002 fba1 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002370:	f7ff fee4 	bl	800213c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002388:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800238c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	4619      	mov	r1, r3
 8002396:	4807      	ldr	r0, [pc, #28]	@ (80023b4 <MX_TIM1_Init+0x168>)
 8002398:	f003 f902 	bl	80055a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80023a2:	f7ff fecb 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023a6:	4803      	ldr	r0, [pc, #12]	@ (80023b4 <MX_TIM1_Init+0x168>)
 80023a8:	f000 f8a8 	bl	80024fc <HAL_TIM_MspPostInit>

}
 80023ac:	bf00      	nop
 80023ae:	3758      	adds	r7, #88	@ 0x58
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20003414 	.word	0x20003414
 80023b8:	40012c00 	.word	0x40012c00

080023bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a44      	ldr	r2, [pc, #272]	@ (80024dc <HAL_TIM_Base_MspInit+0x120>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	f040 8081 	bne.w	80024d2 <HAL_TIM_Base_MspInit+0x116>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023d0:	4b43      	ldr	r3, [pc, #268]	@ (80024e0 <HAL_TIM_Base_MspInit+0x124>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a42      	ldr	r2, [pc, #264]	@ (80024e0 <HAL_TIM_Base_MspInit+0x124>)
 80023d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b40      	ldr	r3, [pc, #256]	@ (80024e0 <HAL_TIM_Base_MspInit+0x124>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80023e8:	4b3e      	ldr	r3, [pc, #248]	@ (80024e4 <HAL_TIM_Base_MspInit+0x128>)
 80023ea:	4a3f      	ldr	r2, [pc, #252]	@ (80024e8 <HAL_TIM_Base_MspInit+0x12c>)
 80023ec:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ee:	4b3d      	ldr	r3, [pc, #244]	@ (80024e4 <HAL_TIM_Base_MspInit+0x128>)
 80023f0:	2210      	movs	r2, #16
 80023f2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f4:	4b3b      	ldr	r3, [pc, #236]	@ (80024e4 <HAL_TIM_Base_MspInit+0x128>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80023fa:	4b3a      	ldr	r3, [pc, #232]	@ (80024e4 <HAL_TIM_Base_MspInit+0x128>)
 80023fc:	2280      	movs	r2, #128	@ 0x80
 80023fe:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002400:	4b38      	ldr	r3, [pc, #224]	@ (80024e4 <HAL_TIM_Base_MspInit+0x128>)
 8002402:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002406:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002408:	4b36      	ldr	r3, [pc, #216]	@ (80024e4 <HAL_TIM_Base_MspInit+0x128>)
 800240a:	2200      	movs	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800240e:	4b35      	ldr	r3, [pc, #212]	@ (80024e4 <HAL_TIM_Base_MspInit+0x128>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002414:	4b33      	ldr	r3, [pc, #204]	@ (80024e4 <HAL_TIM_Base_MspInit+0x128>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800241a:	4832      	ldr	r0, [pc, #200]	@ (80024e4 <HAL_TIM_Base_MspInit+0x128>)
 800241c:	f000 feb4 	bl	8003188 <HAL_DMA_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8002426:	f7ff fe89 	bl	800213c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a2d      	ldr	r2, [pc, #180]	@ (80024e4 <HAL_TIM_Base_MspInit+0x128>)
 800242e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002430:	4a2c      	ldr	r2, [pc, #176]	@ (80024e4 <HAL_TIM_Base_MspInit+0x128>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8002436:	4b2d      	ldr	r3, [pc, #180]	@ (80024ec <HAL_TIM_Base_MspInit+0x130>)
 8002438:	4a2d      	ldr	r2, [pc, #180]	@ (80024f0 <HAL_TIM_Base_MspInit+0x134>)
 800243a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800243c:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <HAL_TIM_Base_MspInit+0x130>)
 800243e:	2210      	movs	r2, #16
 8002440:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002442:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <HAL_TIM_Base_MspInit+0x130>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002448:	4b28      	ldr	r3, [pc, #160]	@ (80024ec <HAL_TIM_Base_MspInit+0x130>)
 800244a:	2280      	movs	r2, #128	@ 0x80
 800244c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800244e:	4b27      	ldr	r3, [pc, #156]	@ (80024ec <HAL_TIM_Base_MspInit+0x130>)
 8002450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002454:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002456:	4b25      	ldr	r3, [pc, #148]	@ (80024ec <HAL_TIM_Base_MspInit+0x130>)
 8002458:	2200      	movs	r2, #0
 800245a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800245c:	4b23      	ldr	r3, [pc, #140]	@ (80024ec <HAL_TIM_Base_MspInit+0x130>)
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002462:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <HAL_TIM_Base_MspInit+0x130>)
 8002464:	2200      	movs	r2, #0
 8002466:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002468:	4820      	ldr	r0, [pc, #128]	@ (80024ec <HAL_TIM_Base_MspInit+0x130>)
 800246a:	f000 fe8d 	bl	8003188 <HAL_DMA_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_TIM_Base_MspInit+0xbc>
    {
      Error_Handler();
 8002474:	f7ff fe62 	bl	800213c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a1c      	ldr	r2, [pc, #112]	@ (80024ec <HAL_TIM_Base_MspInit+0x130>)
 800247c:	629a      	str	r2, [r3, #40]	@ 0x28
 800247e:	4a1b      	ldr	r2, [pc, #108]	@ (80024ec <HAL_TIM_Base_MspInit+0x130>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 8002484:	4b1b      	ldr	r3, [pc, #108]	@ (80024f4 <HAL_TIM_Base_MspInit+0x138>)
 8002486:	4a1c      	ldr	r2, [pc, #112]	@ (80024f8 <HAL_TIM_Base_MspInit+0x13c>)
 8002488:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800248a:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <HAL_TIM_Base_MspInit+0x138>)
 800248c:	2210      	movs	r2, #16
 800248e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002490:	4b18      	ldr	r3, [pc, #96]	@ (80024f4 <HAL_TIM_Base_MspInit+0x138>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002496:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <HAL_TIM_Base_MspInit+0x138>)
 8002498:	2280      	movs	r2, #128	@ 0x80
 800249a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800249c:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <HAL_TIM_Base_MspInit+0x138>)
 800249e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024a2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024a4:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <HAL_TIM_Base_MspInit+0x138>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 80024aa:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <HAL_TIM_Base_MspInit+0x138>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80024b0:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_TIM_Base_MspInit+0x138>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80024b6:	480f      	ldr	r0, [pc, #60]	@ (80024f4 <HAL_TIM_Base_MspInit+0x138>)
 80024b8:	f000 fe66 	bl	8003188 <HAL_DMA_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_TIM_Base_MspInit+0x10a>
    {
      Error_Handler();
 80024c2:	f7ff fe3b 	bl	800213c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <HAL_TIM_Base_MspInit+0x138>)
 80024ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024cc:	4a09      	ldr	r2, [pc, #36]	@ (80024f4 <HAL_TIM_Base_MspInit+0x138>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40021000 	.word	0x40021000
 80024e4:	2000345c 	.word	0x2000345c
 80024e8:	4002001c 	.word	0x4002001c
 80024ec:	200034a0 	.word	0x200034a0
 80024f0:	40020030 	.word	0x40020030
 80024f4:	200034e4 	.word	0x200034e4
 80024f8:	4002006c 	.word	0x4002006c

080024fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a10      	ldr	r2, [pc, #64]	@ (8002558 <HAL_TIM_MspPostInit+0x5c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d118      	bne.n	800254e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <HAL_TIM_MspPostInit+0x60>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <HAL_TIM_MspPostInit+0x60>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <HAL_TIM_MspPostInit+0x60>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002534:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002538:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2302      	movs	r3, #2
 8002540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 0310 	add.w	r3, r7, #16
 8002546:	4619      	mov	r1, r3
 8002548:	4805      	ldr	r0, [pc, #20]	@ (8002560 <HAL_TIM_MspPostInit+0x64>)
 800254a:	f001 f883 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800254e:	bf00      	nop
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40021000 	.word	0x40021000
 8002560:	40010800 	.word	0x40010800

08002564 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002564:	f7ff fe6c 	bl	8002240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002568:	480b      	ldr	r0, [pc, #44]	@ (8002598 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800256a:	490c      	ldr	r1, [pc, #48]	@ (800259c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800256c:	4a0c      	ldr	r2, [pc, #48]	@ (80025a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a09      	ldr	r2, [pc, #36]	@ (80025a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002580:	4c09      	ldr	r4, [pc, #36]	@ (80025a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800258e:	f003 fb03 	bl	8005b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002592:	f7fe fb77 	bl	8000c84 <main>
  bx lr
 8002596:	4770      	bx	lr
  ldr r0, =_sdata
 8002598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800259c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80025a0:	08005d40 	.word	0x08005d40
  ldr r2, =_sbss
 80025a4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80025a8:	2000352c 	.word	0x2000352c

080025ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025ac:	e7fe      	b.n	80025ac <ADC1_2_IRQHandler>
	...

080025b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b4:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <HAL_Init+0x28>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a07      	ldr	r2, [pc, #28]	@ (80025d8 <HAL_Init+0x28>)
 80025ba:	f043 0310 	orr.w	r3, r3, #16
 80025be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f000 fd9f 	bl	8003104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c6:	200f      	movs	r0, #15
 80025c8:	f000 f808 	bl	80025dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025cc:	f7ff fdbc 	bl	8002148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000

080025dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e4:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_InitTick+0x54>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <HAL_InitTick+0x58>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fdb7 	bl	800316e <HAL_SYSTICK_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e00e      	b.n	8002628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d80a      	bhi.n	8002626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002610:	2200      	movs	r2, #0
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f000 fd7f 	bl	800311a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800261c:	4a06      	ldr	r2, [pc, #24]	@ (8002638 <HAL_InitTick+0x5c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000010 	.word	0x20000010
 8002634:	20000018 	.word	0x20000018
 8002638:	20000014 	.word	0x20000014

0800263c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002640:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <HAL_IncTick+0x1c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_IncTick+0x20>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a03      	ldr	r2, [pc, #12]	@ (800265c <HAL_IncTick+0x20>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	20000018 	.word	0x20000018
 800265c:	20003528 	.word	0x20003528

08002660 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return uwTick;
 8002664:	4b02      	ldr	r3, [pc, #8]	@ (8002670 <HAL_GetTick+0x10>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	20003528 	.word	0x20003528

08002674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800267c:	f7ff fff0 	bl	8002660 <HAL_GetTick>
 8002680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d005      	beq.n	800269a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800268e:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <HAL_Delay+0x44>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800269a:	bf00      	nop
 800269c:	f7ff ffe0 	bl	8002660 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d8f7      	bhi.n	800269c <HAL_Delay+0x28>
  {
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000018 	.word	0x20000018

080026bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e0be      	b.n	800285c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe fa42 	bl	8000b84 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fbf1 	bl	8002ee8 <ADC_ConversionStop_Disable>
 8002706:	4603      	mov	r3, r0
 8002708:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	f040 8099 	bne.w	800284a <HAL_ADC_Init+0x18e>
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 8095 	bne.w	800284a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002728:	f023 0302 	bic.w	r3, r3, #2
 800272c:	f043 0202 	orr.w	r2, r3, #2
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800273c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	7b1b      	ldrb	r3, [r3, #12]
 8002742:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002744:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	4313      	orrs	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002754:	d003      	beq.n	800275e <HAL_ADC_Init+0xa2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d102      	bne.n	8002764 <HAL_ADC_Init+0xa8>
 800275e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002762:	e000      	b.n	8002766 <HAL_ADC_Init+0xaa>
 8002764:	2300      	movs	r3, #0
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7d1b      	ldrb	r3, [r3, #20]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d119      	bne.n	80027a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7b1b      	ldrb	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	3b01      	subs	r3, #1
 8002782:	035a      	lsls	r2, r3, #13
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	e00b      	b.n	80027a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	4b28      	ldr	r3, [pc, #160]	@ (8002864 <HAL_ADC_Init+0x1a8>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027d8:	d003      	beq.n	80027e2 <HAL_ADC_Init+0x126>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d104      	bne.n	80027ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	051b      	lsls	r3, r3, #20
 80027ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	4b18      	ldr	r3, [pc, #96]	@ (8002868 <HAL_ADC_Init+0x1ac>)
 8002808:	4013      	ands	r3, r2
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	429a      	cmp	r2, r3
 800280e:	d10b      	bne.n	8002828 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281a:	f023 0303 	bic.w	r3, r3, #3
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002826:	e018      	b.n	800285a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282c:	f023 0312 	bic.w	r3, r3, #18
 8002830:	f043 0210 	orr.w	r2, r3, #16
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002848:	e007      	b.n	800285a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	f043 0210 	orr.w	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800285a:	7dfb      	ldrb	r3, [r7, #23]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	ffe1f7fd 	.word	0xffe1f7fd
 8002868:	ff1f0efe 	.word	0xff1f0efe

0800286c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_ADC_Start+0x1a>
 8002882:	2302      	movs	r3, #2
 8002884:	e098      	b.n	80029b8 <HAL_ADC_Start+0x14c>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fad0 	bl	8002e34 <ADC_Enable>
 8002894:	4603      	mov	r3, r0
 8002896:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 8087 	bne.w	80029ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a41      	ldr	r2, [pc, #260]	@ (80029c0 <HAL_ADC_Start+0x154>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d105      	bne.n	80028ca <HAL_ADC_Start+0x5e>
 80028be:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <HAL_ADC_Start+0x158>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d115      	bne.n	80028f6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d026      	beq.n	8002932 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028f4:	e01d      	b.n	8002932 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2f      	ldr	r2, [pc, #188]	@ (80029c4 <HAL_ADC_Start+0x158>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <HAL_ADC_Start+0xaa>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2b      	ldr	r2, [pc, #172]	@ (80029c0 <HAL_ADC_Start+0x154>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d10d      	bne.n	8002932 <HAL_ADC_Start+0xc6>
 8002916:	4b2b      	ldr	r3, [pc, #172]	@ (80029c4 <HAL_ADC_Start+0x158>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800292a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002936:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d006      	beq.n	800294c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	f023 0206 	bic.w	r2, r3, #6
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	62da      	str	r2, [r3, #44]	@ 0x2c
 800294a:	e002      	b.n	8002952 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f06f 0202 	mvn.w	r2, #2
 8002962:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800296e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002972:	d113      	bne.n	800299c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002978:	4a11      	ldr	r2, [pc, #68]	@ (80029c0 <HAL_ADC_Start+0x154>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d105      	bne.n	800298a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800297e:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <HAL_ADC_Start+0x158>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002986:	2b00      	cmp	r3, #0
 8002988:	d108      	bne.n	800299c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	e00c      	b.n	80029b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	e003      	b.n	80029b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40012800 	.word	0x40012800
 80029c4:	40012400 	.word	0x40012400

080029c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_ADC_Stop+0x1a>
 80029de:	2302      	movs	r3, #2
 80029e0:	e01a      	b.n	8002a18 <HAL_ADC_Stop+0x50>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fa7c 	bl	8002ee8 <ADC_ConversionStop_Disable>
 80029f0:	4603      	mov	r3, r0
 80029f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a36:	f7ff fe13 	bl	8002660 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0d3      	b.n	8002c0a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d131      	bne.n	8002ad4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a76:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d12a      	bne.n	8002ad4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a7e:	e021      	b.n	8002ac4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d01d      	beq.n	8002ac4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <HAL_ADC_PollForConversion+0x7e>
 8002a8e:	f7ff fde7 	bl	8002660 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d212      	bcs.n	8002ac4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	f043 0204 	orr.w	r2, r3, #4
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e0a2      	b.n	8002c0a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0d6      	beq.n	8002a80 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ad2:	e070      	b.n	8002bb6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8002c14 <HAL_ADC_PollForConversion+0x1f4>)
 8002ad6:	681c      	ldr	r4, [r3, #0]
 8002ad8:	2002      	movs	r0, #2
 8002ada:	f001 fc21 	bl	8004320 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6919      	ldr	r1, [r3, #16]
 8002aea:	4b4b      	ldr	r3, [pc, #300]	@ (8002c18 <HAL_ADC_PollForConversion+0x1f8>)
 8002aec:	400b      	ands	r3, r1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d118      	bne.n	8002b24 <HAL_ADC_PollForConversion+0x104>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68d9      	ldr	r1, [r3, #12]
 8002af8:	4b48      	ldr	r3, [pc, #288]	@ (8002c1c <HAL_ADC_PollForConversion+0x1fc>)
 8002afa:	400b      	ands	r3, r1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d111      	bne.n	8002b24 <HAL_ADC_PollForConversion+0x104>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6919      	ldr	r1, [r3, #16]
 8002b06:	4b46      	ldr	r3, [pc, #280]	@ (8002c20 <HAL_ADC_PollForConversion+0x200>)
 8002b08:	400b      	ands	r3, r1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d108      	bne.n	8002b20 <HAL_ADC_PollForConversion+0x100>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68d9      	ldr	r1, [r3, #12]
 8002b14:	4b43      	ldr	r3, [pc, #268]	@ (8002c24 <HAL_ADC_PollForConversion+0x204>)
 8002b16:	400b      	ands	r3, r1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADC_PollForConversion+0x100>
 8002b1c:	2314      	movs	r3, #20
 8002b1e:	e020      	b.n	8002b62 <HAL_ADC_PollForConversion+0x142>
 8002b20:	2329      	movs	r3, #41	@ 0x29
 8002b22:	e01e      	b.n	8002b62 <HAL_ADC_PollForConversion+0x142>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6919      	ldr	r1, [r3, #16]
 8002b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c20 <HAL_ADC_PollForConversion+0x200>)
 8002b2c:	400b      	ands	r3, r1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_ADC_PollForConversion+0x120>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68d9      	ldr	r1, [r3, #12]
 8002b38:	4b3a      	ldr	r3, [pc, #232]	@ (8002c24 <HAL_ADC_PollForConversion+0x204>)
 8002b3a:	400b      	ands	r3, r1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00d      	beq.n	8002b5c <HAL_ADC_PollForConversion+0x13c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6919      	ldr	r1, [r3, #16]
 8002b46:	4b38      	ldr	r3, [pc, #224]	@ (8002c28 <HAL_ADC_PollForConversion+0x208>)
 8002b48:	400b      	ands	r3, r1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d108      	bne.n	8002b60 <HAL_ADC_PollForConversion+0x140>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68d9      	ldr	r1, [r3, #12]
 8002b54:	4b34      	ldr	r3, [pc, #208]	@ (8002c28 <HAL_ADC_PollForConversion+0x208>)
 8002b56:	400b      	ands	r3, r1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_PollForConversion+0x140>
 8002b5c:	2354      	movs	r3, #84	@ 0x54
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_PollForConversion+0x142>
 8002b60:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002b68:	e021      	b.n	8002bae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d01a      	beq.n	8002ba8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <HAL_ADC_PollForConversion+0x168>
 8002b78:	f7ff fd72 	bl	8002660 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d20f      	bcs.n	8002ba8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d90b      	bls.n	8002ba8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	f043 0204 	orr.w	r2, r3, #4
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e030      	b.n	8002c0a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3301      	adds	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d8d9      	bhi.n	8002b6a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f06f 0212 	mvn.w	r2, #18
 8002bbe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002bd6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002bda:	d115      	bne.n	8002c08 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d111      	bne.n	8002c08 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	f043 0201 	orr.w	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd90      	pop	{r4, r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000010 	.word	0x20000010
 8002c18:	24924924 	.word	0x24924924
 8002c1c:	00924924 	.word	0x00924924
 8002c20:	12492492 	.word	0x12492492
 8002c24:	00492492 	.word	0x00492492
 8002c28:	00249249 	.word	0x00249249

08002c2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x20>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e0dc      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x1da>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b06      	cmp	r3, #6
 8002c72:	d81c      	bhi.n	8002cae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	3b05      	subs	r3, #5
 8002c86:	221f      	movs	r2, #31
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	4019      	ands	r1, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3b05      	subs	r3, #5
 8002ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cac:	e03c      	b.n	8002d28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d81c      	bhi.n	8002cf0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3b23      	subs	r3, #35	@ 0x23
 8002cc8:	221f      	movs	r2, #31
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	4019      	ands	r1, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	3b23      	subs	r3, #35	@ 0x23
 8002ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cee:	e01b      	b.n	8002d28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b41      	subs	r3, #65	@ 0x41
 8002d02:	221f      	movs	r2, #31
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	4019      	ands	r1, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	3b41      	subs	r3, #65	@ 0x41
 8002d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b09      	cmp	r3, #9
 8002d2e:	d91c      	bls.n	8002d6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68d9      	ldr	r1, [r3, #12]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	3b1e      	subs	r3, #30
 8002d42:	2207      	movs	r2, #7
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	4019      	ands	r1, r3
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	6898      	ldr	r0, [r3, #8]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	3b1e      	subs	r3, #30
 8002d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	60da      	str	r2, [r3, #12]
 8002d68:	e019      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6919      	ldr	r1, [r3, #16]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	4019      	ands	r1, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6898      	ldr	r0, [r3, #8]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	fa00 f203 	lsl.w	r2, r0, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d003      	beq.n	8002dae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002daa:	2b11      	cmp	r3, #17
 8002dac:	d132      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e28 <HAL_ADC_ConfigChannel+0x1e4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d125      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d126      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002dd4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d11a      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dde:	4b13      	ldr	r3, [pc, #76]	@ (8002e2c <HAL_ADC_ConfigChannel+0x1e8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a13      	ldr	r2, [pc, #76]	@ (8002e30 <HAL_ADC_ConfigChannel+0x1ec>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	0c9a      	lsrs	r2, r3, #18
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002df4:	e002      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f9      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x1b2>
 8002e02:	e007      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr
 8002e28:	40012400 	.word	0x40012400
 8002e2c:	20000010 	.word	0x20000010
 8002e30:	431bde83 	.word	0x431bde83

08002e34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d040      	beq.n	8002ed4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e62:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee0 <ADC_Enable+0xac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee4 <ADC_Enable+0xb0>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	0c9b      	lsrs	r3, r3, #18
 8002e6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e70:	e002      	b.n	8002e78 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f9      	bne.n	8002e72 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e7e:	f7ff fbef 	bl	8002660 <HAL_GetTick>
 8002e82:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e84:	e01f      	b.n	8002ec6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e86:	f7ff fbeb 	bl	8002660 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d918      	bls.n	8002ec6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d011      	beq.n	8002ec6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea6:	f043 0210 	orr.w	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	f043 0201 	orr.w	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e007      	b.n	8002ed6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d1d8      	bne.n	8002e86 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000010 	.word	0x20000010
 8002ee4:	431bde83 	.word	0x431bde83

08002ee8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d12e      	bne.n	8002f60 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f12:	f7ff fba5 	bl	8002660 <HAL_GetTick>
 8002f16:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f18:	e01b      	b.n	8002f52 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f1a:	f7ff fba1 	bl	8002660 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d914      	bls.n	8002f52 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10d      	bne.n	8002f52 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3a:	f043 0210 	orr.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f46:	f043 0201 	orr.w	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e007      	b.n	8002f62 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d0dc      	beq.n	8002f1a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9e:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	60d3      	str	r3, [r2, #12]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb8:	4b04      	ldr	r3, [pc, #16]	@ (8002fcc <__NVIC_GetPriorityGrouping+0x18>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 0307 	and.w	r3, r3, #7
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	db0b      	blt.n	8002ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	f003 021f 	and.w	r2, r3, #31
 8002fe8:	4906      	ldr	r1, [pc, #24]	@ (8003004 <__NVIC_EnableIRQ+0x34>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	e000e100 	.word	0xe000e100

08003008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003018:	2b00      	cmp	r3, #0
 800301a:	db0a      	blt.n	8003032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	b2da      	uxtb	r2, r3
 8003020:	490c      	ldr	r1, [pc, #48]	@ (8003054 <__NVIC_SetPriority+0x4c>)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	0112      	lsls	r2, r2, #4
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	440b      	add	r3, r1
 800302c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003030:	e00a      	b.n	8003048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4908      	ldr	r1, [pc, #32]	@ (8003058 <__NVIC_SetPriority+0x50>)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	3b04      	subs	r3, #4
 8003040:	0112      	lsls	r2, r2, #4
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	440b      	add	r3, r1
 8003046:	761a      	strb	r2, [r3, #24]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	e000e100 	.word	0xe000e100
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	@ 0x24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f1c3 0307 	rsb	r3, r3, #7
 8003076:	2b04      	cmp	r3, #4
 8003078:	bf28      	it	cs
 800307a:	2304      	movcs	r3, #4
 800307c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3304      	adds	r3, #4
 8003082:	2b06      	cmp	r3, #6
 8003084:	d902      	bls.n	800308c <NVIC_EncodePriority+0x30>
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3b03      	subs	r3, #3
 800308a:	e000      	b.n	800308e <NVIC_EncodePriority+0x32>
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	f04f 32ff 	mov.w	r2, #4294967295
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	401a      	ands	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a4:	f04f 31ff 	mov.w	r1, #4294967295
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	43d9      	mvns	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	4313      	orrs	r3, r2
         );
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	@ 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d0:	d301      	bcc.n	80030d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d2:	2301      	movs	r3, #1
 80030d4:	e00f      	b.n	80030f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003100 <SysTick_Config+0x40>)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030de:	210f      	movs	r1, #15
 80030e0:	f04f 30ff 	mov.w	r0, #4294967295
 80030e4:	f7ff ff90 	bl	8003008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e8:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <SysTick_Config+0x40>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ee:	4b04      	ldr	r3, [pc, #16]	@ (8003100 <SysTick_Config+0x40>)
 80030f0:	2207      	movs	r2, #7
 80030f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	e000e010 	.word	0xe000e010

08003104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ff2d 	bl	8002f6c <__NVIC_SetPriorityGrouping>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	4603      	mov	r3, r0
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800312c:	f7ff ff42 	bl	8002fb4 <__NVIC_GetPriorityGrouping>
 8003130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	6978      	ldr	r0, [r7, #20]
 8003138:	f7ff ff90 	bl	800305c <NVIC_EncodePriority>
 800313c:	4602      	mov	r2, r0
 800313e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff5f 	bl	8003008 <__NVIC_SetPriority>
}
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800315c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff35 	bl	8002fd0 <__NVIC_EnableIRQ>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff ffa2 	bl	80030c0 <SysTick_Config>
 800317c:	4603      	mov	r3, r0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e043      	b.n	8003226 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b22      	ldr	r3, [pc, #136]	@ (8003230 <HAL_DMA_Init+0xa8>)
 80031a6:	4413      	add	r3, r2
 80031a8:	4a22      	ldr	r2, [pc, #136]	@ (8003234 <HAL_DMA_Init+0xac>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	009a      	lsls	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003238 <HAL_DMA_Init+0xb0>)
 80031ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80031d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80031d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80031e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr
 8003230:	bffdfff8 	.word	0xbffdfff8
 8003234:	cccccccd 	.word	0xcccccccd
 8003238:	40020000 	.word	0x40020000

0800323c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_DMA_Start_IT+0x20>
 8003258:	2302      	movs	r3, #2
 800325a:	e04b      	b.n	80032f4 <HAL_DMA_Start_IT+0xb8>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d13a      	bne.n	80032e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f9af 	bl	80035f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 020e 	orr.w	r2, r2, #14
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e00f      	b.n	80032d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0204 	bic.w	r2, r2, #4
 80032c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 020a 	orr.w	r2, r2, #10
 80032d2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e005      	b.n	80032f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
 80032f0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d005      	beq.n	8003320 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2204      	movs	r2, #4
 8003318:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
 800331e:	e051      	b.n	80033c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 020e 	bic.w	r2, r2, #14
 800332e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a22      	ldr	r2, [pc, #136]	@ (80033d0 <HAL_DMA_Abort_IT+0xd4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d029      	beq.n	800339e <HAL_DMA_Abort_IT+0xa2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a21      	ldr	r2, [pc, #132]	@ (80033d4 <HAL_DMA_Abort_IT+0xd8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d022      	beq.n	800339a <HAL_DMA_Abort_IT+0x9e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1f      	ldr	r2, [pc, #124]	@ (80033d8 <HAL_DMA_Abort_IT+0xdc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01a      	beq.n	8003394 <HAL_DMA_Abort_IT+0x98>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1e      	ldr	r2, [pc, #120]	@ (80033dc <HAL_DMA_Abort_IT+0xe0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d012      	beq.n	800338e <HAL_DMA_Abort_IT+0x92>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1c      	ldr	r2, [pc, #112]	@ (80033e0 <HAL_DMA_Abort_IT+0xe4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00a      	beq.n	8003388 <HAL_DMA_Abort_IT+0x8c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1b      	ldr	r2, [pc, #108]	@ (80033e4 <HAL_DMA_Abort_IT+0xe8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d102      	bne.n	8003382 <HAL_DMA_Abort_IT+0x86>
 800337c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003380:	e00e      	b.n	80033a0 <HAL_DMA_Abort_IT+0xa4>
 8003382:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003386:	e00b      	b.n	80033a0 <HAL_DMA_Abort_IT+0xa4>
 8003388:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800338c:	e008      	b.n	80033a0 <HAL_DMA_Abort_IT+0xa4>
 800338e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003392:	e005      	b.n	80033a0 <HAL_DMA_Abort_IT+0xa4>
 8003394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003398:	e002      	b.n	80033a0 <HAL_DMA_Abort_IT+0xa4>
 800339a:	2310      	movs	r3, #16
 800339c:	e000      	b.n	80033a0 <HAL_DMA_Abort_IT+0xa4>
 800339e:	2301      	movs	r3, #1
 80033a0:	4a11      	ldr	r2, [pc, #68]	@ (80033e8 <HAL_DMA_Abort_IT+0xec>)
 80033a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
    } 
  }
  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40020008 	.word	0x40020008
 80033d4:	4002001c 	.word	0x4002001c
 80033d8:	40020030 	.word	0x40020030
 80033dc:	40020044 	.word	0x40020044
 80033e0:	40020058 	.word	0x40020058
 80033e4:	4002006c 	.word	0x4002006c
 80033e8:	40020000 	.word	0x40020000

080033ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	2204      	movs	r2, #4
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d04f      	beq.n	80034b4 <HAL_DMA_IRQHandler+0xc8>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d04a      	beq.n	80034b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0204 	bic.w	r2, r2, #4
 800343a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a66      	ldr	r2, [pc, #408]	@ (80035dc <HAL_DMA_IRQHandler+0x1f0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d029      	beq.n	800349a <HAL_DMA_IRQHandler+0xae>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a65      	ldr	r2, [pc, #404]	@ (80035e0 <HAL_DMA_IRQHandler+0x1f4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d022      	beq.n	8003496 <HAL_DMA_IRQHandler+0xaa>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a63      	ldr	r2, [pc, #396]	@ (80035e4 <HAL_DMA_IRQHandler+0x1f8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01a      	beq.n	8003490 <HAL_DMA_IRQHandler+0xa4>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a62      	ldr	r2, [pc, #392]	@ (80035e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d012      	beq.n	800348a <HAL_DMA_IRQHandler+0x9e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a60      	ldr	r2, [pc, #384]	@ (80035ec <HAL_DMA_IRQHandler+0x200>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00a      	beq.n	8003484 <HAL_DMA_IRQHandler+0x98>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5f      	ldr	r2, [pc, #380]	@ (80035f0 <HAL_DMA_IRQHandler+0x204>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d102      	bne.n	800347e <HAL_DMA_IRQHandler+0x92>
 8003478:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800347c:	e00e      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 800347e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003482:	e00b      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 8003484:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003488:	e008      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 800348a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800348e:	e005      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 8003490:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003494:	e002      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 8003496:	2340      	movs	r3, #64	@ 0x40
 8003498:	e000      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 800349a:	2304      	movs	r3, #4
 800349c:	4a55      	ldr	r2, [pc, #340]	@ (80035f4 <HAL_DMA_IRQHandler+0x208>)
 800349e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8094 	beq.w	80035d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80034b2:	e08e      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	2202      	movs	r2, #2
 80034ba:	409a      	lsls	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d056      	beq.n	8003572 <HAL_DMA_IRQHandler+0x186>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d051      	beq.n	8003572 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 020a 	bic.w	r2, r2, #10
 80034ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a38      	ldr	r2, [pc, #224]	@ (80035dc <HAL_DMA_IRQHandler+0x1f0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d029      	beq.n	8003552 <HAL_DMA_IRQHandler+0x166>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a37      	ldr	r2, [pc, #220]	@ (80035e0 <HAL_DMA_IRQHandler+0x1f4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_IRQHandler+0x162>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a35      	ldr	r2, [pc, #212]	@ (80035e4 <HAL_DMA_IRQHandler+0x1f8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01a      	beq.n	8003548 <HAL_DMA_IRQHandler+0x15c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a34      	ldr	r2, [pc, #208]	@ (80035e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d012      	beq.n	8003542 <HAL_DMA_IRQHandler+0x156>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a32      	ldr	r2, [pc, #200]	@ (80035ec <HAL_DMA_IRQHandler+0x200>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00a      	beq.n	800353c <HAL_DMA_IRQHandler+0x150>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a31      	ldr	r2, [pc, #196]	@ (80035f0 <HAL_DMA_IRQHandler+0x204>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d102      	bne.n	8003536 <HAL_DMA_IRQHandler+0x14a>
 8003530:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003534:	e00e      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 8003536:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800353a:	e00b      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 800353c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003540:	e008      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 8003542:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003546:	e005      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 8003548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800354c:	e002      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 800354e:	2320      	movs	r3, #32
 8003550:	e000      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 8003552:	2302      	movs	r3, #2
 8003554:	4a27      	ldr	r2, [pc, #156]	@ (80035f4 <HAL_DMA_IRQHandler+0x208>)
 8003556:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	d034      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003570:	e02f      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	2208      	movs	r2, #8
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d028      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x1e8>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d023      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 020e 	bic.w	r2, r2, #14
 800359a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f202 	lsl.w	r2, r1, r2
 80035aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d004      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
    }
  }
  return;
 80035d2:	bf00      	nop
 80035d4:	bf00      	nop
}
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40020008 	.word	0x40020008
 80035e0:	4002001c 	.word	0x4002001c
 80035e4:	40020030 	.word	0x40020030
 80035e8:	40020044 	.word	0x40020044
 80035ec:	40020058 	.word	0x40020058
 80035f0:	4002006c 	.word	0x4002006c
 80035f4:	40020000 	.word	0x40020000

080035f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360e:	2101      	movs	r1, #1
 8003610:	fa01 f202 	lsl.w	r2, r1, r2
 8003614:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b10      	cmp	r3, #16
 8003624:	d108      	bne.n	8003638 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003636:	e007      	b.n	8003648 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
	...

08003654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003654:	b480      	push	{r7}
 8003656:	b08b      	sub	sp, #44	@ 0x2c
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003666:	e169      	b.n	800393c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003668:	2201      	movs	r2, #1
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	429a      	cmp	r2, r3
 8003682:	f040 8158 	bne.w	8003936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4a9a      	ldr	r2, [pc, #616]	@ (80038f4 <HAL_GPIO_Init+0x2a0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d05e      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 8003690:	4a98      	ldr	r2, [pc, #608]	@ (80038f4 <HAL_GPIO_Init+0x2a0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d875      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 8003696:	4a98      	ldr	r2, [pc, #608]	@ (80038f8 <HAL_GPIO_Init+0x2a4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d058      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 800369c:	4a96      	ldr	r2, [pc, #600]	@ (80038f8 <HAL_GPIO_Init+0x2a4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d86f      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036a2:	4a96      	ldr	r2, [pc, #600]	@ (80038fc <HAL_GPIO_Init+0x2a8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d052      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 80036a8:	4a94      	ldr	r2, [pc, #592]	@ (80038fc <HAL_GPIO_Init+0x2a8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d869      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036ae:	4a94      	ldr	r2, [pc, #592]	@ (8003900 <HAL_GPIO_Init+0x2ac>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d04c      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 80036b4:	4a92      	ldr	r2, [pc, #584]	@ (8003900 <HAL_GPIO_Init+0x2ac>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d863      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036ba:	4a92      	ldr	r2, [pc, #584]	@ (8003904 <HAL_GPIO_Init+0x2b0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d046      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 80036c0:	4a90      	ldr	r2, [pc, #576]	@ (8003904 <HAL_GPIO_Init+0x2b0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d85d      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036c6:	2b12      	cmp	r3, #18
 80036c8:	d82a      	bhi.n	8003720 <HAL_GPIO_Init+0xcc>
 80036ca:	2b12      	cmp	r3, #18
 80036cc:	d859      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036ce:	a201      	add	r2, pc, #4	@ (adr r2, 80036d4 <HAL_GPIO_Init+0x80>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	0800374f 	.word	0x0800374f
 80036d8:	08003729 	.word	0x08003729
 80036dc:	0800373b 	.word	0x0800373b
 80036e0:	0800377d 	.word	0x0800377d
 80036e4:	08003783 	.word	0x08003783
 80036e8:	08003783 	.word	0x08003783
 80036ec:	08003783 	.word	0x08003783
 80036f0:	08003783 	.word	0x08003783
 80036f4:	08003783 	.word	0x08003783
 80036f8:	08003783 	.word	0x08003783
 80036fc:	08003783 	.word	0x08003783
 8003700:	08003783 	.word	0x08003783
 8003704:	08003783 	.word	0x08003783
 8003708:	08003783 	.word	0x08003783
 800370c:	08003783 	.word	0x08003783
 8003710:	08003783 	.word	0x08003783
 8003714:	08003783 	.word	0x08003783
 8003718:	08003731 	.word	0x08003731
 800371c:	08003745 	.word	0x08003745
 8003720:	4a79      	ldr	r2, [pc, #484]	@ (8003908 <HAL_GPIO_Init+0x2b4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003726:	e02c      	b.n	8003782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	623b      	str	r3, [r7, #32]
          break;
 800372e:	e029      	b.n	8003784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	3304      	adds	r3, #4
 8003736:	623b      	str	r3, [r7, #32]
          break;
 8003738:	e024      	b.n	8003784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	3308      	adds	r3, #8
 8003740:	623b      	str	r3, [r7, #32]
          break;
 8003742:	e01f      	b.n	8003784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	330c      	adds	r3, #12
 800374a:	623b      	str	r3, [r7, #32]
          break;
 800374c:	e01a      	b.n	8003784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003756:	2304      	movs	r3, #4
 8003758:	623b      	str	r3, [r7, #32]
          break;
 800375a:	e013      	b.n	8003784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d105      	bne.n	8003770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003764:	2308      	movs	r3, #8
 8003766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	611a      	str	r2, [r3, #16]
          break;
 800376e:	e009      	b.n	8003784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003770:	2308      	movs	r3, #8
 8003772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	615a      	str	r2, [r3, #20]
          break;
 800377a:	e003      	b.n	8003784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800377c:	2300      	movs	r3, #0
 800377e:	623b      	str	r3, [r7, #32]
          break;
 8003780:	e000      	b.n	8003784 <HAL_GPIO_Init+0x130>
          break;
 8003782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2bff      	cmp	r3, #255	@ 0xff
 8003788:	d801      	bhi.n	800378e <HAL_GPIO_Init+0x13a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	e001      	b.n	8003792 <HAL_GPIO_Init+0x13e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2bff      	cmp	r3, #255	@ 0xff
 8003798:	d802      	bhi.n	80037a0 <HAL_GPIO_Init+0x14c>
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	e002      	b.n	80037a6 <HAL_GPIO_Init+0x152>
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	3b08      	subs	r3, #8
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	210f      	movs	r1, #15
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	401a      	ands	r2, r3
 80037b8:	6a39      	ldr	r1, [r7, #32]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	431a      	orrs	r2, r3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80b1 	beq.w	8003936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037d4:	4b4d      	ldr	r3, [pc, #308]	@ (800390c <HAL_GPIO_Init+0x2b8>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	4a4c      	ldr	r2, [pc, #304]	@ (800390c <HAL_GPIO_Init+0x2b8>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6193      	str	r3, [r2, #24]
 80037e0:	4b4a      	ldr	r3, [pc, #296]	@ (800390c <HAL_GPIO_Init+0x2b8>)
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037ec:	4a48      	ldr	r2, [pc, #288]	@ (8003910 <HAL_GPIO_Init+0x2bc>)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	3302      	adds	r3, #2
 80037f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	220f      	movs	r2, #15
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a40      	ldr	r2, [pc, #256]	@ (8003914 <HAL_GPIO_Init+0x2c0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_GPIO_Init+0x1ec>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a3f      	ldr	r2, [pc, #252]	@ (8003918 <HAL_GPIO_Init+0x2c4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00d      	beq.n	800383c <HAL_GPIO_Init+0x1e8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a3e      	ldr	r2, [pc, #248]	@ (800391c <HAL_GPIO_Init+0x2c8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <HAL_GPIO_Init+0x1e4>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a3d      	ldr	r2, [pc, #244]	@ (8003920 <HAL_GPIO_Init+0x2cc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d101      	bne.n	8003834 <HAL_GPIO_Init+0x1e0>
 8003830:	2303      	movs	r3, #3
 8003832:	e006      	b.n	8003842 <HAL_GPIO_Init+0x1ee>
 8003834:	2304      	movs	r3, #4
 8003836:	e004      	b.n	8003842 <HAL_GPIO_Init+0x1ee>
 8003838:	2302      	movs	r3, #2
 800383a:	e002      	b.n	8003842 <HAL_GPIO_Init+0x1ee>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_GPIO_Init+0x1ee>
 8003840:	2300      	movs	r3, #0
 8003842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003844:	f002 0203 	and.w	r2, r2, #3
 8003848:	0092      	lsls	r2, r2, #2
 800384a:	4093      	lsls	r3, r2
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003852:	492f      	ldr	r1, [pc, #188]	@ (8003910 <HAL_GPIO_Init+0x2bc>)
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d006      	beq.n	800387a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800386c:	4b2d      	ldr	r3, [pc, #180]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	492c      	ldr	r1, [pc, #176]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]
 8003878:	e006      	b.n	8003888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800387a:	4b2a      	ldr	r3, [pc, #168]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	43db      	mvns	r3, r3
 8003882:	4928      	ldr	r1, [pc, #160]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 8003884:	4013      	ands	r3, r2
 8003886:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003894:	4b23      	ldr	r3, [pc, #140]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	4922      	ldr	r1, [pc, #136]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4313      	orrs	r3, r2
 800389e:	60cb      	str	r3, [r1, #12]
 80038a0:	e006      	b.n	80038b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038a2:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	491e      	ldr	r1, [pc, #120]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d006      	beq.n	80038ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038bc:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4918      	ldr	r1, [pc, #96]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
 80038c8:	e006      	b.n	80038d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038ca:	4b16      	ldr	r3, [pc, #88]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	4914      	ldr	r1, [pc, #80]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d021      	beq.n	8003928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	490e      	ldr	r1, [pc, #56]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]
 80038f0:	e021      	b.n	8003936 <HAL_GPIO_Init+0x2e2>
 80038f2:	bf00      	nop
 80038f4:	10320000 	.word	0x10320000
 80038f8:	10310000 	.word	0x10310000
 80038fc:	10220000 	.word	0x10220000
 8003900:	10210000 	.word	0x10210000
 8003904:	10120000 	.word	0x10120000
 8003908:	10110000 	.word	0x10110000
 800390c:	40021000 	.word	0x40021000
 8003910:	40010000 	.word	0x40010000
 8003914:	40010800 	.word	0x40010800
 8003918:	40010c00 	.word	0x40010c00
 800391c:	40011000 	.word	0x40011000
 8003920:	40011400 	.word	0x40011400
 8003924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <HAL_GPIO_Init+0x304>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	43db      	mvns	r3, r3
 8003930:	4909      	ldr	r1, [pc, #36]	@ (8003958 <HAL_GPIO_Init+0x304>)
 8003932:	4013      	ands	r3, r2
 8003934:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	3301      	adds	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	f47f ae8e 	bne.w	8003668 <HAL_GPIO_Init+0x14>
  }
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	372c      	adds	r7, #44	@ 0x2c
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	40010400 	.word	0x40010400

0800395c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	887b      	ldrh	r3, [r7, #2]
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	e001      	b.n	800397e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800397e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	807b      	strh	r3, [r7, #2]
 8003996:	4613      	mov	r3, r2
 8003998:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800399a:	787b      	ldrb	r3, [r7, #1]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a0:	887a      	ldrh	r2, [r7, #2]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039a6:	e003      	b.n	80039b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039a8:	887b      	ldrh	r3, [r7, #2]
 80039aa:	041a      	lsls	r2, r3, #16
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	611a      	str	r2, [r3, #16]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr
	...

080039bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e272      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8087 	beq.w	8003aea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039dc:	4b92      	ldr	r3, [pc, #584]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d00c      	beq.n	8003a02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d112      	bne.n	8003a1a <HAL_RCC_OscConfig+0x5e>
 80039f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a00:	d10b      	bne.n	8003a1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a02:	4b89      	ldr	r3, [pc, #548]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d06c      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x12c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d168      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e24c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a22:	d106      	bne.n	8003a32 <HAL_RCC_OscConfig+0x76>
 8003a24:	4b80      	ldr	r3, [pc, #512]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a7f      	ldr	r2, [pc, #508]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e02e      	b.n	8003a90 <HAL_RCC_OscConfig+0xd4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x98>
 8003a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a7a      	ldr	r2, [pc, #488]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b78      	ldr	r3, [pc, #480]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a77      	ldr	r2, [pc, #476]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e01d      	b.n	8003a90 <HAL_RCC_OscConfig+0xd4>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0xbc>
 8003a5e:	4b72      	ldr	r3, [pc, #456]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a71      	ldr	r2, [pc, #452]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e00b      	b.n	8003a90 <HAL_RCC_OscConfig+0xd4>
 8003a78:	4b6b      	ldr	r3, [pc, #428]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a6a      	ldr	r2, [pc, #424]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b68      	ldr	r3, [pc, #416]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a67      	ldr	r2, [pc, #412]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d013      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe fde2 	bl	8002660 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fdde 	bl	8002660 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	@ 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e200      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xe4>
 8003abe:	e014      	b.n	8003aea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fe fdce 	bl	8002660 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fe fdca 	bl	8002660 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	@ 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e1ec      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ada:	4b53      	ldr	r3, [pc, #332]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x10c>
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d063      	beq.n	8003bbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af6:	4b4c      	ldr	r3, [pc, #304]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b02:	4b49      	ldr	r3, [pc, #292]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d11c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x18c>
 8003b0e:	4b46      	ldr	r3, [pc, #280]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d116      	bne.n	8003b48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	4b43      	ldr	r3, [pc, #268]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_RCC_OscConfig+0x176>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e1c0      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b32:	4b3d      	ldr	r3, [pc, #244]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4939      	ldr	r1, [pc, #228]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	e03a      	b.n	8003bbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d020      	beq.n	8003b92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b50:	4b36      	ldr	r3, [pc, #216]	@ (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7fe fd83 	bl	8002660 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5e:	f7fe fd7f 	bl	8002660 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e1a1      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b70:	4b2d      	ldr	r3, [pc, #180]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4927      	ldr	r1, [pc, #156]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]
 8003b90:	e015      	b.n	8003bbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b92:	4b26      	ldr	r3, [pc, #152]	@ (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fe fd62 	bl	8002660 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba0:	f7fe fd5e 	bl	8002660 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e180      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d03a      	beq.n	8003c40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d019      	beq.n	8003c06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd2:	4b17      	ldr	r3, [pc, #92]	@ (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd8:	f7fe fd42 	bl	8002660 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be0:	f7fe fd3e 	bl	8002660 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e160      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f000 faba 	bl	8004178 <RCC_Delay>
 8003c04:	e01c      	b.n	8003c40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c06:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0c:	f7fe fd28 	bl	8002660 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c12:	e00f      	b.n	8003c34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c14:	f7fe fd24 	bl	8002660 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d908      	bls.n	8003c34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e146      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	42420000 	.word	0x42420000
 8003c30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	4b92      	ldr	r3, [pc, #584]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e9      	bne.n	8003c14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80a6 	beq.w	8003d9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c52:	4b8b      	ldr	r3, [pc, #556]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10d      	bne.n	8003c7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	4b88      	ldr	r3, [pc, #544]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	4a87      	ldr	r2, [pc, #540]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c68:	61d3      	str	r3, [r2, #28]
 8003c6a:	4b85      	ldr	r3, [pc, #532]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7a:	4b82      	ldr	r3, [pc, #520]	@ (8003e84 <HAL_RCC_OscConfig+0x4c8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c86:	4b7f      	ldr	r3, [pc, #508]	@ (8003e84 <HAL_RCC_OscConfig+0x4c8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e84 <HAL_RCC_OscConfig+0x4c8>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c92:	f7fe fce5 	bl	8002660 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9a:	f7fe fce1 	bl	8002660 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b64      	cmp	r3, #100	@ 0x64
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e103      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	4b75      	ldr	r3, [pc, #468]	@ (8003e84 <HAL_RCC_OscConfig+0x4c8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x312>
 8003cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	4a6e      	ldr	r2, [pc, #440]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6213      	str	r3, [r2, #32]
 8003ccc:	e02d      	b.n	8003d2a <HAL_RCC_OscConfig+0x36e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x334>
 8003cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a69      	ldr	r2, [pc, #420]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	6213      	str	r3, [r2, #32]
 8003ce2:	4b67      	ldr	r3, [pc, #412]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4a66      	ldr	r2, [pc, #408]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	f023 0304 	bic.w	r3, r3, #4
 8003cec:	6213      	str	r3, [r2, #32]
 8003cee:	e01c      	b.n	8003d2a <HAL_RCC_OscConfig+0x36e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d10c      	bne.n	8003d12 <HAL_RCC_OscConfig+0x356>
 8003cf8:	4b61      	ldr	r3, [pc, #388]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	4a60      	ldr	r2, [pc, #384]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003cfe:	f043 0304 	orr.w	r3, r3, #4
 8003d02:	6213      	str	r3, [r2, #32]
 8003d04:	4b5e      	ldr	r3, [pc, #376]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	4a5d      	ldr	r2, [pc, #372]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6213      	str	r3, [r2, #32]
 8003d10:	e00b      	b.n	8003d2a <HAL_RCC_OscConfig+0x36e>
 8003d12:	4b5b      	ldr	r3, [pc, #364]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	4a5a      	ldr	r2, [pc, #360]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	6213      	str	r3, [r2, #32]
 8003d1e:	4b58      	ldr	r3, [pc, #352]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4a57      	ldr	r2, [pc, #348]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	f023 0304 	bic.w	r3, r3, #4
 8003d28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d015      	beq.n	8003d5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d32:	f7fe fc95 	bl	8002660 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7fe fc91 	bl	8002660 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e0b1      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d50:	4b4b      	ldr	r3, [pc, #300]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ee      	beq.n	8003d3a <HAL_RCC_OscConfig+0x37e>
 8003d5c:	e014      	b.n	8003d88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5e:	f7fe fc7f 	bl	8002660 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d64:	e00a      	b.n	8003d7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fe fc7b 	bl	8002660 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e09b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7c:	4b40      	ldr	r3, [pc, #256]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1ee      	bne.n	8003d66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d105      	bne.n	8003d9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	4a3b      	ldr	r2, [pc, #236]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8087 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da4:	4b36      	ldr	r3, [pc, #216]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d061      	beq.n	8003e74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d146      	bne.n	8003e46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db8:	4b33      	ldr	r3, [pc, #204]	@ (8003e88 <HAL_RCC_OscConfig+0x4cc>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7fe fc4f 	bl	8002660 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7fe fc4b 	bl	8002660 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e06d      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd8:	4b29      	ldr	r3, [pc, #164]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dec:	d108      	bne.n	8003e00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dee:	4b24      	ldr	r3, [pc, #144]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4921      	ldr	r1, [pc, #132]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e00:	4b1f      	ldr	r3, [pc, #124]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a19      	ldr	r1, [r3, #32]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	430b      	orrs	r3, r1
 8003e12:	491b      	ldr	r1, [pc, #108]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <HAL_RCC_OscConfig+0x4cc>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fe fc1f 	bl	8002660 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fe fc1b 	bl	8002660 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e03d      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e38:	4b11      	ldr	r3, [pc, #68]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x46a>
 8003e44:	e035      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b10      	ldr	r3, [pc, #64]	@ (8003e88 <HAL_RCC_OscConfig+0x4cc>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fc08 	bl	8002660 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe fc04 	bl	8002660 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e026      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x498>
 8003e72:	e01e      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e019      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40007000 	.word	0x40007000
 8003e88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ebc <HAL_RCC_OscConfig+0x500>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d106      	bne.n	8003eae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d001      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40021000 	.word	0x40021000

08003ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0d0      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b6a      	ldr	r3, [pc, #424]	@ (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d910      	bls.n	8003f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b67      	ldr	r3, [pc, #412]	@ (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 0207 	bic.w	r2, r3, #7
 8003eea:	4965      	ldr	r1, [pc, #404]	@ (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b63      	ldr	r3, [pc, #396]	@ (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0b8      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f1c:	4b59      	ldr	r3, [pc, #356]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a58      	ldr	r2, [pc, #352]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f34:	4b53      	ldr	r3, [pc, #332]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4a52      	ldr	r2, [pc, #328]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f40:	4b50      	ldr	r3, [pc, #320]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	494d      	ldr	r1, [pc, #308]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d040      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f66:	4b47      	ldr	r3, [pc, #284]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d115      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e07f      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7e:	4b41      	ldr	r3, [pc, #260]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e073      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e06b      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9e:	4b39      	ldr	r3, [pc, #228]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f023 0203 	bic.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4936      	ldr	r1, [pc, #216]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb0:	f7fe fb56 	bl	8002660 <HAL_GetTick>
 8003fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb8:	f7fe fb52 	bl	8002660 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e053      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	4b2d      	ldr	r3, [pc, #180]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 020c 	and.w	r2, r3, #12
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d1eb      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe0:	4b27      	ldr	r3, [pc, #156]	@ (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d210      	bcs.n	8004010 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fee:	4b24      	ldr	r3, [pc, #144]	@ (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f023 0207 	bic.w	r2, r3, #7
 8003ff6:	4922      	ldr	r1, [pc, #136]	@ (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffe:	4b20      	ldr	r3, [pc, #128]	@ (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e032      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401c:	4b19      	ldr	r3, [pc, #100]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4916      	ldr	r1, [pc, #88]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800403a:	4b12      	ldr	r3, [pc, #72]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	490e      	ldr	r1, [pc, #56]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800404e:	f000 f821 	bl	8004094 <HAL_RCC_GetSysClockFreq>
 8004052:	4602      	mov	r2, r0
 8004054:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	490a      	ldr	r1, [pc, #40]	@ (8004088 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	5ccb      	ldrb	r3, [r1, r3]
 8004062:	fa22 f303 	lsr.w	r3, r2, r3
 8004066:	4a09      	ldr	r2, [pc, #36]	@ (800408c <HAL_RCC_ClockConfig+0x1cc>)
 8004068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800406a:	4b09      	ldr	r3, [pc, #36]	@ (8004090 <HAL_RCC_ClockConfig+0x1d0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fab4 	bl	80025dc <HAL_InitTick>

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40022000 	.word	0x40022000
 8004084:	40021000 	.word	0x40021000
 8004088:	08005bf8 	.word	0x08005bf8
 800408c:	20000010 	.word	0x20000010
 8004090:	20000014 	.word	0x20000014

08004094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	2300      	movs	r3, #0
 80040a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x94>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d002      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x30>
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d003      	beq.n	80040ca <HAL_RCC_GetSysClockFreq+0x36>
 80040c2:	e027      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040c4:	4b19      	ldr	r3, [pc, #100]	@ (800412c <HAL_RCC_GetSysClockFreq+0x98>)
 80040c6:	613b      	str	r3, [r7, #16]
      break;
 80040c8:	e027      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	0c9b      	lsrs	r3, r3, #18
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	4a17      	ldr	r2, [pc, #92]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040d4:	5cd3      	ldrb	r3, [r2, r3]
 80040d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d010      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040e2:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x94>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	0c5b      	lsrs	r3, r3, #17
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	4a11      	ldr	r2, [pc, #68]	@ (8004134 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040ee:	5cd3      	ldrb	r3, [r2, r3]
 80040f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a0d      	ldr	r2, [pc, #52]	@ (800412c <HAL_RCC_GetSysClockFreq+0x98>)
 80040f6:	fb03 f202 	mul.w	r2, r3, r2
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e004      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a0c      	ldr	r2, [pc, #48]	@ (8004138 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004108:	fb02 f303 	mul.w	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	613b      	str	r3, [r7, #16]
      break;
 8004112:	e002      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <HAL_RCC_GetSysClockFreq+0x98>)
 8004116:	613b      	str	r3, [r7, #16]
      break;
 8004118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411a:	693b      	ldr	r3, [r7, #16]
}
 800411c:	4618      	mov	r0, r3
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
 800412c:	007a1200 	.word	0x007a1200
 8004130:	08005c10 	.word	0x08005c10
 8004134:	08005c20 	.word	0x08005c20
 8004138:	003d0900 	.word	0x003d0900

0800413c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004140:	4b02      	ldr	r3, [pc, #8]	@ (800414c <HAL_RCC_GetHCLKFreq+0x10>)
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	20000010 	.word	0x20000010

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004154:	f7ff fff2 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	0adb      	lsrs	r3, r3, #11
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	@ (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	08005c08 	.word	0x08005c08

08004178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004180:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <RCC_Delay+0x34>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a0a      	ldr	r2, [pc, #40]	@ (80041b0 <RCC_Delay+0x38>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0a5b      	lsrs	r3, r3, #9
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004194:	bf00      	nop
  }
  while (Delay --);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1e5a      	subs	r2, r3, #1
 800419a:	60fa      	str	r2, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f9      	bne.n	8004194 <RCC_Delay+0x1c>
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	20000010 	.word	0x20000010
 80041b0:	10624dd3 	.word	0x10624dd3

080041b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d07d      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80041d0:	2300      	movs	r3, #0
 80041d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d4:	4b4f      	ldr	r3, [pc, #316]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10d      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ea:	61d3      	str	r3, [r2, #28]
 80041ec:	4b49      	ldr	r3, [pc, #292]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b46      	ldr	r3, [pc, #280]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d118      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004208:	4b43      	ldr	r3, [pc, #268]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a42      	ldr	r2, [pc, #264]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004212:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004214:	f7fe fa24 	bl	8002660 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421a:	e008      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421c:	f7fe fa20 	bl	8002660 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	@ 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e06d      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422e:	4b3a      	ldr	r3, [pc, #232]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800423a:	4b36      	ldr	r3, [pc, #216]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004242:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d02e      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	429a      	cmp	r2, r3
 8004256:	d027      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004258:	4b2e      	ldr	r3, [pc, #184]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004260:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004262:	4b2e      	ldr	r3, [pc, #184]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004268:	4b2c      	ldr	r3, [pc, #176]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800426e:	4a29      	ldr	r2, [pc, #164]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d014      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427e:	f7fe f9ef 	bl	8002660 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	e00a      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fe f9eb 	bl	8002660 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e036      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	4b1d      	ldr	r3, [pc, #116]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ee      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4917      	ldr	r1, [pc, #92]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c0:	4b14      	ldr	r3, [pc, #80]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4a13      	ldr	r2, [pc, #76]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	490b      	ldr	r1, [pc, #44]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042f6:	4b07      	ldr	r3, [pc, #28]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	4904      	ldr	r1, [pc, #16]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	40007000 	.word	0x40007000
 800431c:	42420440 	.word	0x42420440

08004320 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	2300      	movs	r3, #0
 800433a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b10      	cmp	r3, #16
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b10      	cmp	r3, #16
 8004346:	f200 808a 	bhi.w	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d045      	beq.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d075      	beq.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004356:	e082      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004358:	4b46      	ldr	r3, [pc, #280]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800435e:	4b45      	ldr	r3, [pc, #276]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d07b      	beq.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	0c9b      	lsrs	r3, r3, #18
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	4a41      	ldr	r2, [pc, #260]	@ (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004374:	5cd3      	ldrb	r3, [r2, r3]
 8004376:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d015      	beq.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004382:	4b3c      	ldr	r3, [pc, #240]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	0c5b      	lsrs	r3, r3, #17
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	4a3b      	ldr	r2, [pc, #236]	@ (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800438e:	5cd3      	ldrb	r3, [r2, r3]
 8004390:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800439c:	4a38      	ldr	r2, [pc, #224]	@ (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	fb02 f303 	mul.w	r3, r2, r3
 80043aa:	61fb      	str	r3, [r7, #28]
 80043ac:	e004      	b.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4a34      	ldr	r2, [pc, #208]	@ (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80043b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043c4:	d102      	bne.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	61bb      	str	r3, [r7, #24]
      break;
 80043ca:	e04a      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	61bb      	str	r3, [r7, #24]
      break;
 80043da:	e042      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80043dc:	4b25      	ldr	r3, [pc, #148]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ec:	d108      	bne.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80043f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e01f      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800440a:	d109      	bne.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800440c:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004418:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e00f      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800442a:	d11c      	bne.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800442c:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d016      	beq.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004438:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800443c:	61bb      	str	r3, [r7, #24]
      break;
 800443e:	e012      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004440:	e011      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004442:	f7ff fe85 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 8004446:	4602      	mov	r2, r0
 8004448:	4b0a      	ldr	r3, [pc, #40]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	0b9b      	lsrs	r3, r3, #14
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	3301      	adds	r3, #1
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
 800445a:	61bb      	str	r3, [r7, #24]
      break;
 800445c:	e004      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800445e:	bf00      	nop
 8004460:	e002      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004466:	bf00      	nop
    }
  }
  return (frequency);
 8004468:	69bb      	ldr	r3, [r7, #24]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000
 8004478:	08005c24 	.word	0x08005c24
 800447c:	08005c34 	.word	0x08005c34
 8004480:	007a1200 	.word	0x007a1200
 8004484:	003d0900 	.word	0x003d0900
 8004488:	aaaaaaab 	.word	0xaaaaaaab

0800448c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e041      	b.n	8004522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fd ff82 	bl	80023bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f000 fd5a 	bl	8004f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e041      	b.n	80045c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f839 	bl	80045c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3304      	adds	r3, #4
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f000 fd0b 	bl	8004f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
	...

080045dc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d109      	bne.n	8004608 <HAL_TIM_PWM_Start_DMA+0x2c>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	bf0c      	ite	eq
 8004600:	2301      	moveq	r3, #1
 8004602:	2300      	movne	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	e022      	b.n	800464e <HAL_TIM_PWM_Start_DMA+0x72>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b04      	cmp	r3, #4
 800460c:	d109      	bne.n	8004622 <HAL_TIM_PWM_Start_DMA+0x46>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	bf0c      	ite	eq
 800461a:	2301      	moveq	r3, #1
 800461c:	2300      	movne	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	e015      	b.n	800464e <HAL_TIM_PWM_Start_DMA+0x72>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d109      	bne.n	800463c <HAL_TIM_PWM_Start_DMA+0x60>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	e008      	b.n	800464e <HAL_TIM_PWM_Start_DMA+0x72>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
 8004654:	e153      	b.n	80048fe <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <HAL_TIM_PWM_Start_DMA+0x94>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	e022      	b.n	80046b6 <HAL_TIM_PWM_Start_DMA+0xda>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b04      	cmp	r3, #4
 8004674:	d109      	bne.n	800468a <HAL_TIM_PWM_Start_DMA+0xae>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	bf0c      	ite	eq
 8004682:	2301      	moveq	r3, #1
 8004684:	2300      	movne	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	e015      	b.n	80046b6 <HAL_TIM_PWM_Start_DMA+0xda>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d109      	bne.n	80046a4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	e008      	b.n	80046b6 <HAL_TIM_PWM_Start_DMA+0xda>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	bf0c      	ite	eq
 80046b0:	2301      	moveq	r3, #1
 80046b2:	2300      	movne	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d024      	beq.n	8004704 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_TIM_PWM_Start_DMA+0xea>
 80046c0:	887b      	ldrh	r3, [r7, #2]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e119      	b.n	80048fe <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d104      	bne.n	80046da <HAL_TIM_PWM_Start_DMA+0xfe>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d8:	e016      	b.n	8004708 <HAL_TIM_PWM_Start_DMA+0x12c>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d104      	bne.n	80046ea <HAL_TIM_PWM_Start_DMA+0x10e>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e8:	e00e      	b.n	8004708 <HAL_TIM_PWM_Start_DMA+0x12c>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_PWM_Start_DMA+0x11e>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f8:	e006      	b.n	8004708 <HAL_TIM_PWM_Start_DMA+0x12c>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004702:	e001      	b.n	8004708 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0fa      	b.n	80048fe <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b0c      	cmp	r3, #12
 800470c:	f200 80ae 	bhi.w	800486c <HAL_TIM_PWM_Start_DMA+0x290>
 8004710:	a201      	add	r2, pc, #4	@ (adr r2, 8004718 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	0800474d 	.word	0x0800474d
 800471c:	0800486d 	.word	0x0800486d
 8004720:	0800486d 	.word	0x0800486d
 8004724:	0800486d 	.word	0x0800486d
 8004728:	08004795 	.word	0x08004795
 800472c:	0800486d 	.word	0x0800486d
 8004730:	0800486d 	.word	0x0800486d
 8004734:	0800486d 	.word	0x0800486d
 8004738:	080047dd 	.word	0x080047dd
 800473c:	0800486d 	.word	0x0800486d
 8004740:	0800486d 	.word	0x0800486d
 8004744:	0800486d 	.word	0x0800486d
 8004748:	08004825 	.word	0x08004825
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	4a6d      	ldr	r2, [pc, #436]	@ (8004908 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004752:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	4a6c      	ldr	r2, [pc, #432]	@ (800490c <HAL_TIM_PWM_Start_DMA+0x330>)
 800475a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	4a6b      	ldr	r2, [pc, #428]	@ (8004910 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004762:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3334      	adds	r3, #52	@ 0x34
 8004770:	461a      	mov	r2, r3
 8004772:	887b      	ldrh	r3, [r7, #2]
 8004774:	f7fe fd62 	bl	800323c <HAL_DMA_Start_IT>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e0bd      	b.n	80048fe <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004790:	60da      	str	r2, [r3, #12]
      break;
 8004792:	e06e      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	4a5b      	ldr	r2, [pc, #364]	@ (8004908 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800479a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	4a5a      	ldr	r2, [pc, #360]	@ (800490c <HAL_TIM_PWM_Start_DMA+0x330>)
 80047a2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	4a59      	ldr	r2, [pc, #356]	@ (8004910 <HAL_TIM_PWM_Start_DMA+0x334>)
 80047aa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3338      	adds	r3, #56	@ 0x38
 80047b8:	461a      	mov	r2, r3
 80047ba:	887b      	ldrh	r3, [r7, #2]
 80047bc:	f7fe fd3e 	bl	800323c <HAL_DMA_Start_IT>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e099      	b.n	80048fe <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047d8:	60da      	str	r2, [r3, #12]
      break;
 80047da:	e04a      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	4a49      	ldr	r2, [pc, #292]	@ (8004908 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80047e2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	4a48      	ldr	r2, [pc, #288]	@ (800490c <HAL_TIM_PWM_Start_DMA+0x330>)
 80047ea:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	4a47      	ldr	r2, [pc, #284]	@ (8004910 <HAL_TIM_PWM_Start_DMA+0x334>)
 80047f2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	333c      	adds	r3, #60	@ 0x3c
 8004800:	461a      	mov	r2, r3
 8004802:	887b      	ldrh	r3, [r7, #2]
 8004804:	f7fe fd1a 	bl	800323c <HAL_DMA_Start_IT>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e075      	b.n	80048fe <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004820:	60da      	str	r2, [r3, #12]
      break;
 8004822:	e026      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004828:	4a37      	ldr	r2, [pc, #220]	@ (8004908 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800482a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	4a36      	ldr	r2, [pc, #216]	@ (800490c <HAL_TIM_PWM_Start_DMA+0x330>)
 8004832:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004838:	4a35      	ldr	r2, [pc, #212]	@ (8004910 <HAL_TIM_PWM_Start_DMA+0x334>)
 800483a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3340      	adds	r3, #64	@ 0x40
 8004848:	461a      	mov	r2, r3
 800484a:	887b      	ldrh	r3, [r7, #2]
 800484c:	f7fe fcf6 	bl	800323c <HAL_DMA_Start_IT>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e051      	b.n	80048fe <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004868:	60da      	str	r2, [r3, #12]
      break;
 800486a:	e002      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	75fb      	strb	r3, [r7, #23]
      break;
 8004870:	bf00      	nop
  }

  if (status == HAL_OK)
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d141      	bne.n	80048fc <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2201      	movs	r2, #1
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fe0b 	bl	800549c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a22      	ldr	r2, [pc, #136]	@ (8004914 <HAL_TIM_PWM_Start_DMA+0x338>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d107      	bne.n	80048a0 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800489e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004914 <HAL_TIM_PWM_Start_DMA+0x338>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00e      	beq.n	80048c8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b2:	d009      	beq.n	80048c8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a17      	ldr	r2, [pc, #92]	@ (8004918 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a16      	ldr	r2, [pc, #88]	@ (800491c <HAL_TIM_PWM_Start_DMA+0x340>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d111      	bne.n	80048ec <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b06      	cmp	r3, #6
 80048d8:	d010      	beq.n	80048fc <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ea:	e007      	b.n	80048fc <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	08004e75 	.word	0x08004e75
 800490c:	08004f1d 	.word	0x08004f1d
 8004910:	08004de3 	.word	0x08004de3
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800

08004920 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b0c      	cmp	r3, #12
 8004932:	d855      	bhi.n	80049e0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004934:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493a:	bf00      	nop
 800493c:	08004971 	.word	0x08004971
 8004940:	080049e1 	.word	0x080049e1
 8004944:	080049e1 	.word	0x080049e1
 8004948:	080049e1 	.word	0x080049e1
 800494c:	0800498d 	.word	0x0800498d
 8004950:	080049e1 	.word	0x080049e1
 8004954:	080049e1 	.word	0x080049e1
 8004958:	080049e1 	.word	0x080049e1
 800495c:	080049a9 	.word	0x080049a9
 8004960:	080049e1 	.word	0x080049e1
 8004964:	080049e1 	.word	0x080049e1
 8004968:	080049e1 	.word	0x080049e1
 800496c:	080049c5 	.word	0x080049c5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800497e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fcb9 	bl	80032fc <HAL_DMA_Abort_IT>
      break;
 800498a:	e02c      	b.n	80049e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800499a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe fcab 	bl	80032fc <HAL_DMA_Abort_IT>
      break;
 80049a6:	e01e      	b.n	80049e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe fc9d 	bl	80032fc <HAL_DMA_Abort_IT>
      break;
 80049c2:	e010      	b.n	80049e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe fc8f 	bl	80032fc <HAL_DMA_Abort_IT>
      break;
 80049de:	e002      	b.n	80049e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
      break;
 80049e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d157      	bne.n	8004a9c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2200      	movs	r2, #0
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fd51 	bl	800549c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2a      	ldr	r2, [pc, #168]	@ (8004aa8 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d117      	bne.n	8004a34 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6a1a      	ldr	r2, [r3, #32]
 8004a0a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10f      	bne.n	8004a34 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6a1a      	ldr	r2, [r3, #32]
 8004a1a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d107      	bne.n	8004a34 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a32:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6a1a      	ldr	r2, [r3, #32]
 8004a3a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10f      	bne.n	8004a64 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6a1a      	ldr	r2, [r3, #32]
 8004a4a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d107      	bne.n	8004a64 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a72:	e013      	b.n	8004a9c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d104      	bne.n	8004a84 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a82:	e00b      	b.n	8004a9c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d104      	bne.n	8004a94 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a92:	e003      	b.n	8004a9c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40012c00 	.word	0x40012c00

08004aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e0ae      	b.n	8004c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b0c      	cmp	r3, #12
 8004ad6:	f200 809f 	bhi.w	8004c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ada:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004c19 	.word	0x08004c19
 8004ae8:	08004c19 	.word	0x08004c19
 8004aec:	08004c19 	.word	0x08004c19
 8004af0:	08004b55 	.word	0x08004b55
 8004af4:	08004c19 	.word	0x08004c19
 8004af8:	08004c19 	.word	0x08004c19
 8004afc:	08004c19 	.word	0x08004c19
 8004b00:	08004b97 	.word	0x08004b97
 8004b04:	08004c19 	.word	0x08004c19
 8004b08:	08004c19 	.word	0x08004c19
 8004b0c:	08004c19 	.word	0x08004c19
 8004b10:	08004bd7 	.word	0x08004bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 faa0 	bl	8005060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0208 	orr.w	r2, r2, #8
 8004b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0204 	bic.w	r2, r2, #4
 8004b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6999      	ldr	r1, [r3, #24]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	619a      	str	r2, [r3, #24]
      break;
 8004b52:	e064      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fae6 	bl	800512c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6999      	ldr	r1, [r3, #24]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	021a      	lsls	r2, r3, #8
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	619a      	str	r2, [r3, #24]
      break;
 8004b94:	e043      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fb2f 	bl	8005200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0208 	orr.w	r2, r2, #8
 8004bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0204 	bic.w	r2, r2, #4
 8004bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69d9      	ldr	r1, [r3, #28]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	61da      	str	r2, [r3, #28]
      break;
 8004bd4:	e023      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fb79 	bl	80052d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69d9      	ldr	r1, [r3, #28]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	021a      	lsls	r2, r3, #8
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	61da      	str	r2, [r3, #28]
      break;
 8004c16:	e002      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_TIM_ConfigClockSource+0x1c>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e0b4      	b.n	8004db6 <HAL_TIM_ConfigClockSource+0x186>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c84:	d03e      	beq.n	8004d04 <HAL_TIM_ConfigClockSource+0xd4>
 8004c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c8a:	f200 8087 	bhi.w	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c92:	f000 8086 	beq.w	8004da2 <HAL_TIM_ConfigClockSource+0x172>
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9a:	d87f      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b70      	cmp	r3, #112	@ 0x70
 8004c9e:	d01a      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0xa6>
 8004ca0:	2b70      	cmp	r3, #112	@ 0x70
 8004ca2:	d87b      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b60      	cmp	r3, #96	@ 0x60
 8004ca6:	d050      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x11a>
 8004ca8:	2b60      	cmp	r3, #96	@ 0x60
 8004caa:	d877      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b50      	cmp	r3, #80	@ 0x50
 8004cae:	d03c      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0xfa>
 8004cb0:	2b50      	cmp	r3, #80	@ 0x50
 8004cb2:	d873      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b40      	cmp	r3, #64	@ 0x40
 8004cb6:	d058      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x13a>
 8004cb8:	2b40      	cmp	r3, #64	@ 0x40
 8004cba:	d86f      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b30      	cmp	r3, #48	@ 0x30
 8004cbe:	d064      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc0:	2b30      	cmp	r3, #48	@ 0x30
 8004cc2:	d86b      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d060      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d867      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d05c      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d05a      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd4:	e062      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ce6:	f000 fbba 	bl	800545e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	609a      	str	r2, [r3, #8]
      break;
 8004d02:	e04f      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d14:	f000 fba3 	bl	800545e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d26:	609a      	str	r2, [r3, #8]
      break;
 8004d28:	e03c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d36:	461a      	mov	r2, r3
 8004d38:	f000 fb1a 	bl	8005370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2150      	movs	r1, #80	@ 0x50
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fb71 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 8004d48:	e02c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 fb38 	bl	80053cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2160      	movs	r1, #96	@ 0x60
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fb61 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 8004d68:	e01c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 fafa 	bl	8005370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2140      	movs	r1, #64	@ 0x40
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fb51 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 8004d88:	e00c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f000 fb48 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 8004d9a:	e003      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004da0:	e000      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d107      	bne.n	8004e0a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e08:	e02a      	b.n	8004e60 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d107      	bne.n	8004e24 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2202      	movs	r2, #2
 8004e18:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e22:	e01d      	b.n	8004e60 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d107      	bne.n	8004e3e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2204      	movs	r2, #4
 8004e32:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e3c:	e010      	b.n	8004e60 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d107      	bne.n	8004e58 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e56:	e003      	b.n	8004e60 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7ff ffb5 	bl	8004dd0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	771a      	strb	r2, [r3, #28]
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d10b      	bne.n	8004ea4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d136      	bne.n	8004f08 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ea2:	e031      	b.n	8004f08 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d10b      	bne.n	8004ec6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d125      	bne.n	8004f08 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ec4:	e020      	b.n	8004f08 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d10b      	bne.n	8004ee8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d114      	bne.n	8004f08 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ee6:	e00f      	b.n	8004f08 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d10a      	bne.n	8004f08 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7fc ff3f 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d103      	bne.n	8004f3c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	771a      	strb	r2, [r3, #28]
 8004f3a:	e019      	b.n	8004f70 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d103      	bne.n	8004f4e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	771a      	strb	r2, [r3, #28]
 8004f4c:	e010      	b.n	8004f70 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d103      	bne.n	8004f60 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	771a      	strb	r2, [r3, #28]
 8004f5e:	e007      	b.n	8004f70 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d102      	bne.n	8004f70 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff ff24 	bl	8004dbe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	771a      	strb	r2, [r3, #28]
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a2f      	ldr	r2, [pc, #188]	@ (8005054 <TIM_Base_SetConfig+0xd0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0x30>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0x30>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8005058 <TIM_Base_SetConfig+0xd4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0x30>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a2b      	ldr	r2, [pc, #172]	@ (800505c <TIM_Base_SetConfig+0xd8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d108      	bne.n	8004fc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a22      	ldr	r2, [pc, #136]	@ (8005054 <TIM_Base_SetConfig+0xd0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <TIM_Base_SetConfig+0x62>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd4:	d007      	beq.n	8004fe6 <TIM_Base_SetConfig+0x62>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8005058 <TIM_Base_SetConfig+0xd4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d003      	beq.n	8004fe6 <TIM_Base_SetConfig+0x62>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800505c <TIM_Base_SetConfig+0xd8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d108      	bne.n	8004ff8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a0d      	ldr	r2, [pc, #52]	@ (8005054 <TIM_Base_SetConfig+0xd0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d103      	bne.n	800502c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f023 0201 	bic.w	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	611a      	str	r2, [r3, #16]
  }
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	40012c00 	.word	0x40012c00
 8005058:	40000400 	.word	0x40000400
 800505c:	40000800 	.word	0x40000800

08005060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f023 0201 	bic.w	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0303 	bic.w	r3, r3, #3
 8005096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f023 0302 	bic.w	r3, r3, #2
 80050a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <TIM_OC1_SetConfig+0xc8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10c      	bne.n	80050d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0308 	bic.w	r3, r3, #8
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 0304 	bic.w	r3, r3, #4
 80050d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a13      	ldr	r2, [pc, #76]	@ (8005128 <TIM_OC1_SetConfig+0xc8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d111      	bne.n	8005102 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	621a      	str	r2, [r3, #32]
}
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40012c00 	.word	0x40012c00

0800512c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	f023 0210 	bic.w	r2, r3, #16
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0320 	bic.w	r3, r3, #32
 8005176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a1d      	ldr	r2, [pc, #116]	@ (80051fc <TIM_OC2_SetConfig+0xd0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d10d      	bne.n	80051a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a14      	ldr	r2, [pc, #80]	@ (80051fc <TIM_OC2_SetConfig+0xd0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d113      	bne.n	80051d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr
 80051fc:	40012c00 	.word	0x40012c00

08005200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800522e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0303 	bic.w	r3, r3, #3
 8005236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a1d      	ldr	r2, [pc, #116]	@ (80052d0 <TIM_OC3_SetConfig+0xd0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d10d      	bne.n	800527a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a14      	ldr	r2, [pc, #80]	@ (80052d0 <TIM_OC3_SetConfig+0xd0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d113      	bne.n	80052aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	621a      	str	r2, [r3, #32]
}
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40012c00 	.word	0x40012c00

080052d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800530a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800531e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	031b      	lsls	r3, r3, #12
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a0f      	ldr	r2, [pc, #60]	@ (800536c <TIM_OC4_SetConfig+0x98>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d109      	bne.n	8005348 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800533a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	019b      	lsls	r3, r3, #6
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	621a      	str	r2, [r3, #32]
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr
 800536c:	40012c00 	.word	0x40012c00

08005370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f023 0201 	bic.w	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800539a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 030a 	bic.w	r3, r3, #10
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f023 0210 	bic.w	r2, r3, #16
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	031b      	lsls	r3, r3, #12
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005408:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	621a      	str	r2, [r3, #32]
}
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr

0800542a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	f043 0307 	orr.w	r3, r3, #7
 800544c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	609a      	str	r2, [r3, #8]
}
 8005454:	bf00      	nop
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr

0800545e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800545e:	b480      	push	{r7}
 8005460:	b087      	sub	sp, #28
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005478:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	021a      	lsls	r2, r3, #8
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	431a      	orrs	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4313      	orrs	r3, r2
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	609a      	str	r2, [r3, #8]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	2201      	movs	r2, #1
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a1a      	ldr	r2, [r3, #32]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	43db      	mvns	r3, r3
 80054be:	401a      	ands	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a1a      	ldr	r2, [r3, #32]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	fa01 f303 	lsl.w	r3, r1, r3
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e046      	b.n	800558a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a16      	ldr	r2, [pc, #88]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00e      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005548:	d009      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a12      	ldr	r2, [pc, #72]	@ (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d004      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a10      	ldr	r2, [pc, #64]	@ (800559c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d10c      	bne.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	4313      	orrs	r3, r2
 800556e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800

080055a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e03d      	b.n	8005638 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr

08005642 <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *Handle);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fd f812 	bl	8002674 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *Handle)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8005660:	e002      	b.n	8005668 <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 8005662:	2001      	movs	r0, #1
 8005664:	f7ff ffed 	bl	8005642 <WS28XX_Delay>
  while (Handle->Lock)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	795b      	ldrb	r3, [r3, #5]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f8      	bne.n	8005662 <WS28XX_Lock+0xa>
  }
  Handle->Lock = 1;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	715a      	strb	r2, [r3, #5]
}
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *Handle)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	715a      	strb	r2, [r3, #5]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr
	...

08005698 <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *Handle, TIM_HandleTypeDef *HTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4611      	mov	r1, r2
 80056a4:	461a      	mov	r2, r3
 80056a6:	460b      	mov	r3, r1
 80056a8:	80fb      	strh	r3, [r7, #6]
 80056aa:	4613      	mov	r3, r2
 80056ac:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 80056ae:	2300      	movs	r3, #0
 80056b0:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (Handle == NULL || HTim == NULL)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d07b      	beq.n	80057b0 <WS28XX_Init+0x118>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d078      	beq.n	80057b0 <WS28XX_Init+0x118>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 80056be:	8c3b      	ldrh	r3, [r7, #32]
 80056c0:	2ba1      	cmp	r3, #161	@ 0xa1
 80056c2:	d874      	bhi.n	80057ae <WS28XX_Init+0x116>
    {
      break;
    }
    Handle->Channel = Channel;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	797a      	ldrb	r2, [r7, #5]
 80056c8:	711a      	strb	r2, [r3, #4]
    Handle->MaxPixel = Pixel;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8c3a      	ldrh	r2, [r7, #32]
 80056ce:	815a      	strh	r2, [r3, #10]
    Handle->HTim = HTim;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 80056d6:	88fb      	ldrh	r3, [r7, #6]
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fb f837 	bl	800074c <__aeabi_i2f>
 80056de:	4603      	mov	r3, r0
 80056e0:	4936      	ldr	r1, [pc, #216]	@ (80057bc <WS28XX_Init+0x124>)
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fb f93a 	bl	800095c <__aeabi_fdiv>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fa ff76 	bl	80005e0 <__aeabi_fsub>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fb f9cc 	bl	8000a94 <__aeabi_f2uiz>
 80056fc:	4603      	mov	r3, r0
 80056fe:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(Handle->HTim ,aar_value);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	62da      	str	r2, [r3, #44]	@ 0x2c
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(Handle->HTim, 0);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2200      	movs	r2, #0
 800571a:	629a      	str	r2, [r3, #40]	@ 0x28
    Handle->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 800571c:	6938      	ldr	r0, [r7, #16]
 800571e:	f7fb f811 	bl	8000744 <__aeabi_ui2f>
 8005722:	4603      	mov	r3, r0
 8005724:	4926      	ldr	r1, [pc, #152]	@ (80057c0 <WS28XX_Init+0x128>)
 8005726:	4618      	mov	r0, r3
 8005728:	f7fb f864 	bl	80007f4 <__aeabi_fmul>
 800572c:	4603      	mov	r3, r0
 800572e:	4925      	ldr	r1, [pc, #148]	@ (80057c4 <WS28XX_Init+0x12c>)
 8005730:	4618      	mov	r0, r3
 8005732:	f7fb f913 	bl	800095c <__aeabi_fdiv>
 8005736:	4603      	mov	r3, r0
 8005738:	4618      	mov	r0, r3
 800573a:	f7fb f9ab 	bl	8000a94 <__aeabi_f2uiz>
 800573e:	4603      	mov	r3, r0
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	80da      	strh	r2, [r3, #6]
    Handle->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8005746:	6938      	ldr	r0, [r7, #16]
 8005748:	f7fa fffc 	bl	8000744 <__aeabi_ui2f>
 800574c:	4603      	mov	r3, r0
 800574e:	491b      	ldr	r1, [pc, #108]	@ (80057bc <WS28XX_Init+0x124>)
 8005750:	4618      	mov	r0, r3
 8005752:	f7fb f84f 	bl	80007f4 <__aeabi_fmul>
 8005756:	4603      	mov	r3, r0
 8005758:	491a      	ldr	r1, [pc, #104]	@ (80057c4 <WS28XX_Init+0x12c>)
 800575a:	4618      	mov	r0, r3
 800575c:	f7fb f8fe 	bl	800095c <__aeabi_fdiv>
 8005760:	4603      	mov	r3, r0
 8005762:	4618      	mov	r0, r3
 8005764:	f7fb f996 	bl	8000a94 <__aeabi_f2uiz>
 8005768:	4603      	mov	r3, r0
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	811a      	strh	r2, [r3, #8]
    memset(Handle->Pixel, 0, sizeof(Handle->Pixel));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	330c      	adds	r3, #12
 8005774:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8005778:	2100      	movs	r1, #0
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fa03 	bl	8005b86 <memset>
    memset(Handle->Buffer, 0, sizeof(Handle->Buffer));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8005786:	f640 721a 	movw	r2, #3866	@ 0xf1a
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f000 f9fa 	bl	8005b86 <memset>
    HAL_TIM_PWM_Start_DMA(Handle->HTim, Handle->Channel, (const uint32_t*)Handle->Buffer, Pixel);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	791b      	ldrb	r3, [r3, #4]
 800579a:	4619      	mov	r1, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f203 12ef 	addw	r2, r3, #495	@ 0x1ef
 80057a2:	8c3b      	ldrh	r3, [r7, #32]
 80057a4:	f7fe ff1a 	bl	80045dc <HAL_TIM_PWM_Start_DMA>
    answer = true;
 80057a8:	2301      	movs	r3, #1
 80057aa:	75fb      	strb	r3, [r7, #23]
 80057ac:	e000      	b.n	80057b0 <WS28XX_Init+0x118>
      break;
 80057ae:	bf00      	nop
  }
  while (0);

  return answer;
 80057b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	3f4ccccd 	.word	0x3f4ccccd
 80057c0:	3ecccccd 	.word	0x3ecccccd
 80057c4:	3fa00000 	.word	0x3fa00000

080057c8 <WS28XX_SetPixel_RGB_565>:
  * @param  Color: RGB565 Color Code
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGB_565(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint16_t Color)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	807b      	strh	r3, [r7, #2]
 80057d4:	4613      	mov	r3, r2
 80057d6:	803b      	strh	r3, [r7, #0]
  bool answer = true;
 80057d8:	2301      	movs	r3, #1
 80057da:	73fb      	strb	r3, [r7, #15]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	895b      	ldrh	r3, [r3, #10]
 80057e0:	887a      	ldrh	r2, [r7, #2]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d302      	bcc.n	80057ec <WS28XX_SetPixel_RGB_565+0x24>
    {
      answer = false;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]
      break;
 80057ea:	e034      	b.n	8005856 <WS28XX_SetPixel_RGB_565+0x8e>
    }
    Red = ((Color >> 8) & 0xF8);
 80057ec:	883b      	ldrh	r3, [r7, #0]
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f023 0307 	bic.w	r3, r3, #7
 80057f8:	73bb      	strb	r3, [r7, #14]
    Green = ((Color >> 3) & 0xFC);
 80057fa:	883b      	ldrh	r3, [r7, #0]
 80057fc:	08db      	lsrs	r3, r3, #3
 80057fe:	b29b      	uxth	r3, r3
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	737b      	strb	r3, [r7, #13]
    Blue = ((Color << 3) & 0xF8);
 8005808:	883b      	ldrh	r3, [r7, #0]
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	733b      	strb	r3, [r7, #12]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 800580e:	7b7b      	ldrb	r3, [r7, #13]
 8005810:	887a      	ldrh	r2, [r7, #2]
 8005812:	4914      	ldr	r1, [pc, #80]	@ (8005864 <WS28XX_SetPixel_RGB_565+0x9c>)
 8005814:	5cc8      	ldrb	r0, [r1, r3]
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	4413      	add	r3, r2
 800581e:	440b      	add	r3, r1
 8005820:	330c      	adds	r3, #12
 8005822:	4602      	mov	r2, r0
 8005824:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8005826:	7bbb      	ldrb	r3, [r7, #14]
 8005828:	887a      	ldrh	r2, [r7, #2]
 800582a:	490e      	ldr	r1, [pc, #56]	@ (8005864 <WS28XX_SetPixel_RGB_565+0x9c>)
 800582c:	5cc8      	ldrb	r0, [r1, r3]
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	4413      	add	r3, r2
 8005836:	440b      	add	r3, r1
 8005838:	330d      	adds	r3, #13
 800583a:	4602      	mov	r2, r0
 800583c:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 800583e:	7b3b      	ldrb	r3, [r7, #12]
 8005840:	887a      	ldrh	r2, [r7, #2]
 8005842:	4908      	ldr	r1, [pc, #32]	@ (8005864 <WS28XX_SetPixel_RGB_565+0x9c>)
 8005844:	5cc8      	ldrb	r0, [r1, r3]
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	4413      	add	r3, r2
 800584e:	440b      	add	r3, r1
 8005850:	330e      	adds	r3, #14
 8005852:	4602      	mov	r2, r0
 8005854:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8005856:	7bfb      	ldrb	r3, [r7, #15]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	08005c38 	.word	0x08005c38

08005868 <WS28XX_SetPixel_RGB_888>:
  * @param  Color: RGB888 Color Code
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGB_888(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint32_t Color)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	460b      	mov	r3, r1
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	817b      	strh	r3, [r7, #10]
  bool answer = true;
 8005876:	2301      	movs	r3, #1
 8005878:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	895b      	ldrh	r3, [r3, #10]
 800587e:	897a      	ldrh	r2, [r7, #10]
 8005880:	429a      	cmp	r2, r3
 8005882:	d302      	bcc.n	800588a <WS28XX_SetPixel_RGB_888+0x22>
    {
      answer = false;
 8005884:	2300      	movs	r3, #0
 8005886:	75fb      	strb	r3, [r7, #23]
      break;
 8005888:	e02b      	b.n	80058e2 <WS28XX_SetPixel_RGB_888+0x7a>
    }
    Red = ((Color & 0xFF0000) >> 16);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0c1b      	lsrs	r3, r3, #16
 800588e:	75bb      	strb	r3, [r7, #22]
    Green = ((Color & 0x00FF00) >> 8);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	0a1b      	lsrs	r3, r3, #8
 8005894:	757b      	strb	r3, [r7, #21]
    Blue = (Color & 0x0000FF);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 800589a:	7d7b      	ldrb	r3, [r7, #21]
 800589c:	897a      	ldrh	r2, [r7, #10]
 800589e:	4914      	ldr	r1, [pc, #80]	@ (80058f0 <WS28XX_SetPixel_RGB_888+0x88>)
 80058a0:	5cc8      	ldrb	r0, [r1, r3]
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	4613      	mov	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4413      	add	r3, r2
 80058aa:	440b      	add	r3, r1
 80058ac:	330c      	adds	r3, #12
 80058ae:	4602      	mov	r2, r0
 80058b0:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 80058b2:	7dbb      	ldrb	r3, [r7, #22]
 80058b4:	897a      	ldrh	r2, [r7, #10]
 80058b6:	490e      	ldr	r1, [pc, #56]	@ (80058f0 <WS28XX_SetPixel_RGB_888+0x88>)
 80058b8:	5cc8      	ldrb	r0, [r1, r3]
 80058ba:	68f9      	ldr	r1, [r7, #12]
 80058bc:	4613      	mov	r3, r2
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	4413      	add	r3, r2
 80058c2:	440b      	add	r3, r1
 80058c4:	330d      	adds	r3, #13
 80058c6:	4602      	mov	r2, r0
 80058c8:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 80058ca:	7d3b      	ldrb	r3, [r7, #20]
 80058cc:	897a      	ldrh	r2, [r7, #10]
 80058ce:	4908      	ldr	r1, [pc, #32]	@ (80058f0 <WS28XX_SetPixel_RGB_888+0x88>)
 80058d0:	5cc8      	ldrb	r0, [r1, r3]
 80058d2:	68f9      	ldr	r1, [r7, #12]
 80058d4:	4613      	mov	r3, r2
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	4413      	add	r3, r2
 80058da:	440b      	add	r3, r1
 80058dc:	330e      	adds	r3, #14
 80058de:	4602      	mov	r2, r0
 80058e0:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 80058e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	08005c38 	.word	0x08005c38

080058f4 <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	4608      	mov	r0, r1
 80058fe:	4611      	mov	r1, r2
 8005900:	461a      	mov	r2, r3
 8005902:	4603      	mov	r3, r0
 8005904:	817b      	strh	r3, [r7, #10]
 8005906:	460b      	mov	r3, r1
 8005908:	813b      	strh	r3, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	71fb      	strb	r3, [r7, #7]
  bool answer = true;
 800590e:	2301      	movs	r3, #1
 8005910:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	895b      	ldrh	r3, [r3, #10]
 8005916:	897a      	ldrh	r2, [r7, #10]
 8005918:	429a      	cmp	r2, r3
 800591a:	d302      	bcc.n	8005922 <WS28XX_SetPixel_RGBW_565+0x2e>
    {
      answer = false;
 800591c:	2300      	movs	r3, #0
 800591e:	75fb      	strb	r3, [r7, #23]
      break;
 8005920:	e051      	b.n	80059c6 <WS28XX_SetPixel_RGBW_565+0xd2>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 8005922:	893b      	ldrh	r3, [r7, #8]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	b29b      	uxth	r3, r3
 8005928:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800592c:	79fa      	ldrb	r2, [r7, #7]
 800592e:	fb02 f303 	mul.w	r3, r2, r3
 8005932:	4a28      	ldr	r2, [pc, #160]	@ (80059d4 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8005934:	fb82 1203 	smull	r1, r2, r2, r3
 8005938:	441a      	add	r2, r3
 800593a:	11d2      	asrs	r2, r2, #7
 800593c:	17db      	asrs	r3, r3, #31
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	75bb      	strb	r3, [r7, #22]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 8005942:	893b      	ldrh	r3, [r7, #8]
 8005944:	08db      	lsrs	r3, r3, #3
 8005946:	b29b      	uxth	r3, r3
 8005948:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 800594c:	79fa      	ldrb	r2, [r7, #7]
 800594e:	fb02 f303 	mul.w	r3, r2, r3
 8005952:	4a20      	ldr	r2, [pc, #128]	@ (80059d4 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8005954:	fb82 1203 	smull	r1, r2, r2, r3
 8005958:	441a      	add	r2, r3
 800595a:	11d2      	asrs	r2, r2, #7
 800595c:	17db      	asrs	r3, r3, #31
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	757b      	strb	r3, [r7, #21]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 8005962:	893b      	ldrh	r3, [r7, #8]
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	b2db      	uxtb	r3, r3
 8005968:	79fa      	ldrb	r2, [r7, #7]
 800596a:	fb02 f303 	mul.w	r3, r2, r3
 800596e:	4a19      	ldr	r2, [pc, #100]	@ (80059d4 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8005970:	fb82 1203 	smull	r1, r2, r2, r3
 8005974:	441a      	add	r2, r3
 8005976:	11d2      	asrs	r2, r2, #7
 8005978:	17db      	asrs	r3, r3, #31
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 800597e:	7d7b      	ldrb	r3, [r7, #21]
 8005980:	897a      	ldrh	r2, [r7, #10]
 8005982:	4915      	ldr	r1, [pc, #84]	@ (80059d8 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8005984:	5cc8      	ldrb	r0, [r1, r3]
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	4613      	mov	r3, r2
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	4413      	add	r3, r2
 800598e:	440b      	add	r3, r1
 8005990:	330c      	adds	r3, #12
 8005992:	4602      	mov	r2, r0
 8005994:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8005996:	7dbb      	ldrb	r3, [r7, #22]
 8005998:	897a      	ldrh	r2, [r7, #10]
 800599a:	490f      	ldr	r1, [pc, #60]	@ (80059d8 <WS28XX_SetPixel_RGBW_565+0xe4>)
 800599c:	5cc8      	ldrb	r0, [r1, r3]
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	4613      	mov	r3, r2
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	4413      	add	r3, r2
 80059a6:	440b      	add	r3, r1
 80059a8:	330d      	adds	r3, #13
 80059aa:	4602      	mov	r2, r0
 80059ac:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 80059ae:	7d3b      	ldrb	r3, [r7, #20]
 80059b0:	897a      	ldrh	r2, [r7, #10]
 80059b2:	4909      	ldr	r1, [pc, #36]	@ (80059d8 <WS28XX_SetPixel_RGBW_565+0xe4>)
 80059b4:	5cc8      	ldrb	r0, [r1, r3]
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	4613      	mov	r3, r2
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	4413      	add	r3, r2
 80059be:	440b      	add	r3, r1
 80059c0:	330e      	adds	r3, #14
 80059c2:	4602      	mov	r2, r0
 80059c4:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	80808081 	.word	0x80808081
 80059d8:	08005c38 	.word	0x08005c38

080059dc <WS28XX_SetPixel_RGBW_888>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_888(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint32_t Color, uint8_t Brightness)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	607a      	str	r2, [r7, #4]
 80059e6:	461a      	mov	r2, r3
 80059e8:	460b      	mov	r3, r1
 80059ea:	817b      	strh	r3, [r7, #10]
 80059ec:	4613      	mov	r3, r2
 80059ee:	727b      	strb	r3, [r7, #9]
  bool answer = true;
 80059f0:	2301      	movs	r3, #1
 80059f2:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	895b      	ldrh	r3, [r3, #10]
 80059f8:	897a      	ldrh	r2, [r7, #10]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d302      	bcc.n	8005a04 <WS28XX_SetPixel_RGBW_888+0x28>
    {
      answer = false;
 80059fe:	2300      	movs	r3, #0
 8005a00:	75fb      	strb	r3, [r7, #23]
      break;
 8005a02:	e043      	b.n	8005a8c <WS28XX_SetPixel_RGBW_888+0xb0>
    }
    Red = ((Color & 0xFF0000) >> 16) * Brightness / 255 ;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	0c1b      	lsrs	r3, r3, #16
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	7a7a      	ldrb	r2, [r7, #9]
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
 8005a10:	4a21      	ldr	r2, [pc, #132]	@ (8005a98 <WS28XX_SetPixel_RGBW_888+0xbc>)
 8005a12:	fba2 2303 	umull	r2, r3, r2, r3
 8005a16:	09db      	lsrs	r3, r3, #7
 8005a18:	75bb      	strb	r3, [r7, #22]
    Green = ((Color & 0x00FF00) >> 8) * Brightness / 255;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	0a1b      	lsrs	r3, r3, #8
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	7a7a      	ldrb	r2, [r7, #9]
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	4a1c      	ldr	r2, [pc, #112]	@ (8005a98 <WS28XX_SetPixel_RGBW_888+0xbc>)
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	09db      	lsrs	r3, r3, #7
 8005a2e:	757b      	strb	r3, [r7, #21]
    Blue = (Color & 0x0000FF) * Brightness / 255;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	7a7a      	ldrb	r2, [r7, #9]
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	4a17      	ldr	r2, [pc, #92]	@ (8005a98 <WS28XX_SetPixel_RGBW_888+0xbc>)
 8005a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a40:	09db      	lsrs	r3, r3, #7
 8005a42:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8005a44:	7d7b      	ldrb	r3, [r7, #21]
 8005a46:	897a      	ldrh	r2, [r7, #10]
 8005a48:	4914      	ldr	r1, [pc, #80]	@ (8005a9c <WS28XX_SetPixel_RGBW_888+0xc0>)
 8005a4a:	5cc8      	ldrb	r0, [r1, r3]
 8005a4c:	68f9      	ldr	r1, [r7, #12]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4413      	add	r3, r2
 8005a54:	440b      	add	r3, r1
 8005a56:	330c      	adds	r3, #12
 8005a58:	4602      	mov	r2, r0
 8005a5a:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8005a5c:	7dbb      	ldrb	r3, [r7, #22]
 8005a5e:	897a      	ldrh	r2, [r7, #10]
 8005a60:	490e      	ldr	r1, [pc, #56]	@ (8005a9c <WS28XX_SetPixel_RGBW_888+0xc0>)
 8005a62:	5cc8      	ldrb	r0, [r1, r3]
 8005a64:	68f9      	ldr	r1, [r7, #12]
 8005a66:	4613      	mov	r3, r2
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	4413      	add	r3, r2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	330d      	adds	r3, #13
 8005a70:	4602      	mov	r2, r0
 8005a72:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 8005a74:	7d3b      	ldrb	r3, [r7, #20]
 8005a76:	897a      	ldrh	r2, [r7, #10]
 8005a78:	4908      	ldr	r1, [pc, #32]	@ (8005a9c <WS28XX_SetPixel_RGBW_888+0xc0>)
 8005a7a:	5cc8      	ldrb	r0, [r1, r3]
 8005a7c:	68f9      	ldr	r1, [r7, #12]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	4413      	add	r3, r2
 8005a84:	440b      	add	r3, r1
 8005a86:	330e      	adds	r3, #14
 8005a88:	4602      	mov	r2, r0
 8005a8a:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr
 8005a98:	80808081 	.word	0x80808081
 8005a9c:	08005c38 	.word	0x08005c38

08005aa0 <WS28XX_Update>:
  * @param  *Handle: Pointer to WS28XX_HandleTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *Handle)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b089      	sub	sp, #36	@ 0x24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  bool answer = true;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	77fb      	strb	r3, [r7, #31]
  uint32_t i = 1;
 8005aac:	2301      	movs	r3, #1
 8005aae:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(Handle);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff fdd1 	bl	8005658 <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < Handle->MaxPixel; pixel++)
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	82fb      	strh	r3, [r7, #22]
 8005aba:	e03e      	b.n	8005b3a <WS28XX_Update+0x9a>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 8005abc:	2300      	movs	r3, #0
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	e035      	b.n	8005b2e <WS28XX_Update+0x8e>
    {
      for (int b = 7; b >= 0 ; b--)
 8005ac2:	2307      	movs	r3, #7
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e02c      	b.n	8005b22 <WS28XX_Update+0x82>
      {
        if ((Handle->Pixel[pixel][rgb] & (1 << b)) == 0)
 8005ac8:	8afa      	ldrh	r2, [r7, #22]
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	4413      	add	r3, r2
 8005ad2:	18ca      	adds	r2, r1, r3
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	330c      	adds	r3, #12
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	fa42 f303 	asr.w	r3, r2, r3
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10a      	bne.n	8005b02 <WS28XX_Update+0x62>
        {
          Handle->Buffer[i] = Handle->Pulse0;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	88db      	ldrh	r3, [r3, #6]
 8005af0:	b2d9      	uxtb	r1, r3
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	4413      	add	r3, r2
 8005af8:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8005afc:	460a      	mov	r2, r1
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e009      	b.n	8005b16 <WS28XX_Update+0x76>
        }
        else
        {
          Handle->Buffer[i] = Handle->Pulse1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	891b      	ldrh	r3, [r3, #8]
 8005b06:	b2d9      	uxtb	r1, r3
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8005b12:	460a      	mov	r2, r1
 8005b14:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	dacf      	bge.n	8005ac8 <WS28XX_Update+0x28>
    for (int rgb = 0; rgb < 3; rgb ++)
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	ddc6      	ble.n	8005ac2 <WS28XX_Update+0x22>
  for (uint16_t pixel = 0; pixel < Handle->MaxPixel; pixel++)
 8005b34:	8afb      	ldrh	r3, [r7, #22]
 8005b36:	3301      	adds	r3, #1
 8005b38:	82fb      	strh	r3, [r7, #22]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	895b      	ldrh	r3, [r3, #10]
 8005b3e:	8afa      	ldrh	r2, [r7, #22]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d3bb      	bcc.n	8005abc <WS28XX_Update+0x1c>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(Handle->HTim, Handle->Channel, (const uint32_t*)Handle->Buffer, (Handle->MaxPixel * 24) + 2) != HAL_OK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	791b      	ldrb	r3, [r3, #4]
 8005b4c:	461c      	mov	r4, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f203 12ef 	addw	r2, r3, #495	@ 0x1ef
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	895b      	ldrh	r3, [r3, #10]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	0049      	lsls	r1, r1, #1
 8005b5c:	440b      	add	r3, r1
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	3302      	adds	r3, #2
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	4621      	mov	r1, r4
 8005b68:	f7fe fd38 	bl	80045dc <HAL_TIM_PWM_Start_DMA>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <WS28XX_Update+0xd6>
  {
    answer = false;
 8005b72:	2300      	movs	r3, #0
 8005b74:	77fb      	strb	r3, [r7, #31]
  }
  WS28XX_UnLock(Handle);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff fd81 	bl	800567e <WS28XX_UnLock>
  return answer;
 8005b7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3724      	adds	r7, #36	@ 0x24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd90      	pop	{r4, r7, pc}

08005b86 <memset>:
 8005b86:	4603      	mov	r3, r0
 8005b88:	4402      	add	r2, r0
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d100      	bne.n	8005b90 <memset+0xa>
 8005b8e:	4770      	bx	lr
 8005b90:	f803 1b01 	strb.w	r1, [r3], #1
 8005b94:	e7f9      	b.n	8005b8a <memset+0x4>
	...

08005b98 <__libc_init_array>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	2600      	movs	r6, #0
 8005b9c:	4d0c      	ldr	r5, [pc, #48]	@ (8005bd0 <__libc_init_array+0x38>)
 8005b9e:	4c0d      	ldr	r4, [pc, #52]	@ (8005bd4 <__libc_init_array+0x3c>)
 8005ba0:	1b64      	subs	r4, r4, r5
 8005ba2:	10a4      	asrs	r4, r4, #2
 8005ba4:	42a6      	cmp	r6, r4
 8005ba6:	d109      	bne.n	8005bbc <__libc_init_array+0x24>
 8005ba8:	f000 f81a 	bl	8005be0 <_init>
 8005bac:	2600      	movs	r6, #0
 8005bae:	4d0a      	ldr	r5, [pc, #40]	@ (8005bd8 <__libc_init_array+0x40>)
 8005bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8005bdc <__libc_init_array+0x44>)
 8005bb2:	1b64      	subs	r4, r4, r5
 8005bb4:	10a4      	asrs	r4, r4, #2
 8005bb6:	42a6      	cmp	r6, r4
 8005bb8:	d105      	bne.n	8005bc6 <__libc_init_array+0x2e>
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc0:	4798      	blx	r3
 8005bc2:	3601      	adds	r6, #1
 8005bc4:	e7ee      	b.n	8005ba4 <__libc_init_array+0xc>
 8005bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bca:	4798      	blx	r3
 8005bcc:	3601      	adds	r6, #1
 8005bce:	e7f2      	b.n	8005bb6 <__libc_init_array+0x1e>
 8005bd0:	08005d38 	.word	0x08005d38
 8005bd4:	08005d38 	.word	0x08005d38
 8005bd8:	08005d38 	.word	0x08005d38
 8005bdc:	08005d3c 	.word	0x08005d3c

08005be0 <_init>:
 8005be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be2:	bf00      	nop
 8005be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be6:	bc08      	pop	{r3}
 8005be8:	469e      	mov	lr, r3
 8005bea:	4770      	bx	lr

08005bec <_fini>:
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bee:	bf00      	nop
 8005bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf2:	bc08      	pop	{r3}
 8005bf4:	469e      	mov	lr, r3
 8005bf6:	4770      	bx	lr
