
EVA_FrontZoneECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e08  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08003f14  08003f14  00004f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004038  08004038  00006020  2**0
                  CONTENTS
  4 .ARM          00000000  08004038  08004038  00006020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004038  08004038  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004038  08004038  00005038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800403c  0800403c  0000503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08004040  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034b0  20000020  08004060  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200034d0  08004060  000064d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097f8  00000000  00000000  00006049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e33  00000000  00000000  0000f841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00011678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000868  00000000  00000000  00012168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ce7  00000000  00000000  000129d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d132  00000000  00000000  0002a6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008903d  00000000  00000000  000377e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c8c  00000000  00000000  000c086c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c34f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08003efc 	.word	0x08003efc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08003efc 	.word	0x08003efc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_DMA_Init+0x58>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a13      	ldr	r2, [pc, #76]	@ (80006a0 <MX_DMA_Init+0x58>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_DMA_Init+0x58>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	200c      	movs	r0, #12
 800066c:	f001 fa1b 	bl	8001aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000670:	200c      	movs	r0, #12
 8000672:	f001 fa34 	bl	8001ade <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200d      	movs	r0, #13
 800067c:	f001 fa13 	bl	8001aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000680:	200d      	movs	r0, #13
 8000682:	f001 fa2c 	bl	8001ade <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	2010      	movs	r0, #16
 800068c:	f001 fa0b 	bl	8001aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000690:	2010      	movs	r0, #16
 8000692:	f001 fa24 	bl	8001ade <HAL_NVIC_EnableIRQ>

}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <MX_GPIO_Init+0x28>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <MX_GPIO_Init+0x28>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <MX_GPIO_Init+0x28>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f001 f889 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f845 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f7ff ffe1 	bl	80006a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e2:	f7ff ffb1 	bl	8000648 <MX_DMA_Init>
  MX_TIM1_Init();
 80006e6:	f000 fecf 	bl	8001488 <MX_TIM1_Init>
  GPIO_Init_PA0_PA1_PA6();
 80006ea:	f000 f87d 	bl	80007e8 <GPIO_Init_PA0_PA1_PA6>
  /* USER CODE BEGIN 2 */
  WS28XX_Init(&ws_pa8, &htim1, 36, TIM_CHANNEL_1, WS28XX_LEFT_LED_COUNT);   // Initialize for PA8
 80006ee:	230d      	movs	r3, #13
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2300      	movs	r3, #0
 80006f4:	2224      	movs	r2, #36	@ 0x24
 80006f6:	4917      	ldr	r1, [pc, #92]	@ (8000754 <main+0x84>)
 80006f8:	4817      	ldr	r0, [pc, #92]	@ (8000758 <main+0x88>)
 80006fa:	f003 f9bd 	bl	8003a78 <WS28XX_Init>
  WS28XX_Init(&ws_pa9, &htim1, 36, TIM_CHANNEL_2, WS28XX_MIDDLE_LED_COUNT); // Initialize for PA9 (middle strip)
 80006fe:	230f      	movs	r3, #15
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2304      	movs	r3, #4
 8000704:	2224      	movs	r2, #36	@ 0x24
 8000706:	4913      	ldr	r1, [pc, #76]	@ (8000754 <main+0x84>)
 8000708:	4814      	ldr	r0, [pc, #80]	@ (800075c <main+0x8c>)
 800070a:	f003 f9b5 	bl	8003a78 <WS28XX_Init>
  WS28XX_Init(&ws_pa10, &htim1, 36, TIM_CHANNEL_3, WS28XX_RIGHT_LED_COUNT); // Initialize for PA10
 800070e:	230d      	movs	r3, #13
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2308      	movs	r3, #8
 8000714:	2224      	movs	r2, #36	@ 0x24
 8000716:	490f      	ldr	r1, [pc, #60]	@ (8000754 <main+0x84>)
 8000718:	4811      	ldr	r0, [pc, #68]	@ (8000760 <main+0x90>)
 800071a:	f003 f9ad 	bl	8003a78 <WS28XX_Init>
  SetGPIOHigh(GPIOA, GPIO_PIN_0);  //  Horn Off
 800071e:	2101      	movs	r1, #1
 8000720:	4810      	ldr	r0, [pc, #64]	@ (8000764 <main+0x94>)
 8000722:	f000 fcdb 	bl	80010dc <SetGPIOHigh>
  SetGPIOHigh(GPIOA, GPIO_PIN_1);  //  Head Lamp off
 8000726:	2102      	movs	r1, #2
 8000728:	480e      	ldr	r0, [pc, #56]	@ (8000764 <main+0x94>)
 800072a:	f000 fcd7 	bl	80010dc <SetGPIOHigh>
  SetGPIOHigh(GPIOA, GPIO_PIN_6);  //  Low Beam
 800072e:	2140      	movs	r1, #64	@ 0x40
 8000730:	480c      	ldr	r0, [pc, #48]	@ (8000764 <main+0x94>)
 8000732:	f000 fcd3 	bl	80010dc <SetGPIOHigh>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		#ifdef TEST_MODE
			Handle_TestMode();  // Call the test mode handler
 8000736:	f000 fd55 	bl	80011e4 <Handle_TestMode>
		#endif

		// ========================
		// Handle State Machines
		// ========================
		HandleMiddleStripState();
 800073a:	f000 f89b 	bl	8000874 <HandleMiddleStripState>
		HandleLeftStripState();
 800073e:	f000 f8e7 	bl	8000910 <HandleLeftStripState>
		HandleRightStripState();
 8000742:	f000 f983 	bl	8000a4c <HandleRightStripState>
		HandleHornState();
 8000746:	f000 fce9 	bl	800111c <HandleHornState>
		HandleHeadlampState();
 800074a:	f000 fd0b 	bl	8001164 <HandleHeadlampState>
			Handle_TestMode();  // Call the test mode handler
 800074e:	bf00      	nop
 8000750:	e7f1      	b.n	8000736 <main+0x66>
 8000752:	bf00      	nop
 8000754:	200033b8 	.word	0x200033b8
 8000758:	2000003c 	.word	0x2000003c
 800075c:	20001148 	.word	0x20001148
 8000760:	20002254 	.word	0x20002254
 8000764:	40010800 	.word	0x40010800

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b090      	sub	sp, #64	@ 0x40
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	2228      	movs	r2, #40	@ 0x28
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f003 fb93 	bl	8003ea2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000792:	2310      	movs	r3, #16
 8000794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800079a:	2300      	movs	r3, #0
 800079c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800079e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0318 	add.w	r3, r7, #24
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fd3d 	bl	8002228 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007b4:	f000 fde0 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2101      	movs	r1, #1
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 ffab 	bl	800272c <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80007dc:	f000 fdcc 	bl	8001378 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3740      	adds	r7, #64	@ 0x40
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <GPIO_Init_PA0_PA1_PA6>:

/* USER CODE BEGIN 4 */
void GPIO_Init_PA0_PA1_PA6(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (assuming it's AHB1 on your microcontroller)
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // Enable clock for GPIOA
 80007ec:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <GPIO_Init_PA0_PA1_PA6+0x84>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a1e      	ldr	r2, [pc, #120]	@ (800086c <GPIO_Init_PA0_PA1_PA6+0x84>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]

    // Configure PA0, PA1, PA6 as output, push-pull, high-speed

    // PA0 Configuration
    GPIOA->CRL &= ~GPIO_CRL_CNF0;   // Clear CNF0[1:0] (set as push-pull)
 80007f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 80007fe:	f023 030c 	bic.w	r3, r3, #12
 8000802:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_MODE0_1 | GPIO_CRL_MODE0_0;  // Set MODE0 to 11 (high-speed output 50 MHz)
 8000804:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a19      	ldr	r2, [pc, #100]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 800080a:	f043 0303 	orr.w	r3, r3, #3
 800080e:	6013      	str	r3, [r2, #0]

    // PA1 Configuration
    GPIOA->CRL &= ~GPIO_CRL_CNF1;   // Clear CNF1[1:0] (set as push-pull)
 8000810:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a16      	ldr	r2, [pc, #88]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000816:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800081a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_MODE1_1 | GPIO_CRL_MODE1_0;  // Set MODE1 to 11 (high-speed output 50 MHz)
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a13      	ldr	r2, [pc, #76]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000822:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000826:	6013      	str	r3, [r2, #0]

    // PA6 Configuration
    GPIOA->CRL &= ~GPIO_CRL_CNF6;   // Clear CNF6[1:0] (set as push-pull)
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a10      	ldr	r2, [pc, #64]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 800082e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000832:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_MODE6_1 | GPIO_CRL_MODE6_0;  // Set MODE6 to 11 (high-speed output 50 MHz)
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0d      	ldr	r2, [pc, #52]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 800083a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800083e:	6013      	str	r3, [r2, #0]

    // Set PA0, PA1, PA6 initially to high (deactivate relays)
    GPIOA->ODR |= GPIO_ODR_ODR0;  // Set PA0 high
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	60d3      	str	r3, [r2, #12]
    GPIOA->ODR |= GPIO_ODR_ODR1;  // Set PA1 high
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	4a07      	ldr	r2, [pc, #28]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 8000852:	f043 0302 	orr.w	r3, r3, #2
 8000856:	60d3      	str	r3, [r2, #12]
    GPIOA->ODR |= GPIO_ODR_ODR6;  // Set PA6 high
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <GPIO_Init_PA0_PA1_PA6+0x88>)
 800085e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	40021000 	.word	0x40021000
 8000870:	40010800 	.word	0x40010800

08000874 <HandleMiddleStripState>:

/**
  * @brief Handle the priority and state of the middle strip (PA9)
  */
void HandleMiddleStripState(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
    if (charging_signal_received) {
 8000878:	4b20      	ldr	r3, [pc, #128]	@ (80008fc <HandleMiddleStripState+0x88>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d003      	beq.n	8000888 <HandleMiddleStripState+0x14>
        current_mode_pa9 = CHARGING_MODE;
 8000880:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <HandleMiddleStripState+0x8c>)
 8000882:	2204      	movs	r2, #4
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	e016      	b.n	80008b6 <HandleMiddleStripState+0x42>
    }
    else if (drl_signal_received && current_mode_pa9 != CHARGING_MODE) {
 8000888:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <HandleMiddleStripState+0x90>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d007      	beq.n	80008a0 <HandleMiddleStripState+0x2c>
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <HandleMiddleStripState+0x8c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b04      	cmp	r3, #4
 8000896:	d003      	beq.n	80008a0 <HandleMiddleStripState+0x2c>
        current_mode_pa9 = DRL_MODE;
 8000898:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <HandleMiddleStripState+0x8c>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	e00a      	b.n	80008b6 <HandleMiddleStripState+0x42>
    }
    else if (!charging_signal_received && !drl_signal_received) {
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <HandleMiddleStripState+0x88>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d106      	bne.n	80008b6 <HandleMiddleStripState+0x42>
 80008a8:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <HandleMiddleStripState+0x90>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <HandleMiddleStripState+0x42>
        current_mode_pa9 = STARTUP_MODE;
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <HandleMiddleStripState+0x8c>)
 80008b2:	2203      	movs	r2, #3
 80008b4:	701a      	strb	r2, [r3, #0]
    }

    // State machine for middle strip (PA9)
    switch (current_mode_pa9) {
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HandleMiddleStripState+0x8c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d006      	beq.n	80008cc <HandleMiddleStripState+0x58>
 80008be:	2b04      	cmp	r3, #4
 80008c0:	dc15      	bgt.n	80008ee <HandleMiddleStripState+0x7a>
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d00a      	beq.n	80008dc <HandleMiddleStripState+0x68>
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d00d      	beq.n	80008e6 <HandleMiddleStripState+0x72>
 80008ca:	e010      	b.n	80008ee <HandleMiddleStripState+0x7a>
        case CHARGING_MODE:
            UpdateSOCIndication(&ws_pa9, soc_percentage, DC_CHARGING);
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HandleMiddleStripState+0x94>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2202      	movs	r2, #2
 80008d2:	4619      	mov	r1, r3
 80008d4:	480d      	ldr	r0, [pc, #52]	@ (800090c <HandleMiddleStripState+0x98>)
 80008d6:	f000 fb3f 	bl	8000f58 <UpdateSOCIndication>
            break;
 80008da:	e00c      	b.n	80008f6 <HandleMiddleStripState+0x82>
        case DRL_MODE:
            UpdateDRLMode(&ws_pa9, WS28XX_MIDDLE_LED_COUNT);
 80008dc:	210f      	movs	r1, #15
 80008de:	480b      	ldr	r0, [pc, #44]	@ (800090c <HandleMiddleStripState+0x98>)
 80008e0:	f000 f986 	bl	8000bf0 <UpdateDRLMode>
            break;
 80008e4:	e007      	b.n	80008f6 <HandleMiddleStripState+0x82>
        case STARTUP_MODE:
            UpdateStartupWaveForMiddle(&ws_pa9);
 80008e6:	4809      	ldr	r0, [pc, #36]	@ (800090c <HandleMiddleStripState+0x98>)
 80008e8:	f000 fa1e 	bl	8000d28 <UpdateStartupWaveForMiddle>
            break;
 80008ec:	e003      	b.n	80008f6 <HandleMiddleStripState+0x82>
        default:
            current_mode_pa9 = DRL_MODE;
 80008ee:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <HandleMiddleStripState+0x8c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
            break;
 80008f4:	bf00      	nop
    }
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20003370 	.word	0x20003370
 8000900:	20003361 	.word	0x20003361
 8000904:	20000004 	.word	0x20000004
 8000908:	20000000 	.word	0x20000000
 800090c:	20001148 	.word	0x20001148

08000910 <HandleLeftStripState>:

/**
  * @brief Handle the priority and state of the left strip (PA8)
  */
void HandleLeftStripState(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    // Priority management for left strip
    if (charging_signal_received) {
 8000914:	4b46      	ldr	r3, [pc, #280]	@ (8000a30 <HandleLeftStripState+0x120>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d00b      	beq.n	8000934 <HandleLeftStripState+0x24>
        // Check for hazard mode during charging mode
        if (hazard_signal_received) {
 800091c:	4b45      	ldr	r3, [pc, #276]	@ (8000a34 <HandleLeftStripState+0x124>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d003      	beq.n	800092c <HandleLeftStripState+0x1c>
            current_mode_pa8 = HAZARD_LIGHT_MODE;
 8000924:	4b44      	ldr	r3, [pc, #272]	@ (8000a38 <HandleLeftStripState+0x128>)
 8000926:	2202      	movs	r2, #2
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	e02a      	b.n	8000982 <HandleLeftStripState+0x72>
        } else {
            current_mode_pa8 = CHARGING_MODE;  // Side strips off in charging mode unless hazard is active
 800092c:	4b42      	ldr	r3, [pc, #264]	@ (8000a38 <HandleLeftStripState+0x128>)
 800092e:	2204      	movs	r2, #4
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e026      	b.n	8000982 <HandleLeftStripState+0x72>
        }
    }
    else if (hazard_signal_received) {
 8000934:	4b3f      	ldr	r3, [pc, #252]	@ (8000a34 <HandleLeftStripState+0x124>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d003      	beq.n	8000944 <HandleLeftStripState+0x34>
        current_mode_pa8 = HAZARD_LIGHT_MODE;
 800093c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a38 <HandleLeftStripState+0x128>)
 800093e:	2202      	movs	r2, #2
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	e01e      	b.n	8000982 <HandleLeftStripState+0x72>
    }
    else if (turn_signal_left_received && !hazard_signal_received) {
 8000944:	4b3d      	ldr	r3, [pc, #244]	@ (8000a3c <HandleLeftStripState+0x12c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d007      	beq.n	800095c <HandleLeftStripState+0x4c>
 800094c:	4b39      	ldr	r3, [pc, #228]	@ (8000a34 <HandleLeftStripState+0x124>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d103      	bne.n	800095c <HandleLeftStripState+0x4c>
        current_mode_pa8 = TURN_SIGNAL_MODE;
 8000954:	4b38      	ldr	r3, [pc, #224]	@ (8000a38 <HandleLeftStripState+0x128>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	e012      	b.n	8000982 <HandleLeftStripState+0x72>
    }
    else if (drl_signal_received && !hazard_signal_received && !turn_signal_left_received) {
 800095c:	4b38      	ldr	r3, [pc, #224]	@ (8000a40 <HandleLeftStripState+0x130>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00b      	beq.n	800097c <HandleLeftStripState+0x6c>
 8000964:	4b33      	ldr	r3, [pc, #204]	@ (8000a34 <HandleLeftStripState+0x124>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d107      	bne.n	800097c <HandleLeftStripState+0x6c>
 800096c:	4b33      	ldr	r3, [pc, #204]	@ (8000a3c <HandleLeftStripState+0x12c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d103      	bne.n	800097c <HandleLeftStripState+0x6c>
        current_mode_pa8 = DRL_MODE;
 8000974:	4b30      	ldr	r3, [pc, #192]	@ (8000a38 <HandleLeftStripState+0x128>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	e002      	b.n	8000982 <HandleLeftStripState+0x72>
    }
    else {
        current_mode_pa8 = STARTUP_MODE;
 800097c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a38 <HandleLeftStripState+0x128>)
 800097e:	2203      	movs	r2, #3
 8000980:	701a      	strb	r2, [r3, #0]
    }

    // State machine for left strip (PA8)
    switch (current_mode_pa8) {
 8000982:	4b2d      	ldr	r3, [pc, #180]	@ (8000a38 <HandleLeftStripState+0x128>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b04      	cmp	r3, #4
 8000988:	d84b      	bhi.n	8000a22 <HandleLeftStripState+0x112>
 800098a:	a201      	add	r2, pc, #4	@ (adr r2, 8000990 <HandleLeftStripState+0x80>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	080009f3 	.word	0x080009f3
 8000994:	080009c5 	.word	0x080009c5
 8000998:	080009af 	.word	0x080009af
 800099c:	08000a03 	.word	0x08000a03
 80009a0:	080009a5 	.word	0x080009a5
        case CHARGING_MODE:
            ResetLEDStrip(&ws_pa8, WS28XX_LEFT_LED_COUNT);  // Turn off left strip in charging mode
 80009a4:	210d      	movs	r1, #13
 80009a6:	4827      	ldr	r0, [pc, #156]	@ (8000a44 <HandleLeftStripState+0x134>)
 80009a8:	f000 f9a0 	bl	8000cec <ResetLEDStrip>
            break;
 80009ac:	e03d      	b.n	8000a2a <HandleLeftStripState+0x11a>

        case HAZARD_LIGHT_MODE:
            frame_pa8 = 0;
 80009ae:	4b26      	ldr	r3, [pc, #152]	@ (8000a48 <HandleLeftStripState+0x138>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
            UpdateHazardBlink(WS28XX_LEFT_LED_COUNT);
 80009b4:	200d      	movs	r0, #13
 80009b6:	f000 f94d 	bl	8000c54 <UpdateHazardBlink>
            HAL_Delay(HAZARD_BLINK_DELAY);
 80009ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009be:	f000 ff77 	bl	80018b0 <HAL_Delay>
            break;
 80009c2:	e032      	b.n	8000a2a <HandleLeftStripState+0x11a>

        case TURN_SIGNAL_MODE:
            UpdateWaveEffect(&ws_pa8, frame_pa8, WS28XX_LEFT_LED_COUNT);
 80009c4:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <HandleLeftStripState+0x138>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	220d      	movs	r2, #13
 80009ca:	4619      	mov	r1, r3
 80009cc:	481d      	ldr	r0, [pc, #116]	@ (8000a44 <HandleLeftStripState+0x134>)
 80009ce:	f000 f8db 	bl	8000b88 <UpdateWaveEffect>
            frame_pa8 += WAVE_STEP_SIZE;
 80009d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <HandleLeftStripState+0x138>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a48 <HandleLeftStripState+0x138>)
 80009da:	6013      	str	r3, [r2, #0]
            if (frame_pa8 >= WS28XX_LEFT_LED_COUNT) frame_pa8 = 0;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <HandleLeftStripState+0x138>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b0c      	cmp	r3, #12
 80009e2:	dd02      	ble.n	80009ea <HandleLeftStripState+0xda>
 80009e4:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <HandleLeftStripState+0x138>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
            HAL_Delay(WAVE_SPEED);
 80009ea:	2014      	movs	r0, #20
 80009ec:	f000 ff60 	bl	80018b0 <HAL_Delay>
            break;
 80009f0:	e01b      	b.n	8000a2a <HandleLeftStripState+0x11a>

        case DRL_MODE:
            frame_pa8 = 0;
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <HandleLeftStripState+0x138>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
            UpdateDRLMode(&ws_pa8, WS28XX_LEFT_LED_COUNT);
 80009f8:	210d      	movs	r1, #13
 80009fa:	4812      	ldr	r0, [pc, #72]	@ (8000a44 <HandleLeftStripState+0x134>)
 80009fc:	f000 f8f8 	bl	8000bf0 <UpdateDRLMode>
            break;
 8000a00:	e013      	b.n	8000a2a <HandleLeftStripState+0x11a>

        case STARTUP_MODE:
            UpdateWaveEffect(&ws_pa8, frame_pa8, WS28XX_LEFT_LED_COUNT);
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <HandleLeftStripState+0x138>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	220d      	movs	r2, #13
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480e      	ldr	r0, [pc, #56]	@ (8000a44 <HandleLeftStripState+0x134>)
 8000a0c:	f000 f8bc 	bl	8000b88 <UpdateWaveEffect>
            frame_pa8 += WAVE_STEP_SIZE;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <HandleLeftStripState+0x138>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <HandleLeftStripState+0x138>)
 8000a18:	6013      	str	r3, [r2, #0]
            HAL_Delay(WAVE_SPEED);
 8000a1a:	2014      	movs	r0, #20
 8000a1c:	f000 ff48 	bl	80018b0 <HAL_Delay>
            break;
 8000a20:	e003      	b.n	8000a2a <HandleLeftStripState+0x11a>

        default:
            current_mode_pa8 = DRL_MODE;
 8000a22:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HandleLeftStripState+0x128>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
            break;
 8000a28:	bf00      	nop
    }
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20003370 	.word	0x20003370
 8000a34:	20003374 	.word	0x20003374
 8000a38:	20003360 	.word	0x20003360
 8000a3c:	20003378 	.word	0x20003378
 8000a40:	20000004 	.word	0x20000004
 8000a44:	2000003c 	.word	0x2000003c
 8000a48:	20003368 	.word	0x20003368

08000a4c <HandleRightStripState>:

/**
  * @brief Handle the priority and state of the right strip (PA10)
  */
void HandleRightStripState(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    // Priority management for right strip
    if (charging_signal_received) {
 8000a50:	4b46      	ldr	r3, [pc, #280]	@ (8000b6c <HandleRightStripState+0x120>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00b      	beq.n	8000a70 <HandleRightStripState+0x24>
        // Check for hazard mode during charging mode
        if (hazard_signal_received) {
 8000a58:	4b45      	ldr	r3, [pc, #276]	@ (8000b70 <HandleRightStripState+0x124>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <HandleRightStripState+0x1c>
            current_mode_pa10 = HAZARD_LIGHT_MODE;
 8000a60:	4b44      	ldr	r3, [pc, #272]	@ (8000b74 <HandleRightStripState+0x128>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	e02a      	b.n	8000abe <HandleRightStripState+0x72>
        } else {
            current_mode_pa10 = CHARGING_MODE;  // Side strips off in charging mode unless hazard is active
 8000a68:	4b42      	ldr	r3, [pc, #264]	@ (8000b74 <HandleRightStripState+0x128>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	701a      	strb	r2, [r3, #0]
 8000a6e:	e026      	b.n	8000abe <HandleRightStripState+0x72>
        }
    }
    else if (hazard_signal_received) {
 8000a70:	4b3f      	ldr	r3, [pc, #252]	@ (8000b70 <HandleRightStripState+0x124>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <HandleRightStripState+0x34>
        current_mode_pa10 = HAZARD_LIGHT_MODE;
 8000a78:	4b3e      	ldr	r3, [pc, #248]	@ (8000b74 <HandleRightStripState+0x128>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	e01e      	b.n	8000abe <HandleRightStripState+0x72>
    }
    else if (turn_signal_right_received && !hazard_signal_received) {
 8000a80:	4b3d      	ldr	r3, [pc, #244]	@ (8000b78 <HandleRightStripState+0x12c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d007      	beq.n	8000a98 <HandleRightStripState+0x4c>
 8000a88:	4b39      	ldr	r3, [pc, #228]	@ (8000b70 <HandleRightStripState+0x124>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d103      	bne.n	8000a98 <HandleRightStripState+0x4c>
        current_mode_pa10 = TURN_SIGNAL_MODE;
 8000a90:	4b38      	ldr	r3, [pc, #224]	@ (8000b74 <HandleRightStripState+0x128>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	e012      	b.n	8000abe <HandleRightStripState+0x72>
    }
    else if (drl_signal_received && !hazard_signal_received && !turn_signal_right_received) {
 8000a98:	4b38      	ldr	r3, [pc, #224]	@ (8000b7c <HandleRightStripState+0x130>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d00b      	beq.n	8000ab8 <HandleRightStripState+0x6c>
 8000aa0:	4b33      	ldr	r3, [pc, #204]	@ (8000b70 <HandleRightStripState+0x124>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d107      	bne.n	8000ab8 <HandleRightStripState+0x6c>
 8000aa8:	4b33      	ldr	r3, [pc, #204]	@ (8000b78 <HandleRightStripState+0x12c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d103      	bne.n	8000ab8 <HandleRightStripState+0x6c>
        current_mode_pa10 = DRL_MODE;
 8000ab0:	4b30      	ldr	r3, [pc, #192]	@ (8000b74 <HandleRightStripState+0x128>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e002      	b.n	8000abe <HandleRightStripState+0x72>
    }
    else {
        current_mode_pa10 = STARTUP_MODE;
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b74 <HandleRightStripState+0x128>)
 8000aba:	2203      	movs	r2, #3
 8000abc:	701a      	strb	r2, [r3, #0]
    }

    // State machine for right strip (PA10)
    switch (current_mode_pa10) {
 8000abe:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <HandleRightStripState+0x128>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d84b      	bhi.n	8000b5e <HandleRightStripState+0x112>
 8000ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8000acc <HandleRightStripState+0x80>)
 8000ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000acc:	08000b2f 	.word	0x08000b2f
 8000ad0:	08000b01 	.word	0x08000b01
 8000ad4:	08000aeb 	.word	0x08000aeb
 8000ad8:	08000b3f 	.word	0x08000b3f
 8000adc:	08000ae1 	.word	0x08000ae1
        case CHARGING_MODE:
            ResetLEDStrip(&ws_pa10, WS28XX_RIGHT_LED_COUNT);  // Turn off right strip in charging mode
 8000ae0:	210d      	movs	r1, #13
 8000ae2:	4827      	ldr	r0, [pc, #156]	@ (8000b80 <HandleRightStripState+0x134>)
 8000ae4:	f000 f902 	bl	8000cec <ResetLEDStrip>
            break;
 8000ae8:	e03d      	b.n	8000b66 <HandleRightStripState+0x11a>

        case HAZARD_LIGHT_MODE:
            frame_pa10 = 0;
 8000aea:	4b26      	ldr	r3, [pc, #152]	@ (8000b84 <HandleRightStripState+0x138>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
            UpdateHazardBlink(WS28XX_RIGHT_LED_COUNT);
 8000af0:	200d      	movs	r0, #13
 8000af2:	f000 f8af 	bl	8000c54 <UpdateHazardBlink>
            HAL_Delay(HAZARD_BLINK_DELAY);
 8000af6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000afa:	f000 fed9 	bl	80018b0 <HAL_Delay>
            break;
 8000afe:	e032      	b.n	8000b66 <HandleRightStripState+0x11a>

        case TURN_SIGNAL_MODE:
            UpdateWaveEffect(&ws_pa10, frame_pa10, WS28XX_RIGHT_LED_COUNT);
 8000b00:	4b20      	ldr	r3, [pc, #128]	@ (8000b84 <HandleRightStripState+0x138>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	220d      	movs	r2, #13
 8000b06:	4619      	mov	r1, r3
 8000b08:	481d      	ldr	r0, [pc, #116]	@ (8000b80 <HandleRightStripState+0x134>)
 8000b0a:	f000 f83d 	bl	8000b88 <UpdateWaveEffect>
            frame_pa10 += WAVE_STEP_SIZE;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <HandleRightStripState+0x138>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	4a1b      	ldr	r2, [pc, #108]	@ (8000b84 <HandleRightStripState+0x138>)
 8000b16:	6013      	str	r3, [r2, #0]
            if (frame_pa10 >= WS28XX_RIGHT_LED_COUNT) frame_pa10 = 0;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <HandleRightStripState+0x138>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b0c      	cmp	r3, #12
 8000b1e:	dd02      	ble.n	8000b26 <HandleRightStripState+0xda>
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <HandleRightStripState+0x138>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
            HAL_Delay(WAVE_SPEED);
 8000b26:	2014      	movs	r0, #20
 8000b28:	f000 fec2 	bl	80018b0 <HAL_Delay>
            break;
 8000b2c:	e01b      	b.n	8000b66 <HandleRightStripState+0x11a>

        case DRL_MODE:
            frame_pa10 = 0;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <HandleRightStripState+0x138>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
            UpdateDRLMode(&ws_pa10, WS28XX_RIGHT_LED_COUNT);
 8000b34:	210d      	movs	r1, #13
 8000b36:	4812      	ldr	r0, [pc, #72]	@ (8000b80 <HandleRightStripState+0x134>)
 8000b38:	f000 f85a 	bl	8000bf0 <UpdateDRLMode>
            break;
 8000b3c:	e013      	b.n	8000b66 <HandleRightStripState+0x11a>

        case STARTUP_MODE:
            UpdateWaveEffect(&ws_pa10, frame_pa10, WS28XX_RIGHT_LED_COUNT);
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <HandleRightStripState+0x138>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	220d      	movs	r2, #13
 8000b44:	4619      	mov	r1, r3
 8000b46:	480e      	ldr	r0, [pc, #56]	@ (8000b80 <HandleRightStripState+0x134>)
 8000b48:	f000 f81e 	bl	8000b88 <UpdateWaveEffect>
            frame_pa10 += WAVE_STEP_SIZE;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <HandleRightStripState+0x138>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a0c      	ldr	r2, [pc, #48]	@ (8000b84 <HandleRightStripState+0x138>)
 8000b54:	6013      	str	r3, [r2, #0]
            HAL_Delay(WAVE_SPEED);
 8000b56:	2014      	movs	r0, #20
 8000b58:	f000 feaa 	bl	80018b0 <HAL_Delay>
            break;
 8000b5c:	e003      	b.n	8000b66 <HandleRightStripState+0x11a>

        default:
            current_mode_pa10 = DRL_MODE;
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HandleRightStripState+0x128>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
            break;
 8000b64:	bf00      	nop
    }
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20003370 	.word	0x20003370
 8000b70:	20003374 	.word	0x20003374
 8000b74:	20003362 	.word	0x20003362
 8000b78:	2000337c 	.word	0x2000337c
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	20002254 	.word	0x20002254
 8000b84:	2000336c 	.word	0x2000336c

08000b88 <UpdateWaveEffect>:
  * @param frame: Current frame number for the wave effect
  * @param pixel_count: Number of pixels in the strip
  * @retval None
  */
void UpdateWaveEffect(WS28XX_HandleTypeDef* ws, int frame, int pixel_count)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
    ResetLEDStrip(ws, pixel_count);  // Ensure all LEDs are reset to black before updating
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f000 f8a8 	bl	8000cec <ResetLEDStrip>

/* USER CODE BEGIN 4 */

void UpdateWaveEffect(WS28XX_HandleTypeDef* ws, int frame, int pixel_count) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
    ResetLEDStrip(ws, pixel_count);
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f000 f8a0 	bl	8000b78 <ResetLEDStrip>
    for (int i = 0; i < pixel_count; i++) {
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	e01b      	b.n	8000bda <UpdateWaveEffect+0x52>
        if (i >= frame && i < frame + WAVE_PACKET_SIZE) {
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	db0d      	blt.n	8000bc6 <UpdateWaveEffect+0x3e>
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	3304      	adds	r3, #4
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dc08      	bgt.n	8000bc6 <UpdateWaveEffect+0x3e>
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_AMBER, 255);  // Amber color
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	b299      	uxth	r1, r3
 8000bb8:	23ff      	movs	r3, #255	@ 0xff
 8000bba:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f003 f888 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
 8000bc4:	e006      	b.n	8000bd4 <UpdateWaveEffect+0x4c>
        } else {
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_BLACK, 0);    // Turn off (black)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	b299      	uxth	r1, r3
 8000bca:	2300      	movs	r3, #0
 8000bcc:	2200      	movs	r2, #0
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f003 f880 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < pixel_count; i++) {
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	dbdf      	blt.n	8000ba2 <UpdateWaveEffect+0x1a>
        }
    }
    WS28XX_Update(ws);  // Refresh the LED strip
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f003 f8ea 	bl	8003dbc <WS28XX_Update>
}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <UpdateDRLMode>:
  * @param ws: Pointer to the WS28XX handle
  * @param pixel_count: Number of pixels in the strip
  * @retval None
  */
void UpdateDRLMode(WS28XX_HandleTypeDef* ws, int pixel_count)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
    static int last_update_time = 0;
    int current_time = HAL_GetTick();  // Get the current system time in milliseconds
 8000bfa:	f000 fe4f 	bl	800189c <HAL_GetTick>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	60bb      	str	r3, [r7, #8]

    // Update only every 50ms to avoid flickering
    if (current_time - last_update_time >= 50) {
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <UpdateDRLMode+0x60>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	2b31      	cmp	r3, #49	@ 0x31
 8000c0c:	dd1b      	ble.n	8000c46 <UpdateDRLMode+0x56>
        ResetLEDStrip(ws, pixel_count);  // Ensure no residual data on the strip
 8000c0e:	6839      	ldr	r1, [r7, #0]
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 f86b 	bl	8000cec <ResetLEDStrip>

        for (int i = 0; i < pixel_count; i++) {
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	e00a      	b.n	8000c32 <UpdateDRLMode+0x42>
            WS28XX_SetPixel_RGB_888(ws, i, COLOR_RGB888_WHITE);  // Full white light
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8000c24:	4619      	mov	r1, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f003 f80e 	bl	8003c48 <WS28XX_SetPixel_RGB_888>
        for (int i = 0; i < pixel_count; i++) {
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	dbf0      	blt.n	8000c1c <UpdateDRLMode+0x2c>
        }
        WS28XX_Update(ws);  // Refresh the LED strip
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f003 f8be 	bl	8003dbc <WS28XX_Update>

        last_update_time = current_time;  // Update the last time we refreshed
 8000c40:	4a03      	ldr	r2, [pc, #12]	@ (8000c50 <UpdateDRLMode+0x60>)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	6013      	str	r3, [r2, #0]
    }
    WS28XX_Update(ws);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f002 fe4a 	bl	800375c <WS28XX_Update>
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000339c 	.word	0x2000339c

08000c54 <UpdateHazardBlink>:
  * @brief Blink both LED strips for hazard mode
  * @param led_count: Number of LEDs in each strip
  * @retval None
  */
void UpdateHazardBlink(int led_count)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
    static int blink_on = 0;  // Track blink state (on/off)

void UpdateHazardBlink(int led_count) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    static int blink_on = 0;
    for (int i = 0; i < led_count; i++) {
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	e023      	b.n	8000caa <UpdateHazardBlink+0x56>
        if (blink_on) {
 8000c62:	4b1e      	ldr	r3, [pc, #120]	@ (8000cdc <UpdateHazardBlink+0x88>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00e      	beq.n	8000c88 <UpdateHazardBlink+0x34>
        	WS28XX_SetPixel_RGB_888(&ws_pa10, i, COLOR_RGB888_AMBER); // Amber on for right strip
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <UpdateHazardBlink+0x8c>)
 8000c70:	4619      	mov	r1, r3
 8000c72:	481c      	ldr	r0, [pc, #112]	@ (8000ce4 <UpdateHazardBlink+0x90>)
 8000c74:	f002 ffe8 	bl	8003c48 <WS28XX_SetPixel_RGB_888>
            WS28XX_SetPixel_RGB_888(&ws_pa8, i, COLOR_RGB888_AMBER);  // Amber on for left strip
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	4a18      	ldr	r2, [pc, #96]	@ (8000ce0 <UpdateHazardBlink+0x8c>)
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4819      	ldr	r0, [pc, #100]	@ (8000ce8 <UpdateHazardBlink+0x94>)
 8000c82:	f002 ffe1 	bl	8003c48 <WS28XX_SetPixel_RGB_888>
 8000c86:	e00d      	b.n	8000ca4 <UpdateHazardBlink+0x50>
        } else {
            WS28XX_SetPixel_RGB_565(&ws_pa8, i, COLOR_RGB565_BLACK);    // Off for left strip
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4815      	ldr	r0, [pc, #84]	@ (8000ce8 <UpdateHazardBlink+0x94>)
 8000c92:	f002 ff89 	bl	8003ba8 <WS28XX_SetPixel_RGB_565>
            WS28XX_SetPixel_RGB_565(&ws_pa10, i, COLOR_RGB565_BLACK);   // Off for right strip
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4811      	ldr	r0, [pc, #68]	@ (8000ce4 <UpdateHazardBlink+0x90>)
 8000ca0:	f002 ff82 	bl	8003ba8 <WS28XX_SetPixel_RGB_565>
    for (int i = 0; i < led_count; i++) {
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dbd7      	blt.n	8000c62 <UpdateHazardBlink+0xe>
        }
    }

    blink_on = !blink_on;  // Toggle the blink state
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <UpdateHazardBlink+0x88>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bf0c      	ite	eq
 8000cba:	2301      	moveq	r3, #1
 8000cbc:	2300      	movne	r3, #0
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <UpdateHazardBlink+0x88>)
 8000cc4:	601a      	str	r2, [r3, #0]
    WS28XX_Update(&ws_pa8);  // Refresh left strip
 8000cc6:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <UpdateHazardBlink+0x94>)
 8000cc8:	f003 f878 	bl	8003dbc <WS28XX_Update>
    WS28XX_Update(&ws_pa10); // Refresh right strip
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <UpdateHazardBlink+0x90>)
 8000cce:	f003 f875 	bl	8003dbc <WS28XX_Update>
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200033a0 	.word	0x200033a0
 8000ce0:	00ffbf00 	.word	0x00ffbf00
 8000ce4:	20002254 	.word	0x20002254
 8000ce8:	2000003c 	.word	0x2000003c

08000cec <ResetLEDStrip>:
  * @param ws: Pointer to the WS28XX handle
  * @param pixel_count: Number of pixels in the strip
  * @retval None
  */
void ResetLEDStrip(WS28XX_HandleTypeDef* ws, int pixel_count)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < pixel_count; i++) {
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	e009      	b.n	8000d10 <ResetLEDStrip+0x24>
        WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_BLACK, 0);  // Turn off all LEDs
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	b299      	uxth	r1, r3
 8000d00:	2300      	movs	r3, #0
 8000d02:	2200      	movs	r2, #0
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f002 ffe5 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < pixel_count; i++) {
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf1      	blt.n	8000cfc <ResetLEDStrip+0x10>
    }
    WS28XX_Update(ws);  // Refresh the strip
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f003 f84f 	bl	8003dbc <WS28XX_Update>
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <UpdateStartupWaveForMiddle>:

void UpdateStartupWaveForMiddle(WS28XX_HandleTypeDef* ws)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
    static int frame_left = MIDDLE_LED_MID_INDEX;  // Start from the center
    static int frame_right = MIDDLE_LED_MID_INDEX;
    static uint8_t wave_direction = 0;  // 0 for outward, 1 for inward
    static int drl_wave_complete_middle = 0;  // Variable to track DRL transition

    if (wave_count_middle < 4) {
 8000d30:	4b83      	ldr	r3, [pc, #524]	@ (8000f40 <UpdateStartupWaveForMiddle+0x218>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	f300 80aa 	bgt.w	8000e8e <UpdateStartupWaveForMiddle+0x166>
        // We want 2 full passes (each pass consists of outward and inward wave)
        ResetLEDStrip(ws, WS28XX_MIDDLE_LED_COUNT);  // Turn off LEDs to create wave movement effect
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ffd5 	bl	8000cec <ResetLEDStrip>

        if (wave_direction == 0) {  // Wave moving outward
 8000d42:	4b80      	ldr	r3, [pc, #512]	@ (8000f44 <UpdateStartupWaveForMiddle+0x21c>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d147      	bne.n	8000dda <UpdateStartupWaveForMiddle+0xb2>
            for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e028      	b.n	8000da2 <UpdateStartupWaveForMiddle+0x7a>
                if (frame_left - i >= 0) {
 8000d50:	4b7d      	ldr	r3, [pc, #500]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0c      	blt.n	8000d76 <UpdateStartupWaveForMiddle+0x4e>
                    WS28XX_SetPixel_RGBW_565(ws, frame_left - i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Left side
 8000d5c:	4b7a      	ldr	r3, [pc, #488]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	b299      	uxth	r1, r3
 8000d6a:	239b      	movs	r3, #155	@ 0x9b
 8000d6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f002 ffaf 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
                }
                if (frame_right + i < WS28XX_MIDDLE_LED_COUNT) {
 8000d76:	4b75      	ldr	r3, [pc, #468]	@ (8000f4c <UpdateStartupWaveForMiddle+0x224>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	2b0e      	cmp	r3, #14
 8000d80:	dc0c      	bgt.n	8000d9c <UpdateStartupWaveForMiddle+0x74>
                    WS28XX_SetPixel_RGBW_565(ws, frame_right + i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Right side
 8000d82:	4b72      	ldr	r3, [pc, #456]	@ (8000f4c <UpdateStartupWaveForMiddle+0x224>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b299      	uxth	r1, r3
 8000d90:	239b      	movs	r3, #155	@ 0x9b
 8000d92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f002 ff9c 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
            for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	ddd3      	ble.n	8000d50 <UpdateStartupWaveForMiddle+0x28>
                }
            }
            WS28XX_Update(ws);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f003 f807 	bl	8003dbc <WS28XX_Update>

            frame_left--;
 8000dae:	4b66      	ldr	r3, [pc, #408]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	4a64      	ldr	r2, [pc, #400]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000db6:	6013      	str	r3, [r2, #0]
            frame_right++;
 8000db8:	4b64      	ldr	r3, [pc, #400]	@ (8000f4c <UpdateStartupWaveForMiddle+0x224>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	4a63      	ldr	r2, [pc, #396]	@ (8000f4c <UpdateStartupWaveForMiddle+0x224>)
 8000dc0:	6013      	str	r3, [r2, #0]

            if (frame_left < 0 && frame_right >= WS28XX_MIDDLE_LED_COUNT) {
 8000dc2:	4b61      	ldr	r3, [pc, #388]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	da5d      	bge.n	8000e86 <UpdateStartupWaveForMiddle+0x15e>
 8000dca:	4b60      	ldr	r3, [pc, #384]	@ (8000f4c <UpdateStartupWaveForMiddle+0x224>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b0e      	cmp	r3, #14
 8000dd0:	dd59      	ble.n	8000e86 <UpdateStartupWaveForMiddle+0x15e>
                wave_direction = 1;  // Reverse direction when it hits the edges
 8000dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f44 <UpdateStartupWaveForMiddle+0x21c>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	e055      	b.n	8000e86 <UpdateStartupWaveForMiddle+0x15e>
            }

        } else if (wave_direction == 1) {  // Wave moving inward
 8000dda:	4b5a      	ldr	r3, [pc, #360]	@ (8000f44 <UpdateStartupWaveForMiddle+0x21c>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d151      	bne.n	8000e86 <UpdateStartupWaveForMiddle+0x15e>
            for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	e028      	b.n	8000e3a <UpdateStartupWaveForMiddle+0x112>
                if (frame_left + i < MIDDLE_LED_MID_INDEX) {
 8000de8:	4b57      	ldr	r3, [pc, #348]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4413      	add	r3, r2
 8000df0:	2b06      	cmp	r3, #6
 8000df2:	dc0c      	bgt.n	8000e0e <UpdateStartupWaveForMiddle+0xe6>
                    WS28XX_SetPixel_RGBW_565(ws, frame_left + i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Left side returning
 8000df4:	4b54      	ldr	r3, [pc, #336]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4413      	add	r3, r2
 8000e00:	b299      	uxth	r1, r3
 8000e02:	239b      	movs	r3, #155	@ 0x9b
 8000e04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f002 ff63 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
                }
                if (frame_right - i >= MIDDLE_LED_MID_INDEX) {
 8000e0e:	4b4f      	ldr	r3, [pc, #316]	@ (8000f4c <UpdateStartupWaveForMiddle+0x224>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	dd0c      	ble.n	8000e34 <UpdateStartupWaveForMiddle+0x10c>
                    WS28XX_SetPixel_RGBW_565(ws, frame_right - i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Right side returning
 8000e1a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f4c <UpdateStartupWaveForMiddle+0x224>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	b299      	uxth	r1, r3
 8000e28:	239b      	movs	r3, #155	@ 0x9b
 8000e2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f002 ff50 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
            for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	3301      	adds	r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	ddd3      	ble.n	8000de8 <UpdateStartupWaveForMiddle+0xc0>
                }
            }
            WS28XX_Update(ws);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f002 ffbb 	bl	8003dbc <WS28XX_Update>

            frame_left++;
 8000e46:	4b40      	ldr	r3, [pc, #256]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	4a3e      	ldr	r2, [pc, #248]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000e4e:	6013      	str	r3, [r2, #0]
            frame_right--;
 8000e50:	4b3e      	ldr	r3, [pc, #248]	@ (8000f4c <UpdateStartupWaveForMiddle+0x224>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	4a3d      	ldr	r2, [pc, #244]	@ (8000f4c <UpdateStartupWaveForMiddle+0x224>)
 8000e58:	6013      	str	r3, [r2, #0]

            if (frame_left >= MIDDLE_LED_MID_INDEX && frame_right <= MIDDLE_LED_MID_INDEX) {
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	dd11      	ble.n	8000e86 <UpdateStartupWaveForMiddle+0x15e>
 8000e62:	4b3a      	ldr	r3, [pc, #232]	@ (8000f4c <UpdateStartupWaveForMiddle+0x224>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b07      	cmp	r3, #7
 8000e68:	dc0d      	bgt.n	8000e86 <UpdateStartupWaveForMiddle+0x15e>
                frame_left = MIDDLE_LED_MID_INDEX;
 8000e6a:	4b37      	ldr	r3, [pc, #220]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
                frame_right = MIDDLE_LED_MID_INDEX;
 8000e70:	4b36      	ldr	r3, [pc, #216]	@ (8000f4c <UpdateStartupWaveForMiddle+0x224>)
 8000e72:	2207      	movs	r2, #7
 8000e74:	601a      	str	r2, [r3, #0]
                wave_direction = 0;  // Reset for next outward pass
 8000e76:	4b33      	ldr	r3, [pc, #204]	@ (8000f44 <UpdateStartupWaveForMiddle+0x21c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
                wave_count_middle++;  // Complete one full pass
 8000e7c:	4b30      	ldr	r3, [pc, #192]	@ (8000f40 <UpdateStartupWaveForMiddle+0x218>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a2f      	ldr	r2, [pc, #188]	@ (8000f40 <UpdateStartupWaveForMiddle+0x218>)
 8000e84:	6013      	str	r3, [r2, #0]
            }
        }

        HAL_Delay(WAVE_SPEED * 2);  // Slower speed for a luxury aesthetic
 8000e86:	2028      	movs	r0, #40	@ 0x28
 8000e88:	f000 fd12 	bl	80018b0 <HAL_Delay>

        current_mode_pa9 = DRL_MODE;  // Switch to DRL mode
        wave_count_middle = 0;  // Reset wave count for future use
        drl_wave_complete_middle = 0;  // Reset DRL wave completion flag
    }
}
 8000e8c:	e053      	b.n	8000f36 <UpdateStartupWaveForMiddle+0x20e>
    } else if (!drl_wave_complete_middle) {
 8000e8e:	4b30      	ldr	r3, [pc, #192]	@ (8000f50 <UpdateStartupWaveForMiddle+0x228>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d132      	bne.n	8000efc <UpdateStartupWaveForMiddle+0x1d4>
        for (int i = 0; i <= frame_left; i++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	e017      	b.n	8000ecc <UpdateStartupWaveForMiddle+0x1a4>
            WS28XX_SetPixel_RGBW_565(ws, MIDDLE_LED_MID_INDEX - i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Light from center outward to left
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	f1c3 0307 	rsb	r3, r3, #7
 8000ea4:	b299      	uxth	r1, r3
 8000ea6:	239b      	movs	r3, #155	@ 0x9b
 8000ea8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f002 ff11 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
            WS28XX_SetPixel_RGBW_565(ws, MIDDLE_LED_MID_INDEX + i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Light from center outward to right
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	3307      	adds	r3, #7
 8000eb8:	b299      	uxth	r1, r3
 8000eba:	239b      	movs	r3, #155	@ 0x9b
 8000ebc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f002 ff07 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i <= frame_left; i++) {
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	dde2      	ble.n	8000e9c <UpdateStartupWaveForMiddle+0x174>
        WS28XX_Update(ws);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f002 ff70 	bl	8003dbc <WS28XX_Update>
        frame_left++;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	4a19      	ldr	r2, [pc, #100]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000ee4:	6013      	str	r3, [r2, #0]
        if (frame_left >= MIDDLE_LED_MID_INDEX) {
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <UpdateStartupWaveForMiddle+0x220>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	dd02      	ble.n	8000ef4 <UpdateStartupWaveForMiddle+0x1cc>
            drl_wave_complete_middle = 1;  // DRL transition complete
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <UpdateStartupWaveForMiddle+0x228>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
        HAL_Delay(WAVE_SPEED);  // Smooth transition speed
 8000ef4:	2014      	movs	r0, #20
 8000ef6:	f000 fcdb 	bl	80018b0 <HAL_Delay>
}
 8000efa:	e01c      	b.n	8000f36 <UpdateStartupWaveForMiddle+0x20e>
        for (int i = 0; i < WS28XX_MIDDLE_LED_COUNT; i++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	e00a      	b.n	8000f18 <UpdateStartupWaveForMiddle+0x1f0>
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Full DRL brightness
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	b299      	uxth	r1, r3
 8000f06:	239b      	movs	r3, #155	@ 0x9b
 8000f08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f002 fee1 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < WS28XX_MIDDLE_LED_COUNT; i++) {
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b0e      	cmp	r3, #14
 8000f1c:	ddf1      	ble.n	8000f02 <UpdateStartupWaveForMiddle+0x1da>
        WS28XX_Update(ws);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f002 ff4c 	bl	8003dbc <WS28XX_Update>
        current_mode_pa9 = DRL_MODE;  // Switch to DRL mode
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <UpdateStartupWaveForMiddle+0x22c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
        wave_count_middle = 0;  // Reset wave count for future use
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <UpdateStartupWaveForMiddle+0x218>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
        drl_wave_complete_middle = 0;  // Reset DRL wave completion flag
 8000f30:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <UpdateStartupWaveForMiddle+0x228>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200033a4 	.word	0x200033a4
 8000f44:	200033a8 	.word	0x200033a8
 8000f48:	2000000c 	.word	0x2000000c
 8000f4c:	20000010 	.word	0x20000010
 8000f50:	200033ac 	.word	0x200033ac
 8000f54:	20003361 	.word	0x20003361

08000f58 <UpdateSOCIndication>:

void UpdateSOCIndication(WS28XX_HandleTypeDef* ws, int soc_percentage, int charging_type)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
    static int last_update_time = 0;
    static uint8_t charging_blink_state = 0;  // Blink state, 0 = off, 1 = on
    int current_time = HAL_GetTick();
 8000f64:	f000 fc9a 	bl	800189c <HAL_GetTick>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	623b      	str	r3, [r7, #32]

    // Update every 1000ms (1 second) to avoid flickering
    if (current_time - last_update_time >= 1000) {
 8000f6c:	4b58      	ldr	r3, [pc, #352]	@ (80010d0 <UpdateSOCIndication+0x178>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a3a      	ldr	r2, [r7, #32]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f78:	f2c0 80a5 	blt.w	80010c6 <UpdateSOCIndication+0x16e>
        last_update_time = current_time;
 8000f7c:	4a54      	ldr	r2, [pc, #336]	@ (80010d0 <UpdateSOCIndication+0x178>)
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	6013      	str	r3, [r2, #0]

        int led_count_to_light = (WS28XX_MIDDLE_LED_COUNT * soc_percentage) / 100;
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	4613      	mov	r3, r2
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	1a9b      	subs	r3, r3, r2
 8000f8a:	4a52      	ldr	r2, [pc, #328]	@ (80010d4 <UpdateSOCIndication+0x17c>)
 8000f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f90:	1152      	asrs	r2, r2, #5
 8000f92:	17db      	asrs	r3, r3, #31
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	61fb      	str	r3, [r7, #28]
        int left_led = MIDDLE_LED_MID_INDEX;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	61bb      	str	r3, [r7, #24]
        int right_led = MIDDLE_LED_MID_INDEX;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	617b      	str	r3, [r7, #20]

        // Clear the strip first to ensure everything is turned off
        ResetLEDStrip(ws, WS28XX_MIDDLE_LED_COUNT);
 8000fa0:	210f      	movs	r1, #15
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff fea2 	bl	8000cec <ResetLEDStrip>

        // Light up LEDs based on the SOC percentage from the middle outward
        for (int i = 0; i < led_count_to_light / 2; i++) {
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fac:	e030      	b.n	8001010 <UpdateSOCIndication+0xb8>
            if (left_led - i >= 0) {
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db11      	blt.n	8000fdc <UpdateSOCIndication+0x84>
                WS28XX_SetPixel_RGBW_565(ws, left_led - i, (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, DRL_BRIGHTNESS);
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b299      	uxth	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d102      	bne.n	8000fd0 <UpdateSOCIndication+0x78>
 8000fca:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000fce:	e001      	b.n	8000fd4 <UpdateSOCIndication+0x7c>
 8000fd0:	f242 4244 	movw	r2, #9284	@ 0x2444
 8000fd4:	239b      	movs	r3, #155	@ 0x9b
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f002 fe7c 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
            }
            if (right_led + i < WS28XX_MIDDLE_LED_COUNT) {
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2b0e      	cmp	r3, #14
 8000fe4:	dc11      	bgt.n	800100a <UpdateSOCIndication+0xb2>
                WS28XX_SetPixel_RGBW_565(ws, right_led + i, (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, DRL_BRIGHTNESS);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4413      	add	r3, r2
 8000ff0:	b299      	uxth	r1, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d102      	bne.n	8000ffe <UpdateSOCIndication+0xa6>
 8000ff8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000ffc:	e001      	b.n	8001002 <UpdateSOCIndication+0xaa>
 8000ffe:	f242 4244 	movw	r2, #9284	@ 0x2444
 8001002:	239b      	movs	r3, #155	@ 0x9b
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f002 fe65 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < led_count_to_light / 2; i++) {
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	3301      	adds	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	0fda      	lsrs	r2, r3, #31
 8001014:	4413      	add	r3, r2
 8001016:	105b      	asrs	r3, r3, #1
 8001018:	461a      	mov	r2, r3
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	4293      	cmp	r3, r2
 800101e:	dbc6      	blt.n	8000fae <UpdateSOCIndication+0x56>
            }
        }

        // Blink the next LED for charging animation (next LED that would turn on if SOC increased)
        charging_blink_state = !charging_blink_state;  // Toggle the blink state
 8001020:	4b2d      	ldr	r3, [pc, #180]	@ (80010d8 <UpdateSOCIndication+0x180>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf0c      	ite	eq
 8001028:	2301      	moveq	r3, #1
 800102a:	2300      	movne	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <UpdateSOCIndication+0x180>)
 8001032:	701a      	strb	r2, [r3, #0]
        uint8_t blink_brightness = charging_blink_state ? DRL_BRIGHTNESS : 0;
 8001034:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <UpdateSOCIndication+0x180>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <UpdateSOCIndication+0xe8>
 800103c:	239b      	movs	r3, #155	@ 0x9b
 800103e:	e000      	b.n	8001042 <UpdateSOCIndication+0xea>
 8001040:	2300      	movs	r3, #0
 8001042:	74fb      	strb	r3, [r7, #19]

        // Handle blinking LED (next in sequence)
        if (left_led - (led_count_to_light / 2) >= 0) {
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	0fda      	lsrs	r2, r3, #31
 8001048:	4413      	add	r3, r2
 800104a:	105b      	asrs	r3, r3, #1
 800104c:	425b      	negs	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	4413      	add	r3, r2
 8001054:	2b00      	cmp	r3, #0
 8001056:	db15      	blt.n	8001084 <UpdateSOCIndication+0x12c>
            WS28XX_SetPixel_RGBW_565(ws, left_led - (led_count_to_light / 2), (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, blink_brightness);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	0fda      	lsrs	r2, r3, #31
 800105c:	4413      	add	r3, r2
 800105e:	105b      	asrs	r3, r3, #1
 8001060:	425b      	negs	r3, r3
 8001062:	b29a      	uxth	r2, r3
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4413      	add	r3, r2
 800106a:	b299      	uxth	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d102      	bne.n	8001078 <UpdateSOCIndication+0x120>
 8001072:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001076:	e001      	b.n	800107c <UpdateSOCIndication+0x124>
 8001078:	f242 4244 	movw	r2, #9284	@ 0x2444
 800107c:	7cfb      	ldrb	r3, [r7, #19]
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f002 fe28 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
        }
        if (right_led + (led_count_to_light / 2) < WS28XX_MIDDLE_LED_COUNT) {
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	0fda      	lsrs	r2, r3, #31
 8001088:	4413      	add	r3, r2
 800108a:	105b      	asrs	r3, r3, #1
 800108c:	461a      	mov	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	4413      	add	r3, r2
 8001092:	2b0e      	cmp	r3, #14
 8001094:	dc14      	bgt.n	80010c0 <UpdateSOCIndication+0x168>
            WS28XX_SetPixel_RGBW_565(ws, right_led + (led_count_to_light / 2), (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, blink_brightness);
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	0fda      	lsrs	r2, r3, #31
 800109a:	4413      	add	r3, r2
 800109c:	105b      	asrs	r3, r3, #1
 800109e:	b29a      	uxth	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	b299      	uxth	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <UpdateSOCIndication+0x15c>
 80010ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80010b2:	e001      	b.n	80010b8 <UpdateSOCIndication+0x160>
 80010b4:	f242 4244 	movw	r2, #9284	@ 0x2444
 80010b8:	7cfb      	ldrb	r3, [r7, #19]
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f002 fe0a 	bl	8003cd4 <WS28XX_SetPixel_RGBW_565>
        }

        WS28XX_Update(ws);  // Refresh the LED strip with the updated states
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f002 fe7b 	bl	8003dbc <WS28XX_Update>
    }
}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	@ 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200033b0 	.word	0x200033b0
 80010d4:	51eb851f 	.word	0x51eb851f
 80010d8:	200033b4 	.word	0x200033b4

080010dc <SetGPIOHigh>:


// Function to set a GPIO pin HIGH (turn the relay off)
void SetGPIOHigh(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	2201      	movs	r2, #1
 80010ec:	4619      	mov	r1, r3
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f001 f882 	bl	80021f8 <HAL_GPIO_WritePin>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <SetGPIOLow>:

// Function to set a GPIO pin LOW (turn the relay on)
void SetGPIOLow(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f001 f872 	bl	80021f8 <HAL_GPIO_WritePin>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HandleHornState>:

// Handle Horn State with switch-case
void HandleHornState(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    if (horn_signal_received) {
 8001120:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <HandleHornState+0x3c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HandleHornState+0x14>
        current_horn_state = HORN_ON;
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <HandleHornState+0x40>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e002      	b.n	8001136 <HandleHornState+0x1a>
    } else {
        current_horn_state = HORN_OFF;
 8001130:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <HandleHornState+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
    }

    switch (current_horn_state) {
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <HandleHornState+0x40>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d104      	bne.n	8001148 <HandleHornState+0x2c>
        case HORN_ON:
            SetGPIOLow(GPIOA, GPIO_PIN_0);  // PA0 LOW to turn on the horn
 800113e:	2101      	movs	r1, #1
 8001140:	4807      	ldr	r0, [pc, #28]	@ (8001160 <HandleHornState+0x44>)
 8001142:	f7ff ffdb 	bl	80010fc <SetGPIOLow>
            break;
 8001146:	e004      	b.n	8001152 <HandleHornState+0x36>

        case HORN_OFF:
        default:
            SetGPIOHigh(GPIOA, GPIO_PIN_0);  // PA0 HIGH to turn off the horn
 8001148:	2101      	movs	r1, #1
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <HandleHornState+0x44>)
 800114c:	f7ff ffc6 	bl	80010dc <SetGPIOHigh>
            break;
 8001150:	bf00      	nop
    }
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20003380 	.word	0x20003380
 800115c:	20003363 	.word	0x20003363
 8001160:	40010800 	.word	0x40010800

08001164 <HandleHeadlampState>:

// Handle Headlamp State with switch-case
void HandleHeadlampState(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
    if (headlamp_high_beam_signal_received) {
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <HandleHeadlampState+0x70>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HandleHeadlampState+0x14>
        current_headlamp_state = HEADLAMP_HIGH_BEAM;
 8001170:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <HandleHeadlampState+0x74>)
 8001172:	2202      	movs	r2, #2
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	e00a      	b.n	800118e <HandleHeadlampState+0x2a>
    } else if (headlamp_low_beam_signal_received) {
 8001178:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <HandleHeadlampState+0x78>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HandleHeadlampState+0x24>
        current_headlamp_state = HEADLAMP_LOW_BEAM;
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HandleHeadlampState+0x74>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e002      	b.n	800118e <HandleHeadlampState+0x2a>
    } else {
        current_headlamp_state = HEADLAMP_OFF;
 8001188:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <HandleHeadlampState+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
    }

    switch (current_headlamp_state) {
 800118e:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <HandleHeadlampState+0x74>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d00a      	beq.n	80011ac <HandleHeadlampState+0x48>
 8001196:	2b02      	cmp	r3, #2
 8001198:	d111      	bne.n	80011be <HandleHeadlampState+0x5a>
        case HEADLAMP_HIGH_BEAM:
            // High beam active (Both low beam and high beam relays should be on)
            SetGPIOLow(GPIOA, GPIO_PIN_1);  // PA1 LOW for headlamp power (low beam)
 800119a:	2102      	movs	r1, #2
 800119c:	4810      	ldr	r0, [pc, #64]	@ (80011e0 <HandleHeadlampState+0x7c>)
 800119e:	f7ff ffad 	bl	80010fc <SetGPIOLow>
            SetGPIOLow(GPIOA, GPIO_PIN_6);  // PA6 LOW for beam selector (high beam)
 80011a2:	2140      	movs	r1, #64	@ 0x40
 80011a4:	480e      	ldr	r0, [pc, #56]	@ (80011e0 <HandleHeadlampState+0x7c>)
 80011a6:	f7ff ffa9 	bl	80010fc <SetGPIOLow>
            break;
 80011aa:	e011      	b.n	80011d0 <HandleHeadlampState+0x6c>

        case HEADLAMP_LOW_BEAM:
            // Low beam active (Only low beam relay should be on)
            SetGPIOLow(GPIOA, GPIO_PIN_1);  // PA1 LOW for headlamp power (low beam)
 80011ac:	2102      	movs	r1, #2
 80011ae:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <HandleHeadlampState+0x7c>)
 80011b0:	f7ff ffa4 	bl	80010fc <SetGPIOLow>
            SetGPIOHigh(GPIOA, GPIO_PIN_6);  // PA6 HIGH to deactivate high beam
 80011b4:	2140      	movs	r1, #64	@ 0x40
 80011b6:	480a      	ldr	r0, [pc, #40]	@ (80011e0 <HandleHeadlampState+0x7c>)
 80011b8:	f7ff ff90 	bl	80010dc <SetGPIOHigh>
            break;
 80011bc:	e008      	b.n	80011d0 <HandleHeadlampState+0x6c>

        case HEADLAMP_OFF:
        default:
            // Headlamps off
            SetGPIOHigh(GPIOA, GPIO_PIN_1);  // PA1 HIGH to turn off the headlamp power
 80011be:	2102      	movs	r1, #2
 80011c0:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <HandleHeadlampState+0x7c>)
 80011c2:	f7ff ff8b 	bl	80010dc <SetGPIOHigh>
            SetGPIOHigh(GPIOA, GPIO_PIN_6);  // PA6 HIGH to turn off beam selector
 80011c6:	2140      	movs	r1, #64	@ 0x40
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <HandleHeadlampState+0x7c>)
 80011ca:	f7ff ff87 	bl	80010dc <SetGPIOHigh>
            break;
 80011ce:	bf00      	nop
    }
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20003384 	.word	0x20003384
 80011d8:	20003364 	.word	0x20003364
 80011dc:	20000008 	.word	0x20000008
 80011e0:	40010800 	.word	0x40010800

080011e4 <Handle_TestMode>:

/**
  * @brief Handle Test Mode Function to toggle states every 10 seconds.
  */
void Handle_TestMode(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
    // Get the current time
    current_time = HAL_GetTick();
 80011e8:	f000 fb58 	bl	800189c <HAL_GetTick>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a53      	ldr	r2, [pc, #332]	@ (800133c <Handle_TestMode+0x158>)
 80011f0:	6013      	str	r3, [r2, #0]

    // ========================
    // Middle Strip (PA9) State Toggle Logic
    // ========================
    if (current_time - last_time_middle_strip >= TOGGLE_INTERVAL) {
 80011f2:	4b52      	ldr	r3, [pc, #328]	@ (800133c <Handle_TestMode+0x158>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b52      	ldr	r3, [pc, #328]	@ (8001340 <Handle_TestMode+0x15c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001200:	4293      	cmp	r3, r2
 8001202:	d920      	bls.n	8001246 <Handle_TestMode+0x62>
        if (current_mode_pa9 == STARTUP_MODE) {
 8001204:	4b4f      	ldr	r3, [pc, #316]	@ (8001344 <Handle_TestMode+0x160>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d106      	bne.n	800121a <Handle_TestMode+0x36>
            drl_signal_received = 1;  // Force transition to DRL after STARTUP
 800120c:	4b4e      	ldr	r3, [pc, #312]	@ (8001348 <Handle_TestMode+0x164>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]
            charging_signal_received = 0;
 8001212:	4b4e      	ldr	r3, [pc, #312]	@ (800134c <Handle_TestMode+0x168>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e011      	b.n	800123e <Handle_TestMode+0x5a>
        } else if (current_mode_pa9 == DRL_MODE) {
 800121a:	4b4a      	ldr	r3, [pc, #296]	@ (8001344 <Handle_TestMode+0x160>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <Handle_TestMode+0x4c>
            drl_signal_received = 0;  // Force transition to CHARGING after DRL
 8001222:	4b49      	ldr	r3, [pc, #292]	@ (8001348 <Handle_TestMode+0x164>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
            charging_signal_received = 1;
 8001228:	4b48      	ldr	r3, [pc, #288]	@ (800134c <Handle_TestMode+0x168>)
 800122a:	2201      	movs	r2, #1
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e006      	b.n	800123e <Handle_TestMode+0x5a>
        } else if (current_mode_pa9 == CHARGING_MODE) {
 8001230:	4b44      	ldr	r3, [pc, #272]	@ (8001344 <Handle_TestMode+0x160>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d102      	bne.n	800123e <Handle_TestMode+0x5a>
            charging_signal_received = 0;  // Reset to STARTUP
 8001238:	4b44      	ldr	r3, [pc, #272]	@ (800134c <Handle_TestMode+0x168>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
        }

        last_time_middle_strip = current_time;
 800123e:	4b3f      	ldr	r3, [pc, #252]	@ (800133c <Handle_TestMode+0x158>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a3f      	ldr	r2, [pc, #252]	@ (8001340 <Handle_TestMode+0x15c>)
 8001244:	6013      	str	r3, [r2, #0]
    }

    // ===========================
    // Side Strips (PA8 & PA10) Logic - Turn Signal and Hazard Blink
    // ===========================
    if (current_time - last_time_side_strip >= TOGGLE_INTERVAL) {
 8001246:	4b3d      	ldr	r3, [pc, #244]	@ (800133c <Handle_TestMode+0x158>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b41      	ldr	r3, [pc, #260]	@ (8001350 <Handle_TestMode+0x16c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001254:	4293      	cmp	r3, r2
 8001256:	d90d      	bls.n	8001274 <Handle_TestMode+0x90>
        // First alternate turn signals on both sides
        turn_signal_left_received = 1;
 8001258:	4b3e      	ldr	r3, [pc, #248]	@ (8001354 <Handle_TestMode+0x170>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]
        turn_signal_right_received = 1;
 800125e:	4b3e      	ldr	r3, [pc, #248]	@ (8001358 <Handle_TestMode+0x174>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]
        hazard_signal_received = 0;  // Ensure hazard is off during turn signal
 8001264:	4b3d      	ldr	r3, [pc, #244]	@ (800135c <Handle_TestMode+0x178>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
        last_time_side_strip = current_time;
 800126a:	4b34      	ldr	r3, [pc, #208]	@ (800133c <Handle_TestMode+0x158>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a38      	ldr	r2, [pc, #224]	@ (8001350 <Handle_TestMode+0x16c>)
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e015      	b.n	80012a0 <Handle_TestMode+0xbc>
    }
    else if (current_time - last_time_side_strip >= TOGGLE_INTERVAL + 10000) {
 8001274:	4b31      	ldr	r3, [pc, #196]	@ (800133c <Handle_TestMode+0x158>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b35      	ldr	r3, [pc, #212]	@ (8001350 <Handle_TestMode+0x16c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001282:	4293      	cmp	r3, r2
 8001284:	d90c      	bls.n	80012a0 <Handle_TestMode+0xbc>
        // After 10 seconds, switch to hazard blink mode
        hazard_signal_received = 1;  // Turn on hazard mode
 8001286:	4b35      	ldr	r3, [pc, #212]	@ (800135c <Handle_TestMode+0x178>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
        turn_signal_left_received = 0;
 800128c:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <Handle_TestMode+0x170>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
        turn_signal_right_received = 0;  // Turn off turn signals
 8001292:	4b31      	ldr	r3, [pc, #196]	@ (8001358 <Handle_TestMode+0x174>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
        last_time_side_strip = current_time;
 8001298:	4b28      	ldr	r3, [pc, #160]	@ (800133c <Handle_TestMode+0x158>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a2c      	ldr	r2, [pc, #176]	@ (8001350 <Handle_TestMode+0x16c>)
 800129e:	6013      	str	r3, [r2, #0]
    }

    // ===========================
    // Horn Logic: 300ms ON every 10 seconds
    // ===========================
    if (current_time - last_time_horn >= TOGGLE_INTERVAL) {
 80012a0:	4b26      	ldr	r3, [pc, #152]	@ (800133c <Handle_TestMode+0x158>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <Handle_TestMode+0x17c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d906      	bls.n	80012c0 <Handle_TestMode+0xdc>
        horn_signal_received = 1;  // Turn on horn
 80012b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001364 <Handle_TestMode+0x180>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
        last_time_horn = current_time;
 80012b8:	4b20      	ldr	r3, [pc, #128]	@ (800133c <Handle_TestMode+0x158>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a28      	ldr	r2, [pc, #160]	@ (8001360 <Handle_TestMode+0x17c>)
 80012be:	6013      	str	r3, [r2, #0]
    }

    if (horn_signal_received && (current_time - last_time_horn >= HORN_ON_DURATION)) {
 80012c0:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <Handle_TestMode+0x180>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00a      	beq.n	80012de <Handle_TestMode+0xfa>
 80012c8:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <Handle_TestMode+0x158>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <Handle_TestMode+0x17c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80012d6:	d302      	bcc.n	80012de <Handle_TestMode+0xfa>
        horn_signal_received = 0;  // Turn off horn after 300ms
 80012d8:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <Handle_TestMode+0x180>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
    }

    // ===========================
    // Headlamp Logic: Toggle between OFF, LOW_BEAM, and HIGH_BEAM every 10 seconds
    // ===========================
    if (current_time - last_time_headlamp >= TOGGLE_INTERVAL) {
 80012de:	4b17      	ldr	r3, [pc, #92]	@ (800133c <Handle_TestMode+0x158>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <Handle_TestMode+0x184>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d923      	bls.n	8001338 <Handle_TestMode+0x154>
        if (current_headlamp_state == HEADLAMP_OFF) {
 80012f0:	4b1e      	ldr	r3, [pc, #120]	@ (800136c <Handle_TestMode+0x188>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d106      	bne.n	8001306 <Handle_TestMode+0x122>
            headlamp_low_beam_signal_received = 1;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <Handle_TestMode+0x18c>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
            headlamp_high_beam_signal_received = 0;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <Handle_TestMode+0x190>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	e014      	b.n	8001330 <Handle_TestMode+0x14c>
        } else if (current_headlamp_state == HEADLAMP_LOW_BEAM) {
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <Handle_TestMode+0x188>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d106      	bne.n	800131c <Handle_TestMode+0x138>
            headlamp_low_beam_signal_received = 0;
 800130e:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <Handle_TestMode+0x18c>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
            headlamp_high_beam_signal_received = 1;
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <Handle_TestMode+0x190>)
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	e009      	b.n	8001330 <Handle_TestMode+0x14c>
        } else if (current_headlamp_state == HEADLAMP_HIGH_BEAM) {
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <Handle_TestMode+0x188>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d105      	bne.n	8001330 <Handle_TestMode+0x14c>
            headlamp_low_beam_signal_received = 0;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <Handle_TestMode+0x18c>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
            headlamp_high_beam_signal_received = 0;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <Handle_TestMode+0x190>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
        }

        last_time_headlamp = current_time;
 8001330:	4b02      	ldr	r3, [pc, #8]	@ (800133c <Handle_TestMode+0x158>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0c      	ldr	r2, [pc, #48]	@ (8001368 <Handle_TestMode+0x184>)
 8001336:	6013      	str	r3, [r2, #0]
    }
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20003398 	.word	0x20003398
 8001340:	20003388 	.word	0x20003388
 8001344:	20003361 	.word	0x20003361
 8001348:	20000004 	.word	0x20000004
 800134c:	20003370 	.word	0x20003370
 8001350:	2000338c 	.word	0x2000338c
 8001354:	20003378 	.word	0x20003378
 8001358:	2000337c 	.word	0x2000337c
 800135c:	20003374 	.word	0x20003374
 8001360:	20003390 	.word	0x20003390
 8001364:	20003380 	.word	0x20003380
 8001368:	20003394 	.word	0x20003394
 800136c:	20003364 	.word	0x20003364
 8001370:	20000008 	.word	0x20000008
 8001374:	20003384 	.word	0x20003384

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x8>

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800138a:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <HAL_MspInit+0x5c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <HAL_MspInit+0x5c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_MspInit+0x5c>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <HAL_MspInit+0x5c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <HAL_MspInit+0x5c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <HAL_MspInit+0x5c>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <HAL_MspInit+0x60>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	4a04      	ldr	r2, [pc, #16]	@ (80013e4 <HAL_MspInit+0x60>)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <NMI_Handler+0x4>

080013f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <MemManage_Handler+0x4>

08001400 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <UsageFault_Handler+0x4>

08001410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001438:	f000 fa1e 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <DMA1_Channel2_IRQHandler+0x10>)
 8001446:	f000 fc1f 	bl	8001c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20003400 	.word	0x20003400

08001454 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <DMA1_Channel3_IRQHandler+0x10>)
 800145a:	f000 fc15 	bl	8001c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20003444 	.word	0x20003444

08001468 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <DMA1_Channel6_IRQHandler+0x10>)
 800146e:	f000 fc0b 	bl	8001c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20003488 	.word	0x20003488

0800147c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch2;
DMA_HandleTypeDef hdma_tim1_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b096      	sub	sp, #88	@ 0x58
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2220      	movs	r2, #32
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fcee 	bl	8003ea2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c6:	4b4a      	ldr	r3, [pc, #296]	@ (80015f0 <MX_TIM1_Init+0x168>)
 80014c8:	4a4a      	ldr	r2, [pc, #296]	@ (80015f4 <MX_TIM1_Init+0x16c>)
 80014ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014cc:	4b48      	ldr	r3, [pc, #288]	@ (80015f0 <MX_TIM1_Init+0x168>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b47      	ldr	r3, [pc, #284]	@ (80015f0 <MX_TIM1_Init+0x168>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014d8:	4b45      	ldr	r3, [pc, #276]	@ (80015f0 <MX_TIM1_Init+0x168>)
 80014da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b43      	ldr	r3, [pc, #268]	@ (80015f0 <MX_TIM1_Init+0x168>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e6:	4b42      	ldr	r3, [pc, #264]	@ (80015f0 <MX_TIM1_Init+0x168>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b40      	ldr	r3, [pc, #256]	@ (80015f0 <MX_TIM1_Init+0x168>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f2:	483f      	ldr	r0, [pc, #252]	@ (80015f0 <MX_TIM1_Init+0x168>)
 80014f4:	f001 fa76 	bl	80029e4 <HAL_TIM_Base_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014fe:	f7ff ff3b 	bl	8001378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001502:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001506:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001508:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800150c:	4619      	mov	r1, r3
 800150e:	4838      	ldr	r0, [pc, #224]	@ (80015f0 <MX_TIM1_Init+0x168>)
 8001510:	f001 fd74 	bl	8002ffc <HAL_TIM_ConfigClockSource>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800151a:	f7ff ff2d 	bl	8001378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800151e:	4834      	ldr	r0, [pc, #208]	@ (80015f0 <MX_TIM1_Init+0x168>)
 8001520:	f001 faaf 	bl	8002a82 <HAL_TIM_PWM_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800152a:	f7ff ff25 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001536:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800153a:	4619      	mov	r1, r3
 800153c:	482c      	ldr	r0, [pc, #176]	@ (80015f0 <MX_TIM1_Init+0x168>)
 800153e:	f002 f9c1 	bl	80038c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001548:	f7ff ff16 	bl	8001378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154c:	2360      	movs	r3, #96	@ 0x60
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156c:	2200      	movs	r2, #0
 800156e:	4619      	mov	r1, r3
 8001570:	481f      	ldr	r0, [pc, #124]	@ (80015f0 <MX_TIM1_Init+0x168>)
 8001572:	f001 fc81 	bl	8002e78 <HAL_TIM_PWM_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800157c:	f7ff fefc 	bl	8001378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001584:	2204      	movs	r2, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4819      	ldr	r0, [pc, #100]	@ (80015f0 <MX_TIM1_Init+0x168>)
 800158a:	f001 fc75 	bl	8002e78 <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001594:	f7ff fef0 	bl	8001378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159c:	2208      	movs	r2, #8
 800159e:	4619      	mov	r1, r3
 80015a0:	4813      	ldr	r0, [pc, #76]	@ (80015f0 <MX_TIM1_Init+0x168>)
 80015a2:	f001 fc69 	bl	8002e78 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80015ac:	f7ff fee4 	bl	8001378 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <MX_TIM1_Init+0x168>)
 80015d4:	f002 f9d4 	bl	8003980 <HAL_TIMEx_ConfigBreakDeadTime>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80015de:	f7ff fecb 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015e2:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <MX_TIM1_Init+0x168>)
 80015e4:	f000 f8a8 	bl	8001738 <HAL_TIM_MspPostInit>

}
 80015e8:	bf00      	nop
 80015ea:	3758      	adds	r7, #88	@ 0x58
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200033b8 	.word	0x200033b8
 80015f4:	40012c00 	.word	0x40012c00

080015f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a44      	ldr	r2, [pc, #272]	@ (8001718 <HAL_TIM_Base_MspInit+0x120>)
 8001606:	4293      	cmp	r3, r2
 8001608:	f040 8081 	bne.w	800170e <HAL_TIM_Base_MspInit+0x116>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800160c:	4b43      	ldr	r3, [pc, #268]	@ (800171c <HAL_TIM_Base_MspInit+0x124>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a42      	ldr	r2, [pc, #264]	@ (800171c <HAL_TIM_Base_MspInit+0x124>)
 8001612:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b40      	ldr	r3, [pc, #256]	@ (800171c <HAL_TIM_Base_MspInit+0x124>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001624:	4b3e      	ldr	r3, [pc, #248]	@ (8001720 <HAL_TIM_Base_MspInit+0x128>)
 8001626:	4a3f      	ldr	r2, [pc, #252]	@ (8001724 <HAL_TIM_Base_MspInit+0x12c>)
 8001628:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800162a:	4b3d      	ldr	r3, [pc, #244]	@ (8001720 <HAL_TIM_Base_MspInit+0x128>)
 800162c:	2210      	movs	r2, #16
 800162e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001630:	4b3b      	ldr	r3, [pc, #236]	@ (8001720 <HAL_TIM_Base_MspInit+0x128>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001636:	4b3a      	ldr	r3, [pc, #232]	@ (8001720 <HAL_TIM_Base_MspInit+0x128>)
 8001638:	2280      	movs	r2, #128	@ 0x80
 800163a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800163c:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <HAL_TIM_Base_MspInit+0x128>)
 800163e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001642:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001644:	4b36      	ldr	r3, [pc, #216]	@ (8001720 <HAL_TIM_Base_MspInit+0x128>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800164a:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <HAL_TIM_Base_MspInit+0x128>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001650:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <HAL_TIM_Base_MspInit+0x128>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001656:	4832      	ldr	r0, [pc, #200]	@ (8001720 <HAL_TIM_Base_MspInit+0x128>)
 8001658:	f000 fa5c 	bl	8001b14 <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001662:	f7ff fe89 	bl	8001378 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a2d      	ldr	r2, [pc, #180]	@ (8001720 <HAL_TIM_Base_MspInit+0x128>)
 800166a:	625a      	str	r2, [r3, #36]	@ 0x24
 800166c:	4a2c      	ldr	r2, [pc, #176]	@ (8001720 <HAL_TIM_Base_MspInit+0x128>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8001672:	4b2d      	ldr	r3, [pc, #180]	@ (8001728 <HAL_TIM_Base_MspInit+0x130>)
 8001674:	4a2d      	ldr	r2, [pc, #180]	@ (800172c <HAL_TIM_Base_MspInit+0x134>)
 8001676:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001678:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <HAL_TIM_Base_MspInit+0x130>)
 800167a:	2210      	movs	r2, #16
 800167c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800167e:	4b2a      	ldr	r3, [pc, #168]	@ (8001728 <HAL_TIM_Base_MspInit+0x130>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001684:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <HAL_TIM_Base_MspInit+0x130>)
 8001686:	2280      	movs	r2, #128	@ 0x80
 8001688:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800168a:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <HAL_TIM_Base_MspInit+0x130>)
 800168c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001690:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001692:	4b25      	ldr	r3, [pc, #148]	@ (8001728 <HAL_TIM_Base_MspInit+0x130>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001698:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <HAL_TIM_Base_MspInit+0x130>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800169e:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <HAL_TIM_Base_MspInit+0x130>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80016a4:	4820      	ldr	r0, [pc, #128]	@ (8001728 <HAL_TIM_Base_MspInit+0x130>)
 80016a6:	f000 fa35 	bl	8001b14 <HAL_DMA_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_TIM_Base_MspInit+0xbc>
    {
      Error_Handler();
 80016b0:	f7ff fe62 	bl	8001378 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001728 <HAL_TIM_Base_MspInit+0x130>)
 80016b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80016ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001728 <HAL_TIM_Base_MspInit+0x130>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <HAL_TIM_Base_MspInit+0x138>)
 80016c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001734 <HAL_TIM_Base_MspInit+0x13c>)
 80016c4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <HAL_TIM_Base_MspInit+0x138>)
 80016c8:	2210      	movs	r2, #16
 80016ca:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016cc:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <HAL_TIM_Base_MspInit+0x138>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <HAL_TIM_Base_MspInit+0x138>)
 80016d4:	2280      	movs	r2, #128	@ 0x80
 80016d6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016d8:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_TIM_Base_MspInit+0x138>)
 80016da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016de:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e0:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <HAL_TIM_Base_MspInit+0x138>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_TIM_Base_MspInit+0x138>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80016ec:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <HAL_TIM_Base_MspInit+0x138>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80016f2:	480f      	ldr	r0, [pc, #60]	@ (8001730 <HAL_TIM_Base_MspInit+0x138>)
 80016f4:	f000 fa0e 	bl	8001b14 <HAL_DMA_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_TIM_Base_MspInit+0x10a>
    {
      Error_Handler();
 80016fe:	f7ff fe3b 	bl	8001378 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <HAL_TIM_Base_MspInit+0x138>)
 8001706:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001708:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <HAL_TIM_Base_MspInit+0x138>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40012c00 	.word	0x40012c00
 800171c:	40021000 	.word	0x40021000
 8001720:	20003400 	.word	0x20003400
 8001724:	4002001c 	.word	0x4002001c
 8001728:	20003444 	.word	0x20003444
 800172c:	40020030 	.word	0x40020030
 8001730:	20003488 	.word	0x20003488
 8001734:	4002006c 	.word	0x4002006c

08001738 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a10      	ldr	r2, [pc, #64]	@ (8001794 <HAL_TIM_MspPostInit+0x5c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d118      	bne.n	800178a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <HAL_TIM_MspPostInit+0x60>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <HAL_TIM_MspPostInit+0x60>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <HAL_TIM_MspPostInit+0x60>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001770:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2302      	movs	r3, #2
 800177c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	@ (800179c <HAL_TIM_MspPostInit+0x64>)
 8001786:	f000 fbb3 	bl	8001ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800178a:	bf00      	nop
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40012c00 	.word	0x40012c00
 8001798:	40021000 	.word	0x40021000
 800179c:	40010800 	.word	0x40010800

080017a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a0:	f7ff fe6c 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480b      	ldr	r0, [pc, #44]	@ (80017d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017a6:	490c      	ldr	r1, [pc, #48]	@ (80017d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017a8:	4a0c      	ldr	r2, [pc, #48]	@ (80017dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a09      	ldr	r2, [pc, #36]	@ (80017e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017bc:	4c09      	ldr	r4, [pc, #36]	@ (80017e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f002 fb73 	bl	8003eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ce:	f7fe ff7f 	bl	80006d0 <main>
  bx lr
 80017d2:	4770      	bx	lr
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80017dc:	08004040 	.word	0x08004040
  ldr r2, =_sbss
 80017e0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80017e4:	200034d0 	.word	0x200034d0

080017e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC1_2_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_Init+0x28>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_Init+0x28>)
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f947 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fdbc 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40022000 	.word	0x40022000

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f95f 	bl	8001afa <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f927 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000014 	.word	0x20000014
 8001870:	2000001c 	.word	0x2000001c
 8001874:	20000018 	.word	0x20000018

08001878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <HAL_IncTick+0x1c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <HAL_IncTick+0x20>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a03      	ldr	r2, [pc, #12]	@ (8001898 <HAL_IncTick+0x20>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	2000001c 	.word	0x2000001c
 8001898:	200034cc 	.word	0x200034cc

0800189c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b02      	ldr	r3, [pc, #8]	@ (80018ac <HAL_GetTick+0x10>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	200034cc 	.word	0x200034cc

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff fff0 	bl	800189c <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_Delay+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffe0 	bl	800189c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000001c 	.word	0x2000001c

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	@ (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4906      	ldr	r1, [pc, #24]	@ (8001990 <__NVIC_EnableIRQ+0x34>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	@ (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	@ (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	@ 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	@ 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff ff90 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff2d 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff42 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff90 	bl	80019e8 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5f 	bl	8001994 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff35 	bl	800195c <__NVIC_EnableIRQ>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffa2 	bl	8001a4c <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e043      	b.n	8001bb2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <HAL_DMA_Init+0xa8>)
 8001b32:	4413      	add	r3, r2
 8001b34:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <HAL_DMA_Init+0xac>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	009a      	lsls	r2, r3, #2
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc4 <HAL_DMA_Init+0xb0>)
 8001b46:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b5e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001b62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	bffdfff8 	.word	0xbffdfff8
 8001bc0:	cccccccd 	.word	0xcccccccd
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_DMA_Start_IT+0x20>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e04b      	b.n	8001c80 <HAL_DMA_Start_IT+0xb8>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d13a      	bne.n	8001c72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	68b9      	ldr	r1, [r7, #8]
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 f937 	bl	8001e94 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 020e 	orr.w	r2, r2, #14
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e00f      	b.n	8001c60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0204 	bic.w	r2, r2, #4
 8001c4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 020a 	orr.w	r2, r2, #10
 8001c5e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e005      	b.n	8001c7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d04f      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xc8>
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d04a      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0204 	bic.w	r2, r2, #4
 8001cd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a66      	ldr	r2, [pc, #408]	@ (8001e78 <HAL_DMA_IRQHandler+0x1f0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d029      	beq.n	8001d36 <HAL_DMA_IRQHandler+0xae>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a65      	ldr	r2, [pc, #404]	@ (8001e7c <HAL_DMA_IRQHandler+0x1f4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d022      	beq.n	8001d32 <HAL_DMA_IRQHandler+0xaa>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a63      	ldr	r2, [pc, #396]	@ (8001e80 <HAL_DMA_IRQHandler+0x1f8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d01a      	beq.n	8001d2c <HAL_DMA_IRQHandler+0xa4>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a62      	ldr	r2, [pc, #392]	@ (8001e84 <HAL_DMA_IRQHandler+0x1fc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d012      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x9e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a60      	ldr	r2, [pc, #384]	@ (8001e88 <HAL_DMA_IRQHandler+0x200>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00a      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x98>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8001e8c <HAL_DMA_IRQHandler+0x204>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d102      	bne.n	8001d1a <HAL_DMA_IRQHandler+0x92>
 8001d14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d18:	e00e      	b.n	8001d38 <HAL_DMA_IRQHandler+0xb0>
 8001d1a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001d1e:	e00b      	b.n	8001d38 <HAL_DMA_IRQHandler+0xb0>
 8001d20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d24:	e008      	b.n	8001d38 <HAL_DMA_IRQHandler+0xb0>
 8001d26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d2a:	e005      	b.n	8001d38 <HAL_DMA_IRQHandler+0xb0>
 8001d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d30:	e002      	b.n	8001d38 <HAL_DMA_IRQHandler+0xb0>
 8001d32:	2340      	movs	r3, #64	@ 0x40
 8001d34:	e000      	b.n	8001d38 <HAL_DMA_IRQHandler+0xb0>
 8001d36:	2304      	movs	r3, #4
 8001d38:	4a55      	ldr	r2, [pc, #340]	@ (8001e90 <HAL_DMA_IRQHandler+0x208>)
 8001d3a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8094 	beq.w	8001e6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d4e:	e08e      	b.n	8001e6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	2202      	movs	r2, #2
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d056      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x186>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d051      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10b      	bne.n	8001d90 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 020a 	bic.w	r2, r2, #10
 8001d86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a38      	ldr	r2, [pc, #224]	@ (8001e78 <HAL_DMA_IRQHandler+0x1f0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d029      	beq.n	8001dee <HAL_DMA_IRQHandler+0x166>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a37      	ldr	r2, [pc, #220]	@ (8001e7c <HAL_DMA_IRQHandler+0x1f4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d022      	beq.n	8001dea <HAL_DMA_IRQHandler+0x162>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a35      	ldr	r2, [pc, #212]	@ (8001e80 <HAL_DMA_IRQHandler+0x1f8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01a      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x15c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a34      	ldr	r2, [pc, #208]	@ (8001e84 <HAL_DMA_IRQHandler+0x1fc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d012      	beq.n	8001dde <HAL_DMA_IRQHandler+0x156>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a32      	ldr	r2, [pc, #200]	@ (8001e88 <HAL_DMA_IRQHandler+0x200>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x150>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a31      	ldr	r2, [pc, #196]	@ (8001e8c <HAL_DMA_IRQHandler+0x204>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d102      	bne.n	8001dd2 <HAL_DMA_IRQHandler+0x14a>
 8001dcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001dd0:	e00e      	b.n	8001df0 <HAL_DMA_IRQHandler+0x168>
 8001dd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dd6:	e00b      	b.n	8001df0 <HAL_DMA_IRQHandler+0x168>
 8001dd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ddc:	e008      	b.n	8001df0 <HAL_DMA_IRQHandler+0x168>
 8001dde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001de2:	e005      	b.n	8001df0 <HAL_DMA_IRQHandler+0x168>
 8001de4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001de8:	e002      	b.n	8001df0 <HAL_DMA_IRQHandler+0x168>
 8001dea:	2320      	movs	r3, #32
 8001dec:	e000      	b.n	8001df0 <HAL_DMA_IRQHandler+0x168>
 8001dee:	2302      	movs	r3, #2
 8001df0:	4a27      	ldr	r2, [pc, #156]	@ (8001e90 <HAL_DMA_IRQHandler+0x208>)
 8001df2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d034      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e0c:	e02f      	b.n	8001e6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	2208      	movs	r2, #8
 8001e14:	409a      	lsls	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d028      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x1e8>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d023      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 020e 	bic.w	r2, r2, #14
 8001e36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
    }
  }
  return;
 8001e6e:	bf00      	nop
 8001e70:	bf00      	nop
}
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40020008 	.word	0x40020008
 8001e7c:	4002001c 	.word	0x4002001c
 8001e80:	40020030 	.word	0x40020030
 8001e84:	40020044 	.word	0x40020044
 8001e88:	40020058 	.word	0x40020058
 8001e8c:	4002006c 	.word	0x4002006c
 8001e90:	40020000 	.word	0x40020000

08001e94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b10      	cmp	r3, #16
 8001ec0:	d108      	bne.n	8001ed4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ed2:	e007      	b.n	8001ee4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	60da      	str	r2, [r3, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
	...

08001ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b08b      	sub	sp, #44	@ 0x2c
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	e169      	b.n	80021d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f04:	2201      	movs	r2, #1
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	f040 8158 	bne.w	80021d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4a9a      	ldr	r2, [pc, #616]	@ (8002190 <HAL_GPIO_Init+0x2a0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d05e      	beq.n	8001fea <HAL_GPIO_Init+0xfa>
 8001f2c:	4a98      	ldr	r2, [pc, #608]	@ (8002190 <HAL_GPIO_Init+0x2a0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d875      	bhi.n	800201e <HAL_GPIO_Init+0x12e>
 8001f32:	4a98      	ldr	r2, [pc, #608]	@ (8002194 <HAL_GPIO_Init+0x2a4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d058      	beq.n	8001fea <HAL_GPIO_Init+0xfa>
 8001f38:	4a96      	ldr	r2, [pc, #600]	@ (8002194 <HAL_GPIO_Init+0x2a4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d86f      	bhi.n	800201e <HAL_GPIO_Init+0x12e>
 8001f3e:	4a96      	ldr	r2, [pc, #600]	@ (8002198 <HAL_GPIO_Init+0x2a8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d052      	beq.n	8001fea <HAL_GPIO_Init+0xfa>
 8001f44:	4a94      	ldr	r2, [pc, #592]	@ (8002198 <HAL_GPIO_Init+0x2a8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d869      	bhi.n	800201e <HAL_GPIO_Init+0x12e>
 8001f4a:	4a94      	ldr	r2, [pc, #592]	@ (800219c <HAL_GPIO_Init+0x2ac>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d04c      	beq.n	8001fea <HAL_GPIO_Init+0xfa>
 8001f50:	4a92      	ldr	r2, [pc, #584]	@ (800219c <HAL_GPIO_Init+0x2ac>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d863      	bhi.n	800201e <HAL_GPIO_Init+0x12e>
 8001f56:	4a92      	ldr	r2, [pc, #584]	@ (80021a0 <HAL_GPIO_Init+0x2b0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d046      	beq.n	8001fea <HAL_GPIO_Init+0xfa>
 8001f5c:	4a90      	ldr	r2, [pc, #576]	@ (80021a0 <HAL_GPIO_Init+0x2b0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d85d      	bhi.n	800201e <HAL_GPIO_Init+0x12e>
 8001f62:	2b12      	cmp	r3, #18
 8001f64:	d82a      	bhi.n	8001fbc <HAL_GPIO_Init+0xcc>
 8001f66:	2b12      	cmp	r3, #18
 8001f68:	d859      	bhi.n	800201e <HAL_GPIO_Init+0x12e>
 8001f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f70 <HAL_GPIO_Init+0x80>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001feb 	.word	0x08001feb
 8001f74:	08001fc5 	.word	0x08001fc5
 8001f78:	08001fd7 	.word	0x08001fd7
 8001f7c:	08002019 	.word	0x08002019
 8001f80:	0800201f 	.word	0x0800201f
 8001f84:	0800201f 	.word	0x0800201f
 8001f88:	0800201f 	.word	0x0800201f
 8001f8c:	0800201f 	.word	0x0800201f
 8001f90:	0800201f 	.word	0x0800201f
 8001f94:	0800201f 	.word	0x0800201f
 8001f98:	0800201f 	.word	0x0800201f
 8001f9c:	0800201f 	.word	0x0800201f
 8001fa0:	0800201f 	.word	0x0800201f
 8001fa4:	0800201f 	.word	0x0800201f
 8001fa8:	0800201f 	.word	0x0800201f
 8001fac:	0800201f 	.word	0x0800201f
 8001fb0:	0800201f 	.word	0x0800201f
 8001fb4:	08001fcd 	.word	0x08001fcd
 8001fb8:	08001fe1 	.word	0x08001fe1
 8001fbc:	4a79      	ldr	r2, [pc, #484]	@ (80021a4 <HAL_GPIO_Init+0x2b4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fc2:	e02c      	b.n	800201e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	623b      	str	r3, [r7, #32]
          break;
 8001fca:	e029      	b.n	8002020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	623b      	str	r3, [r7, #32]
          break;
 8001fd4:	e024      	b.n	8002020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	3308      	adds	r3, #8
 8001fdc:	623b      	str	r3, [r7, #32]
          break;
 8001fde:	e01f      	b.n	8002020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	330c      	adds	r3, #12
 8001fe6:	623b      	str	r3, [r7, #32]
          break;
 8001fe8:	e01a      	b.n	8002020 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e013      	b.n	8002020 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002000:	2308      	movs	r3, #8
 8002002:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	611a      	str	r2, [r3, #16]
          break;
 800200a:	e009      	b.n	8002020 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800200c:	2308      	movs	r3, #8
 800200e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	615a      	str	r2, [r3, #20]
          break;
 8002016:	e003      	b.n	8002020 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002018:	2300      	movs	r3, #0
 800201a:	623b      	str	r3, [r7, #32]
          break;
 800201c:	e000      	b.n	8002020 <HAL_GPIO_Init+0x130>
          break;
 800201e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2bff      	cmp	r3, #255	@ 0xff
 8002024:	d801      	bhi.n	800202a <HAL_GPIO_Init+0x13a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	e001      	b.n	800202e <HAL_GPIO_Init+0x13e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3304      	adds	r3, #4
 800202e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2bff      	cmp	r3, #255	@ 0xff
 8002034:	d802      	bhi.n	800203c <HAL_GPIO_Init+0x14c>
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	e002      	b.n	8002042 <HAL_GPIO_Init+0x152>
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	3b08      	subs	r3, #8
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	210f      	movs	r1, #15
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	401a      	ands	r2, r3
 8002054:	6a39      	ldr	r1, [r7, #32]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	431a      	orrs	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 80b1 	beq.w	80021d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002070:	4b4d      	ldr	r3, [pc, #308]	@ (80021a8 <HAL_GPIO_Init+0x2b8>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4a4c      	ldr	r2, [pc, #304]	@ (80021a8 <HAL_GPIO_Init+0x2b8>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6193      	str	r3, [r2, #24]
 800207c:	4b4a      	ldr	r3, [pc, #296]	@ (80021a8 <HAL_GPIO_Init+0x2b8>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002088:	4a48      	ldr	r2, [pc, #288]	@ (80021ac <HAL_GPIO_Init+0x2bc>)
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	3302      	adds	r3, #2
 8002090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002094:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a40      	ldr	r2, [pc, #256]	@ (80021b0 <HAL_GPIO_Init+0x2c0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <HAL_GPIO_Init+0x1ec>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a3f      	ldr	r2, [pc, #252]	@ (80021b4 <HAL_GPIO_Init+0x2c4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00d      	beq.n	80020d8 <HAL_GPIO_Init+0x1e8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a3e      	ldr	r2, [pc, #248]	@ (80021b8 <HAL_GPIO_Init+0x2c8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d007      	beq.n	80020d4 <HAL_GPIO_Init+0x1e4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a3d      	ldr	r2, [pc, #244]	@ (80021bc <HAL_GPIO_Init+0x2cc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_GPIO_Init+0x1e0>
 80020cc:	2303      	movs	r3, #3
 80020ce:	e006      	b.n	80020de <HAL_GPIO_Init+0x1ee>
 80020d0:	2304      	movs	r3, #4
 80020d2:	e004      	b.n	80020de <HAL_GPIO_Init+0x1ee>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e002      	b.n	80020de <HAL_GPIO_Init+0x1ee>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <HAL_GPIO_Init+0x1ee>
 80020dc:	2300      	movs	r3, #0
 80020de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e0:	f002 0203 	and.w	r2, r2, #3
 80020e4:	0092      	lsls	r2, r2, #2
 80020e6:	4093      	lsls	r3, r2
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020ee:	492f      	ldr	r1, [pc, #188]	@ (80021ac <HAL_GPIO_Init+0x2bc>)
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3302      	adds	r3, #2
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d006      	beq.n	8002116 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002108:	4b2d      	ldr	r3, [pc, #180]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	492c      	ldr	r1, [pc, #176]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	608b      	str	r3, [r1, #8]
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002116:	4b2a      	ldr	r3, [pc, #168]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	43db      	mvns	r3, r3
 800211e:	4928      	ldr	r1, [pc, #160]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002120:	4013      	ands	r3, r2
 8002122:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d006      	beq.n	800213e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002130:	4b23      	ldr	r3, [pc, #140]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4922      	ldr	r1, [pc, #136]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	60cb      	str	r3, [r1, #12]
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800213e:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	43db      	mvns	r3, r3
 8002146:	491e      	ldr	r1, [pc, #120]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002148:	4013      	ands	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002158:	4b19      	ldr	r3, [pc, #100]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4918      	ldr	r1, [pc, #96]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
 8002164:	e006      	b.n	8002174 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002166:	4b16      	ldr	r3, [pc, #88]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	43db      	mvns	r3, r3
 800216e:	4914      	ldr	r1, [pc, #80]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002170:	4013      	ands	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d021      	beq.n	80021c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002180:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	490e      	ldr	r1, [pc, #56]	@ (80021c0 <HAL_GPIO_Init+0x2d0>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
 800218c:	e021      	b.n	80021d2 <HAL_GPIO_Init+0x2e2>
 800218e:	bf00      	nop
 8002190:	10320000 	.word	0x10320000
 8002194:	10310000 	.word	0x10310000
 8002198:	10220000 	.word	0x10220000
 800219c:	10210000 	.word	0x10210000
 80021a0:	10120000 	.word	0x10120000
 80021a4:	10110000 	.word	0x10110000
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000
 80021b0:	40010800 	.word	0x40010800
 80021b4:	40010c00 	.word	0x40010c00
 80021b8:	40011000 	.word	0x40011000
 80021bc:	40011400 	.word	0x40011400
 80021c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <HAL_GPIO_Init+0x304>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	4909      	ldr	r1, [pc, #36]	@ (80021f4 <HAL_GPIO_Init+0x304>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	3301      	adds	r3, #1
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f47f ae8e 	bne.w	8001f04 <HAL_GPIO_Init+0x14>
  }
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	372c      	adds	r7, #44	@ 0x2c
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	40010400 	.word	0x40010400

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002214:	e003      	b.n	800221e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	041a      	lsls	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e272      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8087 	beq.w	8002356 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002248:	4b92      	ldr	r3, [pc, #584]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b04      	cmp	r3, #4
 8002252:	d00c      	beq.n	800226e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002254:	4b8f      	ldr	r3, [pc, #572]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d112      	bne.n	8002286 <HAL_RCC_OscConfig+0x5e>
 8002260:	4b8c      	ldr	r3, [pc, #560]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226c:	d10b      	bne.n	8002286 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226e:	4b89      	ldr	r3, [pc, #548]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d06c      	beq.n	8002354 <HAL_RCC_OscConfig+0x12c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d168      	bne.n	8002354 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e24c      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x76>
 8002290:	4b80      	ldr	r3, [pc, #512]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a7f      	ldr	r2, [pc, #508]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	e02e      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x98>
 80022a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a7a      	ldr	r2, [pc, #488]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b78      	ldr	r3, [pc, #480]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a77      	ldr	r2, [pc, #476]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e01d      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0xbc>
 80022ca:	4b72      	ldr	r3, [pc, #456]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a71      	ldr	r2, [pc, #452]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6e      	ldr	r2, [pc, #440]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e00b      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 80022e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b68      	ldr	r3, [pc, #416]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a67      	ldr	r2, [pc, #412]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff faca 	bl	800189c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fac6 	bl	800189c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	@ 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e200      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b5d      	ldr	r3, [pc, #372]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0xe4>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fab6 	bl	800189c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7ff fab2 	bl	800189c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	@ 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1ec      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x10c>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d063      	beq.n	800242a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002362:	4b4c      	ldr	r3, [pc, #304]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800236e:	4b49      	ldr	r3, [pc, #292]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b08      	cmp	r3, #8
 8002378:	d11c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x18c>
 800237a:	4b46      	ldr	r3, [pc, #280]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d116      	bne.n	80023b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	4b43      	ldr	r3, [pc, #268]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <HAL_RCC_OscConfig+0x176>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e1c0      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239e:	4b3d      	ldr	r3, [pc, #244]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4939      	ldr	r1, [pc, #228]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	e03a      	b.n	800242a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023bc:	4b36      	ldr	r3, [pc, #216]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023be:	2201      	movs	r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7ff fa6b 	bl	800189c <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ca:	f7ff fa67 	bl	800189c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e1a1      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4927      	ldr	r1, [pc, #156]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]
 80023fc:	e015      	b.n	800242a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fe:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fa4a 	bl	800189c <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240c:	f7ff fa46 	bl	800189c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e180      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241e:	4b1d      	ldr	r3, [pc, #116]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d03a      	beq.n	80024ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d019      	beq.n	8002472 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243e:	4b17      	ldr	r3, [pc, #92]	@ (800249c <HAL_RCC_OscConfig+0x274>)
 8002440:	2201      	movs	r2, #1
 8002442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002444:	f7ff fa2a 	bl	800189c <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244c:	f7ff fa26 	bl	800189c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e160      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245e:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800246a:	2001      	movs	r0, #1
 800246c:	f000 fa9c 	bl	80029a8 <RCC_Delay>
 8002470:	e01c      	b.n	80024ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002472:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <HAL_RCC_OscConfig+0x274>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7ff fa10 	bl	800189c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247e:	e00f      	b.n	80024a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002480:	f7ff fa0c 	bl	800189c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d908      	bls.n	80024a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e146      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	42420000 	.word	0x42420000
 800249c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a0:	4b92      	ldr	r3, [pc, #584]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e9      	bne.n	8002480 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a6 	beq.w	8002606 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024be:	4b8b      	ldr	r3, [pc, #556]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b88      	ldr	r3, [pc, #544]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a87      	ldr	r2, [pc, #540]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]
 80024d6:	4b85      	ldr	r3, [pc, #532]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e2:	2301      	movs	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	4b82      	ldr	r3, [pc, #520]	@ (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d118      	bne.n	8002524 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f2:	4b7f      	ldr	r3, [pc, #508]	@ (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7e      	ldr	r2, [pc, #504]	@ (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fe:	f7ff f9cd 	bl	800189c <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002506:	f7ff f9c9 	bl	800189c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b64      	cmp	r3, #100	@ 0x64
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e103      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b75      	ldr	r3, [pc, #468]	@ (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x312>
 800252c:	4b6f      	ldr	r3, [pc, #444]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4a6e      	ldr	r2, [pc, #440]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6213      	str	r3, [r2, #32]
 8002538:	e02d      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x334>
 8002542:	4b6a      	ldr	r3, [pc, #424]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a69      	ldr	r2, [pc, #420]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	4b67      	ldr	r3, [pc, #412]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a66      	ldr	r2, [pc, #408]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	e01c      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d10c      	bne.n	800257e <HAL_RCC_OscConfig+0x356>
 8002564:	4b61      	ldr	r3, [pc, #388]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4a60      	ldr	r2, [pc, #384]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6213      	str	r3, [r2, #32]
 8002570:	4b5e      	ldr	r3, [pc, #376]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a5d      	ldr	r2, [pc, #372]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	e00b      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800257e:	4b5b      	ldr	r3, [pc, #364]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a5a      	ldr	r2, [pc, #360]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	4b58      	ldr	r3, [pc, #352]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a57      	ldr	r2, [pc, #348]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d015      	beq.n	80025ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7ff f97d 	bl	800189c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7ff f979 	bl	800189c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0b1      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025bc:	4b4b      	ldr	r3, [pc, #300]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ee      	beq.n	80025a6 <HAL_RCC_OscConfig+0x37e>
 80025c8:	e014      	b.n	80025f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7ff f967 	bl	800189c <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7ff f963 	bl	800189c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e09b      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	4b40      	ldr	r3, [pc, #256]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ee      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d105      	bne.n	8002606 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fa:	4b3c      	ldr	r3, [pc, #240]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4a3b      	ldr	r2, [pc, #236]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002604:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8087 	beq.w	800271e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002610:	4b36      	ldr	r3, [pc, #216]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d061      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d146      	bne.n	80026b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b33      	ldr	r3, [pc, #204]	@ (80026f4 <HAL_RCC_OscConfig+0x4cc>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7ff f937 	bl	800189c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002632:	f7ff f933 	bl	800189c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e06d      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002644:	4b29      	ldr	r3, [pc, #164]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002658:	d108      	bne.n	800266c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800265a:	4b24      	ldr	r3, [pc, #144]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4921      	ldr	r1, [pc, #132]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266c:	4b1f      	ldr	r3, [pc, #124]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a19      	ldr	r1, [r3, #32]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	430b      	orrs	r3, r1
 800267e:	491b      	ldr	r1, [pc, #108]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002684:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <HAL_RCC_OscConfig+0x4cc>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff f907 	bl	800189c <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002692:	f7ff f903 	bl	800189c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e03d      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x46a>
 80026b0:	e035      	b.n	800271e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <HAL_RCC_OscConfig+0x4cc>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff f8f0 	bl	800189c <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c0:	f7ff f8ec 	bl	800189c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e026      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x498>
 80026de:	e01e      	b.n	800271e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e019      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
 80026f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <HAL_RCC_OscConfig+0x500>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000

0800272c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0d0      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b6a      	ldr	r3, [pc, #424]	@ (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d910      	bls.n	8002770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b67      	ldr	r3, [pc, #412]	@ (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 0207 	bic.w	r2, r3, #7
 8002756:	4965      	ldr	r1, [pc, #404]	@ (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b63      	ldr	r3, [pc, #396]	@ (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0b8      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002788:	4b59      	ldr	r3, [pc, #356]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a58      	ldr	r2, [pc, #352]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002792:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a0:	4b53      	ldr	r3, [pc, #332]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a52      	ldr	r2, [pc, #328]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b50      	ldr	r3, [pc, #320]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	494d      	ldr	r1, [pc, #308]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d040      	beq.n	800284c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b47      	ldr	r3, [pc, #284]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d115      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	4b41      	ldr	r3, [pc, #260]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e073      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b3d      	ldr	r3, [pc, #244]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e06b      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b39      	ldr	r3, [pc, #228]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4936      	ldr	r1, [pc, #216]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800281c:	f7ff f83e 	bl	800189c <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7ff f83a 	bl	800189c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e053      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b2d      	ldr	r3, [pc, #180]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800284c:	4b27      	ldr	r3, [pc, #156]	@ (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d210      	bcs.n	800287c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 0207 	bic.w	r2, r3, #7
 8002862:	4922      	ldr	r1, [pc, #136]	@ (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e032      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	4b19      	ldr	r3, [pc, #100]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4916      	ldr	r1, [pc, #88]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028a6:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	490e      	ldr	r1, [pc, #56]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ba:	f000 f821 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	490a      	ldr	r1, [pc, #40]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	5ccb      	ldrb	r3, [r1, r3]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	4a09      	ldr	r2, [pc, #36]	@ (80028f8 <HAL_RCC_ClockConfig+0x1cc>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028d6:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <HAL_RCC_ClockConfig+0x1d0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe ff9c 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40022000 	.word	0x40022000
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08003f14 	.word	0x08003f14
 80028f8:	20000014 	.word	0x20000014
 80028fc:	20000018 	.word	0x20000018

08002900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800291a:	4b1e      	ldr	r3, [pc, #120]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x94>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b04      	cmp	r3, #4
 8002928:	d002      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x30>
 800292a:	2b08      	cmp	r3, #8
 800292c:	d003      	beq.n	8002936 <HAL_RCC_GetSysClockFreq+0x36>
 800292e:	e027      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x98>)
 8002932:	613b      	str	r3, [r7, #16]
      break;
 8002934:	e027      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	0c9b      	lsrs	r3, r3, #18
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	4a17      	ldr	r2, [pc, #92]	@ (800299c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002940:	5cd3      	ldrb	r3, [r2, r3]
 8002942:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d010      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800294e:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x94>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	0c5b      	lsrs	r3, r3, #17
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	4a11      	ldr	r2, [pc, #68]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800295a:	5cd3      	ldrb	r3, [r2, r3]
 800295c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a0d      	ldr	r2, [pc, #52]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x98>)
 8002962:	fb03 f202 	mul.w	r2, r3, r2
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	e004      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a0c      	ldr	r2, [pc, #48]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	613b      	str	r3, [r7, #16]
      break;
 800297e:	e002      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x98>)
 8002982:	613b      	str	r3, [r7, #16]
      break;
 8002984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002986:	693b      	ldr	r3, [r7, #16]
}
 8002988:	4618      	mov	r0, r3
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	007a1200 	.word	0x007a1200
 800299c:	08003f24 	.word	0x08003f24
 80029a0:	08003f34 	.word	0x08003f34
 80029a4:	003d0900 	.word	0x003d0900

080029a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029b0:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <RCC_Delay+0x34>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0a      	ldr	r2, [pc, #40]	@ (80029e0 <RCC_Delay+0x38>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0a5b      	lsrs	r3, r3, #9
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029c4:	bf00      	nop
  }
  while (Delay --);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	60fa      	str	r2, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f9      	bne.n	80029c4 <RCC_Delay+0x1c>
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	20000014 	.word	0x20000014
 80029e0:	10624dd3 	.word	0x10624dd3

080029e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e041      	b.n	8002a7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe fdf4 	bl	80015f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f000 fc9e 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e041      	b.n	8002b18 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f839 	bl	8002b20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f000 fc4f 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e022      	b.n	8002ba6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d109      	bne.n	8002b7a <HAL_TIM_PWM_Start_DMA+0x46>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	bf0c      	ite	eq
 8002b72:	2301      	moveq	r3, #1
 8002b74:	2300      	movne	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	e015      	b.n	8002ba6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d109      	bne.n	8002b94 <HAL_TIM_PWM_Start_DMA+0x60>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e008      	b.n	8002ba6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002baa:	2302      	movs	r3, #2
 8002bac:	e153      	b.n	8002e56 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_TIM_PWM_Start_DMA+0x94>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e022      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0xda>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d109      	bne.n	8002be2 <HAL_TIM_PWM_Start_DMA+0xae>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	bf0c      	ite	eq
 8002bda:	2301      	moveq	r3, #1
 8002bdc:	2300      	movne	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	e015      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0xda>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d109      	bne.n	8002bfc <HAL_TIM_PWM_Start_DMA+0xc8>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e008      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0xda>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d024      	beq.n	8002c5c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_TIM_PWM_Start_DMA+0xea>
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e119      	b.n	8002e56 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c30:	e016      	b.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c40:	e00e      	b.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d104      	bne.n	8002c52 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c50:	e006      	b.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c5a:	e001      	b.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0fa      	b.n	8002e56 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	f200 80ae 	bhi.w	8002dc4 <HAL_TIM_PWM_Start_DMA+0x290>
 8002c68:	a201      	add	r2, pc, #4	@ (adr r2, 8002c70 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002ca5 	.word	0x08002ca5
 8002c74:	08002dc5 	.word	0x08002dc5
 8002c78:	08002dc5 	.word	0x08002dc5
 8002c7c:	08002dc5 	.word	0x08002dc5
 8002c80:	08002ced 	.word	0x08002ced
 8002c84:	08002dc5 	.word	0x08002dc5
 8002c88:	08002dc5 	.word	0x08002dc5
 8002c8c:	08002dc5 	.word	0x08002dc5
 8002c90:	08002d35 	.word	0x08002d35
 8002c94:	08002dc5 	.word	0x08002dc5
 8002c98:	08002dc5 	.word	0x08002dc5
 8002c9c:	08002dc5 	.word	0x08002dc5
 8002ca0:	08002d7d 	.word	0x08002d7d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	4a6d      	ldr	r2, [pc, #436]	@ (8002e60 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002caa:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	4a6c      	ldr	r2, [pc, #432]	@ (8002e64 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	4a6b      	ldr	r2, [pc, #428]	@ (8002e68 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3334      	adds	r3, #52	@ 0x34
 8002cc8:	461a      	mov	r2, r3
 8002cca:	887b      	ldrh	r3, [r7, #2]
 8002ccc:	f7fe ff7c 	bl	8001bc8 <HAL_DMA_Start_IT>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0bd      	b.n	8002e56 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce8:	60da      	str	r2, [r3, #12]
      break;
 8002cea:	e06e      	b.n	8002dca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	4a5b      	ldr	r2, [pc, #364]	@ (8002e60 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	4a5a      	ldr	r2, [pc, #360]	@ (8002e64 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	4a59      	ldr	r2, [pc, #356]	@ (8002e68 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002d02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3338      	adds	r3, #56	@ 0x38
 8002d10:	461a      	mov	r2, r3
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	f7fe ff58 	bl	8001bc8 <HAL_DMA_Start_IT>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e099      	b.n	8002e56 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d30:	60da      	str	r2, [r3, #12]
      break;
 8002d32:	e04a      	b.n	8002dca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	4a49      	ldr	r2, [pc, #292]	@ (8002e60 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002d3a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	4a48      	ldr	r2, [pc, #288]	@ (8002e64 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002d42:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d48:	4a47      	ldr	r2, [pc, #284]	@ (8002e68 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002d4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	333c      	adds	r3, #60	@ 0x3c
 8002d58:	461a      	mov	r2, r3
 8002d5a:	887b      	ldrh	r3, [r7, #2]
 8002d5c:	f7fe ff34 	bl	8001bc8 <HAL_DMA_Start_IT>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e075      	b.n	8002e56 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d78:	60da      	str	r2, [r3, #12]
      break;
 8002d7a:	e026      	b.n	8002dca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	4a37      	ldr	r2, [pc, #220]	@ (8002e60 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002d82:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	4a36      	ldr	r2, [pc, #216]	@ (8002e64 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d90:	4a35      	ldr	r2, [pc, #212]	@ (8002e68 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3340      	adds	r3, #64	@ 0x40
 8002da0:	461a      	mov	r2, r3
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	f7fe ff10 	bl	8001bc8 <HAL_DMA_Start_IT>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e051      	b.n	8002e56 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002dc0:	60da      	str	r2, [r3, #12]
      break;
 8002dc2:	e002      	b.n	8002dca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d141      	bne.n	8002e54 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fd4f 	bl	800387c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a22      	ldr	r2, [pc, #136]	@ (8002e6c <HAL_TIM_PWM_Start_DMA+0x338>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d107      	bne.n	8002df8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002df6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e6c <HAL_TIM_PWM_Start_DMA+0x338>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00e      	beq.n	8002e20 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e0a:	d009      	beq.n	8002e20 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a17      	ldr	r2, [pc, #92]	@ (8002e70 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a16      	ldr	r2, [pc, #88]	@ (8002e74 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d111      	bne.n	8002e44 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d010      	beq.n	8002e54 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e42:	e007      	b.n	8002e54 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	08003253 	.word	0x08003253
 8002e64:	080032fb 	.word	0x080032fb
 8002e68:	080031c1 	.word	0x080031c1
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800

08002e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e0ae      	b.n	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b0c      	cmp	r3, #12
 8002ea2:	f200 809f 	bhi.w	8002fe4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002fe5 	.word	0x08002fe5
 8002eb4:	08002fe5 	.word	0x08002fe5
 8002eb8:	08002fe5 	.word	0x08002fe5
 8002ebc:	08002f21 	.word	0x08002f21
 8002ec0:	08002fe5 	.word	0x08002fe5
 8002ec4:	08002fe5 	.word	0x08002fe5
 8002ec8:	08002fe5 	.word	0x08002fe5
 8002ecc:	08002f63 	.word	0x08002f63
 8002ed0:	08002fe5 	.word	0x08002fe5
 8002ed4:	08002fe5 	.word	0x08002fe5
 8002ed8:	08002fe5 	.word	0x08002fe5
 8002edc:	08002fa3 	.word	0x08002fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 faaa 	bl	8003440 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0208 	orr.w	r2, r2, #8
 8002efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6999      	ldr	r1, [r3, #24]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	619a      	str	r2, [r3, #24]
      break;
 8002f1e:	e064      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 faf0 	bl	800350c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	021a      	lsls	r2, r3, #8
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	619a      	str	r2, [r3, #24]
      break;
 8002f60:	e043      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fb39 	bl	80035e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0208 	orr.w	r2, r2, #8
 8002f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0204 	bic.w	r2, r2, #4
 8002f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69d9      	ldr	r1, [r3, #28]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	61da      	str	r2, [r3, #28]
      break;
 8002fa0:	e023      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fb83 	bl	80036b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69d9      	ldr	r1, [r3, #28]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	021a      	lsls	r2, r3, #8
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	61da      	str	r2, [r3, #28]
      break;
 8002fe2:	e002      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_TIM_ConfigClockSource+0x1c>
 8003014:	2302      	movs	r3, #2
 8003016:	e0b4      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x186>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800303e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003050:	d03e      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003056:	f200 8087 	bhi.w	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800305e:	f000 8086 	beq.w	800316e <HAL_TIM_ConfigClockSource+0x172>
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003066:	d87f      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b70      	cmp	r3, #112	@ 0x70
 800306a:	d01a      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0xa6>
 800306c:	2b70      	cmp	r3, #112	@ 0x70
 800306e:	d87b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b60      	cmp	r3, #96	@ 0x60
 8003072:	d050      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x11a>
 8003074:	2b60      	cmp	r3, #96	@ 0x60
 8003076:	d877      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b50      	cmp	r3, #80	@ 0x50
 800307a:	d03c      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0xfa>
 800307c:	2b50      	cmp	r3, #80	@ 0x50
 800307e:	d873      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b40      	cmp	r3, #64	@ 0x40
 8003082:	d058      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x13a>
 8003084:	2b40      	cmp	r3, #64	@ 0x40
 8003086:	d86f      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b30      	cmp	r3, #48	@ 0x30
 800308a:	d064      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 800308c:	2b30      	cmp	r3, #48	@ 0x30
 800308e:	d86b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b20      	cmp	r3, #32
 8003092:	d060      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 8003094:	2b20      	cmp	r3, #32
 8003096:	d867      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d05c      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	2b10      	cmp	r3, #16
 800309e:	d05a      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 80030a0:	e062      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030b2:	f000 fbc4 	bl	800383e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	609a      	str	r2, [r3, #8]
      break;
 80030ce:	e04f      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030e0:	f000 fbad 	bl	800383e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030f2:	609a      	str	r2, [r3, #8]
      break;
 80030f4:	e03c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003102:	461a      	mov	r2, r3
 8003104:	f000 fb24 	bl	8003750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2150      	movs	r1, #80	@ 0x50
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fb7b 	bl	800380a <TIM_ITRx_SetConfig>
      break;
 8003114:	e02c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003122:	461a      	mov	r2, r3
 8003124:	f000 fb42 	bl	80037ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2160      	movs	r1, #96	@ 0x60
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fb6b 	bl	800380a <TIM_ITRx_SetConfig>
      break;
 8003134:	e01c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003142:	461a      	mov	r2, r3
 8003144:	f000 fb04 	bl	8003750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2140      	movs	r1, #64	@ 0x40
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fb5b 	bl	800380a <TIM_ITRx_SetConfig>
      break;
 8003154:	e00c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f000 fb52 	bl	800380a <TIM_ITRx_SetConfig>
      break;
 8003166:	e003      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      break;
 800316c:	e000      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800316e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d107      	bne.n	80031e8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031e6:	e02a      	b.n	800323e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d107      	bne.n	8003202 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2202      	movs	r2, #2
 80031f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003200:	e01d      	b.n	800323e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	429a      	cmp	r2, r3
 800320a:	d107      	bne.n	800321c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2204      	movs	r2, #4
 8003210:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800321a:	e010      	b.n	800323e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	429a      	cmp	r2, r3
 8003224:	d107      	bne.n	8003236 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2208      	movs	r2, #8
 800322a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003234:	e003      	b.n	800323e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7ff ffb5 	bl	80031ae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	771a      	strb	r2, [r3, #28]
}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	d10b      	bne.n	8003282 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d136      	bne.n	80032e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003280:	e031      	b.n	80032e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	429a      	cmp	r2, r3
 800328a:	d10b      	bne.n	80032a4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2202      	movs	r2, #2
 8003290:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d125      	bne.n	80032e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a2:	e020      	b.n	80032e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10b      	bne.n	80032c6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2204      	movs	r2, #4
 80032b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d114      	bne.n	80032e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032c4:	e00f      	b.n	80032e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d10a      	bne.n	80032e6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2208      	movs	r2, #8
 80032d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d103      	bne.n	80032e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff ff4f 	bl	800318a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	771a      	strb	r2, [r3, #28]
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	d103      	bne.n	800331a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	771a      	strb	r2, [r3, #28]
 8003318:	e019      	b.n	800334e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d103      	bne.n	800332c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2202      	movs	r2, #2
 8003328:	771a      	strb	r2, [r3, #28]
 800332a:	e010      	b.n	800334e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	429a      	cmp	r2, r3
 8003334:	d103      	bne.n	800333e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2204      	movs	r2, #4
 800333a:	771a      	strb	r2, [r3, #28]
 800333c:	e007      	b.n	800334e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	d102      	bne.n	800334e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2208      	movs	r2, #8
 800334c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f7ff ff24 	bl	800319c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	771a      	strb	r2, [r3, #28]
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a2f      	ldr	r2, [pc, #188]	@ (8003434 <TIM_Base_SetConfig+0xd0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00b      	beq.n	8003394 <TIM_Base_SetConfig+0x30>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003382:	d007      	beq.n	8003394 <TIM_Base_SetConfig+0x30>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a2c      	ldr	r2, [pc, #176]	@ (8003438 <TIM_Base_SetConfig+0xd4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d003      	beq.n	8003394 <TIM_Base_SetConfig+0x30>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a2b      	ldr	r2, [pc, #172]	@ (800343c <TIM_Base_SetConfig+0xd8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d108      	bne.n	80033a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a22      	ldr	r2, [pc, #136]	@ (8003434 <TIM_Base_SetConfig+0xd0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00b      	beq.n	80033c6 <TIM_Base_SetConfig+0x62>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b4:	d007      	beq.n	80033c6 <TIM_Base_SetConfig+0x62>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003438 <TIM_Base_SetConfig+0xd4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d003      	beq.n	80033c6 <TIM_Base_SetConfig+0x62>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1e      	ldr	r2, [pc, #120]	@ (800343c <TIM_Base_SetConfig+0xd8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d108      	bne.n	80033d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003434 <TIM_Base_SetConfig+0xd0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d103      	bne.n	800340c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f023 0201 	bic.w	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	611a      	str	r2, [r3, #16]
  }
}
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	40012c00 	.word	0x40012c00
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800

08003440 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f023 0201 	bic.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800346e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0303 	bic.w	r3, r3, #3
 8003476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f023 0302 	bic.w	r3, r3, #2
 8003488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a1c      	ldr	r2, [pc, #112]	@ (8003508 <TIM_OC1_SetConfig+0xc8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d10c      	bne.n	80034b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0308 	bic.w	r3, r3, #8
 80034a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f023 0304 	bic.w	r3, r3, #4
 80034b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a13      	ldr	r2, [pc, #76]	@ (8003508 <TIM_OC1_SetConfig+0xc8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d111      	bne.n	80034e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	621a      	str	r2, [r3, #32]
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40012c00 	.word	0x40012c00

0800350c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f023 0210 	bic.w	r2, r3, #16
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800353a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f023 0320 	bic.w	r3, r3, #32
 8003556:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a1d      	ldr	r2, [pc, #116]	@ (80035dc <TIM_OC2_SetConfig+0xd0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d10d      	bne.n	8003588 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003586:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a14      	ldr	r2, [pc, #80]	@ (80035dc <TIM_OC2_SetConfig+0xd0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d113      	bne.n	80035b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800359e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	621a      	str	r2, [r3, #32]
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	40012c00 	.word	0x40012c00

080035e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1d      	ldr	r2, [pc, #116]	@ (80036b0 <TIM_OC3_SetConfig+0xd0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10d      	bne.n	800365a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a14      	ldr	r2, [pc, #80]	@ (80036b0 <TIM_OC3_SetConfig+0xd0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d113      	bne.n	800368a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	621a      	str	r2, [r3, #32]
}
 80036a4:	bf00      	nop
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40012c00 	.word	0x40012c00

080036b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	031b      	lsls	r3, r3, #12
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a0f      	ldr	r2, [pc, #60]	@ (800374c <TIM_OC4_SetConfig+0x98>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d109      	bne.n	8003728 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800371a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	019b      	lsls	r3, r3, #6
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	621a      	str	r2, [r3, #32]
}
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	40012c00 	.word	0x40012c00

08003750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0201 	bic.w	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800377a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f023 030a 	bic.w	r3, r3, #10
 800378c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	621a      	str	r2, [r3, #32]
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	f023 0210 	bic.w	r2, r3, #16
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	031b      	lsls	r3, r3, #12
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	621a      	str	r2, [r3, #32]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	f043 0307 	orr.w	r3, r3, #7
 800382c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	609a      	str	r2, [r3, #8]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800383e:	b480      	push	{r7}
 8003840:	b087      	sub	sp, #28
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003858:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	021a      	lsls	r2, r3, #8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	431a      	orrs	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4313      	orrs	r3, r2
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	609a      	str	r2, [r3, #8]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	2201      	movs	r2, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a1a      	ldr	r2, [r3, #32]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	43db      	mvns	r3, r3
 800389e:	401a      	ands	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1a      	ldr	r2, [r3, #32]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	431a      	orrs	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038d8:	2302      	movs	r3, #2
 80038da:	e046      	b.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a16      	ldr	r2, [pc, #88]	@ (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00e      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003928:	d009      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a12      	ldr	r2, [pc, #72]	@ (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d004      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a10      	ldr	r2, [pc, #64]	@ (800397c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d10c      	bne.n	8003958 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	4313      	orrs	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800

08003980 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003998:	2302      	movs	r3, #2
 800399a:	e03d      	b.n	8003a18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *Handle);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd ff40 	bl	80018b0 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *Handle)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8003a40:	e002      	b.n	8003a48 <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 8003a42:	2001      	movs	r0, #1
 8003a44:	f7ff ffed 	bl	8003a22 <WS28XX_Delay>
  while (Handle->Lock)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	795b      	ldrb	r3, [r3, #5]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f8      	bne.n	8003a42 <WS28XX_Lock+0xa>
  }
  Handle->Lock = 1;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	715a      	strb	r2, [r3, #5]
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *Handle)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	715a      	strb	r2, [r3, #5]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
	...

08003a78 <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *Handle, TIM_HandleTypeDef *HTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	4611      	mov	r1, r2
 8003a84:	461a      	mov	r2, r3
 8003a86:	460b      	mov	r3, r1
 8003a88:	80fb      	strh	r3, [r7, #6]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (Handle == NULL || HTim == NULL)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d07b      	beq.n	8003b90 <WS28XX_Init+0x118>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d078      	beq.n	8003b90 <WS28XX_Init+0x118>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 8003a9e:	8c3b      	ldrh	r3, [r7, #32]
 8003aa0:	2ba1      	cmp	r3, #161	@ 0xa1
 8003aa2:	d874      	bhi.n	8003b8e <WS28XX_Init+0x116>
    {
      break;
    }
    Handle->Channel = Channel;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	797a      	ldrb	r2, [r7, #5]
 8003aa8:	711a      	strb	r2, [r3, #4]
    Handle->MaxPixel = Pixel;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8c3a      	ldrh	r2, [r7, #32]
 8003aae:	815a      	strh	r2, [r3, #10]
    Handle->HTim = HTim;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fc fc01 	bl	80002c0 <__aeabi_i2f>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4936      	ldr	r1, [pc, #216]	@ (8003b9c <WS28XX_Init+0x124>)
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fc fd04 	bl	80004d0 <__aeabi_fdiv>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fc fb40 	bl	8000154 <__aeabi_fsub>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fc fd96 	bl	8000608 <__aeabi_f2uiz>
 8003adc:	4603      	mov	r3, r0
 8003ade:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(Handle->HTim ,aar_value);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(Handle->HTim, 0);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2200      	movs	r2, #0
 8003afa:	629a      	str	r2, [r3, #40]	@ 0x28
    Handle->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8003afc:	6938      	ldr	r0, [r7, #16]
 8003afe:	f7fc fbdb 	bl	80002b8 <__aeabi_ui2f>
 8003b02:	4603      	mov	r3, r0
 8003b04:	4926      	ldr	r1, [pc, #152]	@ (8003ba0 <WS28XX_Init+0x128>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fc fc2e 	bl	8000368 <__aeabi_fmul>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	4925      	ldr	r1, [pc, #148]	@ (8003ba4 <WS28XX_Init+0x12c>)
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fc fcdd 	bl	80004d0 <__aeabi_fdiv>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fc fd75 	bl	8000608 <__aeabi_f2uiz>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	80da      	strh	r2, [r3, #6]
    Handle->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8003b26:	6938      	ldr	r0, [r7, #16]
 8003b28:	f7fc fbc6 	bl	80002b8 <__aeabi_ui2f>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	491b      	ldr	r1, [pc, #108]	@ (8003b9c <WS28XX_Init+0x124>)
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fc fc19 	bl	8000368 <__aeabi_fmul>
 8003b36:	4603      	mov	r3, r0
 8003b38:	491a      	ldr	r1, [pc, #104]	@ (8003ba4 <WS28XX_Init+0x12c>)
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fc fcc8 	bl	80004d0 <__aeabi_fdiv>
 8003b40:	4603      	mov	r3, r0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fc fd60 	bl	8000608 <__aeabi_f2uiz>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	811a      	strh	r2, [r3, #8]
    memset(Handle->Pixel, 0, sizeof(Handle->Pixel));
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	330c      	adds	r3, #12
 8003b54:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f9a1 	bl	8003ea2 <memset>
    memset(Handle->Buffer, 0, sizeof(Handle->Buffer));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8003b66:	f640 721a 	movw	r2, #3866	@ 0xf1a
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 f998 	bl	8003ea2 <memset>
    HAL_TIM_PWM_Start_DMA(Handle->HTim, Handle->Channel, (const uint32_t*)Handle->Buffer, Pixel);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	791b      	ldrb	r3, [r3, #4]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f203 12ef 	addw	r2, r3, #495	@ 0x1ef
 8003b82:	8c3b      	ldrh	r3, [r7, #32]
 8003b84:	f7fe ffd6 	bl	8002b34 <HAL_TIM_PWM_Start_DMA>
    answer = true;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	75fb      	strb	r3, [r7, #23]
 8003b8c:	e000      	b.n	8003b90 <WS28XX_Init+0x118>
      break;
 8003b8e:	bf00      	nop
  }
  while (0);

  return answer;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	3f4ccccd 	.word	0x3f4ccccd
 8003ba0:	3ecccccd 	.word	0x3ecccccd
 8003ba4:	3fa00000 	.word	0x3fa00000

08003ba8 <WS28XX_SetPixel_RGB_565>:
  * @param  Color: RGB565 Color Code
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGB_565(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint16_t Color)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	807b      	strh	r3, [r7, #2]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	803b      	strh	r3, [r7, #0]
  bool answer = true;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	895b      	ldrh	r3, [r3, #10]
 8003bc0:	887a      	ldrh	r2, [r7, #2]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <WS28XX_SetPixel_RGB_565+0x24>
    {
      answer = false;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bca:	e034      	b.n	8003c36 <WS28XX_SetPixel_RGB_565+0x8e>
    }
    Red = ((Color >> 8) & 0xF8);
 8003bcc:	883b      	ldrh	r3, [r7, #0]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f023 0307 	bic.w	r3, r3, #7
 8003bd8:	73bb      	strb	r3, [r7, #14]
    Green = ((Color >> 3) & 0xFC);
 8003bda:	883b      	ldrh	r3, [r7, #0]
 8003bdc:	08db      	lsrs	r3, r3, #3
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	737b      	strb	r3, [r7, #13]
    Blue = ((Color << 3) & 0xF8);
 8003be8:	883b      	ldrh	r3, [r7, #0]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	733b      	strb	r3, [r7, #12]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8003bee:	7b7b      	ldrb	r3, [r7, #13]
 8003bf0:	887a      	ldrh	r2, [r7, #2]
 8003bf2:	4914      	ldr	r1, [pc, #80]	@ (8003c44 <WS28XX_SetPixel_RGB_565+0x9c>)
 8003bf4:	5cc8      	ldrb	r0, [r1, r3]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	440b      	add	r3, r1
 8003c00:	330c      	adds	r3, #12
 8003c02:	4602      	mov	r2, r0
 8003c04:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8003c06:	7bbb      	ldrb	r3, [r7, #14]
 8003c08:	887a      	ldrh	r2, [r7, #2]
 8003c0a:	490e      	ldr	r1, [pc, #56]	@ (8003c44 <WS28XX_SetPixel_RGB_565+0x9c>)
 8003c0c:	5cc8      	ldrb	r0, [r1, r3]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	440b      	add	r3, r1
 8003c18:	330d      	adds	r3, #13
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 8003c1e:	7b3b      	ldrb	r3, [r7, #12]
 8003c20:	887a      	ldrh	r2, [r7, #2]
 8003c22:	4908      	ldr	r1, [pc, #32]	@ (8003c44 <WS28XX_SetPixel_RGB_565+0x9c>)
 8003c24:	5cc8      	ldrb	r0, [r1, r3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	440b      	add	r3, r1
 8003c30:	330e      	adds	r3, #14
 8003c32:	4602      	mov	r2, r0
 8003c34:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	08003f38 	.word	0x08003f38

08003c48 <WS28XX_SetPixel_RGB_888>:
  * @param  Color: RGB888 Color Code
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGB_888(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint32_t Color)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	460b      	mov	r3, r1
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	817b      	strh	r3, [r7, #10]
  bool answer = true;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	895b      	ldrh	r3, [r3, #10]
 8003c5e:	897a      	ldrh	r2, [r7, #10]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <WS28XX_SetPixel_RGB_888+0x22>
    {
      answer = false;
 8003c64:	2300      	movs	r3, #0
 8003c66:	75fb      	strb	r3, [r7, #23]
      break;
 8003c68:	e02b      	b.n	8003cc2 <WS28XX_SetPixel_RGB_888+0x7a>
    }
    Red = ((Color & 0xFF0000) >> 16);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	75bb      	strb	r3, [r7, #22]
    Green = ((Color & 0x00FF00) >> 8);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	757b      	strb	r3, [r7, #21]
    Blue = (Color & 0x0000FF);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8003c7a:	7d7b      	ldrb	r3, [r7, #21]
 8003c7c:	897a      	ldrh	r2, [r7, #10]
 8003c7e:	4914      	ldr	r1, [pc, #80]	@ (8003cd0 <WS28XX_SetPixel_RGB_888+0x88>)
 8003c80:	5cc8      	ldrb	r0, [r1, r3]
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	4602      	mov	r2, r0
 8003c90:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8003c92:	7dbb      	ldrb	r3, [r7, #22]
 8003c94:	897a      	ldrh	r2, [r7, #10]
 8003c96:	490e      	ldr	r1, [pc, #56]	@ (8003cd0 <WS28XX_SetPixel_RGB_888+0x88>)
 8003c98:	5cc8      	ldrb	r0, [r1, r3]
 8003c9a:	68f9      	ldr	r1, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	330d      	adds	r3, #13
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 8003caa:	7d3b      	ldrb	r3, [r7, #20]
 8003cac:	897a      	ldrh	r2, [r7, #10]
 8003cae:	4908      	ldr	r1, [pc, #32]	@ (8003cd0 <WS28XX_SetPixel_RGB_888+0x88>)
 8003cb0:	5cc8      	ldrb	r0, [r1, r3]
 8003cb2:	68f9      	ldr	r1, [r7, #12]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4413      	add	r3, r2
 8003cba:	440b      	add	r3, r1
 8003cbc:	330e      	adds	r3, #14
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	08003f38 	.word	0x08003f38

08003cd4 <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	817b      	strh	r3, [r7, #10]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	813b      	strh	r3, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	71fb      	strb	r3, [r7, #7]
  bool answer = true;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	895b      	ldrh	r3, [r3, #10]
 8003cf6:	897a      	ldrh	r2, [r7, #10]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d302      	bcc.n	8003d02 <WS28XX_SetPixel_RGBW_565+0x2e>
    {
      answer = false;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003d00:	e051      	b.n	8003da6 <WS28XX_SetPixel_RGBW_565+0xd2>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 8003d02:	893b      	ldrh	r3, [r7, #8]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8003d0c:	79fa      	ldrb	r2, [r7, #7]
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	4a28      	ldr	r2, [pc, #160]	@ (8003db4 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8003d14:	fb82 1203 	smull	r1, r2, r2, r3
 8003d18:	441a      	add	r2, r3
 8003d1a:	11d2      	asrs	r2, r2, #7
 8003d1c:	17db      	asrs	r3, r3, #31
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	75bb      	strb	r3, [r7, #22]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 8003d22:	893b      	ldrh	r3, [r7, #8]
 8003d24:	08db      	lsrs	r3, r3, #3
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8003d2c:	79fa      	ldrb	r2, [r7, #7]
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	4a20      	ldr	r2, [pc, #128]	@ (8003db4 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8003d34:	fb82 1203 	smull	r1, r2, r2, r3
 8003d38:	441a      	add	r2, r3
 8003d3a:	11d2      	asrs	r2, r2, #7
 8003d3c:	17db      	asrs	r3, r3, #31
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	757b      	strb	r3, [r7, #21]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 8003d42:	893b      	ldrh	r3, [r7, #8]
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	79fa      	ldrb	r2, [r7, #7]
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	4a19      	ldr	r2, [pc, #100]	@ (8003db4 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8003d50:	fb82 1203 	smull	r1, r2, r2, r3
 8003d54:	441a      	add	r2, r3
 8003d56:	11d2      	asrs	r2, r2, #7
 8003d58:	17db      	asrs	r3, r3, #31
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8003d5e:	7d7b      	ldrb	r3, [r7, #21]
 8003d60:	897a      	ldrh	r2, [r7, #10]
 8003d62:	4915      	ldr	r1, [pc, #84]	@ (8003db8 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8003d64:	5cc8      	ldrb	r0, [r1, r3]
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	440b      	add	r3, r1
 8003d70:	330c      	adds	r3, #12
 8003d72:	4602      	mov	r2, r0
 8003d74:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8003d76:	7dbb      	ldrb	r3, [r7, #22]
 8003d78:	897a      	ldrh	r2, [r7, #10]
 8003d7a:	490f      	ldr	r1, [pc, #60]	@ (8003db8 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8003d7c:	5cc8      	ldrb	r0, [r1, r3]
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	4613      	mov	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4413      	add	r3, r2
 8003d86:	440b      	add	r3, r1
 8003d88:	330d      	adds	r3, #13
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 8003d8e:	7d3b      	ldrb	r3, [r7, #20]
 8003d90:	897a      	ldrh	r2, [r7, #10]
 8003d92:	4909      	ldr	r1, [pc, #36]	@ (8003db8 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8003d94:	5cc8      	ldrb	r0, [r1, r3]
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	440b      	add	r3, r1
 8003da0:	330e      	adds	r3, #14
 8003da2:	4602      	mov	r2, r0
 8003da4:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	80808081 	.word	0x80808081
 8003db8:	08003f38 	.word	0x08003f38

08003dbc <WS28XX_Update>:
  * @param  *Handle: Pointer to WS28XX_HandleTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *Handle)
{
 8003dbc:	b590      	push	{r4, r7, lr}
 8003dbe:	b089      	sub	sp, #36	@ 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  bool answer = true;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	77fb      	strb	r3, [r7, #31]
  uint32_t i = 1;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(Handle);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff fe33 	bl	8003a38 <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < Handle->MaxPixel; pixel++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	82fb      	strh	r3, [r7, #22]
 8003dd6:	e03e      	b.n	8003e56 <WS28XX_Update+0x9a>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	e035      	b.n	8003e4a <WS28XX_Update+0x8e>
    {
      for (int b = 7; b >= 0 ; b--)
 8003dde:	2307      	movs	r3, #7
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	e02c      	b.n	8003e3e <WS28XX_Update+0x82>
      {
        if ((Handle->Pixel[pixel][rgb] & (1 << b)) == 0)
 8003de4:	8afa      	ldrh	r2, [r7, #22]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4413      	add	r3, r2
 8003dee:	18ca      	adds	r2, r1, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	330c      	adds	r3, #12
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	fa42 f303 	asr.w	r3, r2, r3
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <WS28XX_Update+0x62>
        {
          Handle->Buffer[i] = Handle->Pulse0;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	88db      	ldrh	r3, [r3, #6]
 8003e0c:	b2d9      	uxtb	r1, r3
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	4413      	add	r3, r2
 8003e14:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8003e18:	460a      	mov	r2, r1
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	e009      	b.n	8003e32 <WS28XX_Update+0x76>
        }
        else
        {
          Handle->Buffer[i] = Handle->Pulse1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	891b      	ldrh	r3, [r3, #8]
 8003e22:	b2d9      	uxtb	r1, r3
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8003e2e:	460a      	mov	r2, r1
 8003e30:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	3301      	adds	r3, #1
 8003e36:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	dacf      	bge.n	8003de4 <WS28XX_Update+0x28>
    for (int rgb = 0; rgb < 3; rgb ++)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	3301      	adds	r3, #1
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	ddc6      	ble.n	8003dde <WS28XX_Update+0x22>
  for (uint16_t pixel = 0; pixel < Handle->MaxPixel; pixel++)
 8003e50:	8afb      	ldrh	r3, [r7, #22]
 8003e52:	3301      	adds	r3, #1
 8003e54:	82fb      	strh	r3, [r7, #22]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	895b      	ldrh	r3, [r3, #10]
 8003e5a:	8afa      	ldrh	r2, [r7, #22]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d3bb      	bcc.n	8003dd8 <WS28XX_Update+0x1c>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(Handle->HTim, Handle->Channel, (const uint32_t*)Handle->Buffer, (Handle->MaxPixel * 24) + 2) != HAL_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	791b      	ldrb	r3, [r3, #4]
 8003e68:	461c      	mov	r4, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f203 12ef 	addw	r2, r3, #495	@ 0x1ef
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	895b      	ldrh	r3, [r3, #10]
 8003e74:	4619      	mov	r1, r3
 8003e76:	0049      	lsls	r1, r1, #1
 8003e78:	440b      	add	r3, r1
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3302      	adds	r3, #2
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	4621      	mov	r1, r4
 8003e84:	f7fe fe56 	bl	8002b34 <HAL_TIM_PWM_Start_DMA>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <WS28XX_Update+0xd6>
  {
    answer = false;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	77fb      	strb	r3, [r7, #31]
  }
  WS28XX_UnLock(Handle);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fde3 	bl	8003a5e <WS28XX_UnLock>
  return answer;
 8003e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3724      	adds	r7, #36	@ 0x24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd90      	pop	{r4, r7, pc}

08003ea2 <memset>:
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4402      	add	r2, r0
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d100      	bne.n	8003eac <memset+0xa>
 8003eaa:	4770      	bx	lr
 8003eac:	f803 1b01 	strb.w	r1, [r3], #1
 8003eb0:	e7f9      	b.n	8003ea6 <memset+0x4>
	...

08003eb4 <__libc_init_array>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	2600      	movs	r6, #0
 8003eb8:	4d0c      	ldr	r5, [pc, #48]	@ (8003eec <__libc_init_array+0x38>)
 8003eba:	4c0d      	ldr	r4, [pc, #52]	@ (8003ef0 <__libc_init_array+0x3c>)
 8003ebc:	1b64      	subs	r4, r4, r5
 8003ebe:	10a4      	asrs	r4, r4, #2
 8003ec0:	42a6      	cmp	r6, r4
 8003ec2:	d109      	bne.n	8003ed8 <__libc_init_array+0x24>
 8003ec4:	f000 f81a 	bl	8003efc <_init>
 8003ec8:	2600      	movs	r6, #0
 8003eca:	4d0a      	ldr	r5, [pc, #40]	@ (8003ef4 <__libc_init_array+0x40>)
 8003ecc:	4c0a      	ldr	r4, [pc, #40]	@ (8003ef8 <__libc_init_array+0x44>)
 8003ece:	1b64      	subs	r4, r4, r5
 8003ed0:	10a4      	asrs	r4, r4, #2
 8003ed2:	42a6      	cmp	r6, r4
 8003ed4:	d105      	bne.n	8003ee2 <__libc_init_array+0x2e>
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}
 8003ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003edc:	4798      	blx	r3
 8003ede:	3601      	adds	r6, #1
 8003ee0:	e7ee      	b.n	8003ec0 <__libc_init_array+0xc>
 8003ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee6:	4798      	blx	r3
 8003ee8:	3601      	adds	r6, #1
 8003eea:	e7f2      	b.n	8003ed2 <__libc_init_array+0x1e>
 8003eec:	08004038 	.word	0x08004038
 8003ef0:	08004038 	.word	0x08004038
 8003ef4:	08004038 	.word	0x08004038
 8003ef8:	0800403c 	.word	0x0800403c

08003efc <_init>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	bf00      	nop
 8003f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f02:	bc08      	pop	{r3}
 8003f04:	469e      	mov	lr, r3
 8003f06:	4770      	bx	lr

08003f08 <_fini>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	bf00      	nop
 8003f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0e:	bc08      	pop	{r3}
 8003f10:	469e      	mov	lr, r3
 8003f12:	4770      	bx	lr
