
EVA_FrontZoneECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003944  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08003a50  08003a50  00004a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b74  08003b74  0000501c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b74  08003b74  0000501c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b74  08003b74  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b74  08003b74  00004b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b78  08003b78  00004b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003b7c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003490  2000001c  08003b98  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034ac  08003b98  000054ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094d8  00000000  00000000  00005045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df1  00000000  00000000  0000e51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00010310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000844  00000000  00000000  00010db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cd5  00000000  00000000  000115fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cedb  00000000  00000000  000292d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088de6  00000000  00000000  000361ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bef92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b7c  00000000  00000000  000befd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c1b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a38 	.word	0x08003a38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003a38 	.word	0x08003a38

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_DMA_Init+0x58>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a13      	ldr	r2, [pc, #76]	@ (80006a0 <MX_DMA_Init+0x58>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_DMA_Init+0x58>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	200c      	movs	r0, #12
 800066c:	f001 f817 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000670:	200c      	movs	r0, #12
 8000672:	f001 f830 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200d      	movs	r0, #13
 800067c:	f001 f80f 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000680:	200d      	movs	r0, #13
 8000682:	f001 f828 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	2010      	movs	r0, #16
 800068c:	f001 f807 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000690:	2010      	movs	r0, #16
 8000692:	f001 f820 	bl	80016d6 <HAL_NVIC_EnableIRQ>

}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <MX_GPIO_Init+0x28>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <MX_GPIO_Init+0x28>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <MX_GPIO_Init+0x28>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 fe85 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f963 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f7ff ffe1 	bl	80006a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e2:	f7ff ffb1 	bl	8000648 <MX_DMA_Init>
  MX_TIM1_Init();
 80006e6:	f000 fccb 	bl	8001080 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  WS28XX_Init(&ws_pa8, &htim1, 36, TIM_CHANNEL_1, WS28XX_LEFT_LED_COUNT);   // Initialize for PA8
 80006ea:	230d      	movs	r3, #13
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	2224      	movs	r2, #36	@ 0x24
 80006f2:	499d      	ldr	r1, [pc, #628]	@ (8000968 <main+0x298>)
 80006f4:	489d      	ldr	r0, [pc, #628]	@ (800096c <main+0x29c>)
 80006f6:	f002 ffa3 	bl	8003640 <WS28XX_Init>
  WS28XX_Init(&ws_pa9, &htim1, 36, TIM_CHANNEL_2, WS28XX_MIDDLE_LED_COUNT); // Initialize for PA9 (middle strip)
 80006fa:	230f      	movs	r3, #15
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2304      	movs	r3, #4
 8000700:	2224      	movs	r2, #36	@ 0x24
 8000702:	4999      	ldr	r1, [pc, #612]	@ (8000968 <main+0x298>)
 8000704:	489a      	ldr	r0, [pc, #616]	@ (8000970 <main+0x2a0>)
 8000706:	f002 ff9b 	bl	8003640 <WS28XX_Init>
  WS28XX_Init(&ws_pa10, &htim1, 36, TIM_CHANNEL_3, WS28XX_RIGHT_LED_COUNT); // Initialize for PA10
 800070a:	230d      	movs	r3, #13
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2308      	movs	r3, #8
 8000710:	2224      	movs	r2, #36	@ 0x24
 8000712:	4995      	ldr	r1, [pc, #596]	@ (8000968 <main+0x298>)
 8000714:	4897      	ldr	r0, [pc, #604]	@ (8000974 <main+0x2a4>)
 8000716:	f002 ff93 	bl	8003640 <WS28XX_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Switch-case for middle LED strip (PA9)
	  switch (current_mode_pa9)
 800071a:	4b97      	ldr	r3, [pc, #604]	@ (8000978 <main+0x2a8>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b04      	cmp	r3, #4
 8000720:	d01d      	beq.n	800075e <main+0x8e>
 8000722:	2b04      	cmp	r3, #4
 8000724:	dc23      	bgt.n	800076e <main+0x9e>
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <main+0x60>
 800072a:	2b03      	cmp	r3, #3
 800072c:	d013      	beq.n	8000756 <main+0x86>
 800072e:	e01e      	b.n	800076e <main+0x9e>
	  {
	      case DRL_MODE:
	          {
	              static int drl_last_update_time_middle = 0;
	              int drl_current_time_middle = HAL_GetTick();
 8000730:	f000 feb0 	bl	8001494 <HAL_GetTick>
 8000734:	4603      	mov	r3, r0
 8000736:	60bb      	str	r3, [r7, #8]

	              // Ensure updates are spaced out to avoid flickering, but react quickly to mode change
	              if (drl_current_time_middle - drl_last_update_time_middle >= 1000) {  // Reduced time to 1 second for faster response
 8000738:	4b90      	ldr	r3, [pc, #576]	@ (800097c <main+0x2ac>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000744:	db17      	blt.n	8000776 <main+0xa6>
	                  UpdateDRLMode(&ws_pa9, WS28XX_MIDDLE_LED_COUNT);  // Middle strip DRL update
 8000746:	210f      	movs	r1, #15
 8000748:	4889      	ldr	r0, [pc, #548]	@ (8000970 <main+0x2a0>)
 800074a:	f000 f99f 	bl	8000a8c <UpdateDRLMode>
	                  drl_last_update_time_middle = drl_current_time_middle;
 800074e:	4a8b      	ldr	r2, [pc, #556]	@ (800097c <main+0x2ac>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	6013      	str	r3, [r2, #0]
	              }
	              break;
 8000754:	e00f      	b.n	8000776 <main+0xa6>
	          }

	      case STARTUP_MODE:
	          UpdateStartupWaveForMiddle(&ws_pa9);  // Slower, aesthetic startup animation for PA9
 8000756:	4886      	ldr	r0, [pc, #536]	@ (8000970 <main+0x2a0>)
 8000758:	f000 fa34 	bl	8000bc4 <UpdateStartupWaveForMiddle>
	          break;
 800075c:	e00c      	b.n	8000778 <main+0xa8>

	      case CHARGING_MODE:
	          UpdateSOCIndication(&ws_pa9, soc_percentage, DC_CHARGING);  // SOC indication with blinking LEDs
 800075e:	4b88      	ldr	r3, [pc, #544]	@ (8000980 <main+0x2b0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2202      	movs	r2, #2
 8000764:	4619      	mov	r1, r3
 8000766:	4882      	ldr	r0, [pc, #520]	@ (8000970 <main+0x2a0>)
 8000768:	f000 fb44 	bl	8000df4 <UpdateSOCIndication>
	          break;
 800076c:	e004      	b.n	8000778 <main+0xa8>

	      default:
	          current_mode_pa9 = DRL_MODE;
 800076e:	4b82      	ldr	r3, [pc, #520]	@ (8000978 <main+0x2a8>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
	          break;
 8000774:	e000      	b.n	8000778 <main+0xa8>
	              break;
 8000776:	bf00      	nop
	  }

	  // Switch-case for left LED strip (PA8)
	  switch (current_mode_pa8)
 8000778:	4b82      	ldr	r3, [pc, #520]	@ (8000984 <main+0x2b4>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d026      	beq.n	80007ce <main+0xfe>
 8000780:	2b03      	cmp	r3, #3
 8000782:	f300 809a 	bgt.w	80008ba <main+0x1ea>
 8000786:	2b01      	cmp	r3, #1
 8000788:	d002      	beq.n	8000790 <main+0xc0>
 800078a:	2b02      	cmp	r3, #2
 800078c:	d017      	beq.n	80007be <main+0xee>
 800078e:	e094      	b.n	80008ba <main+0x1ea>
	  {
	      case TURN_SIGNAL_MODE:
	          UpdateWaveEffect(&ws_pa8, frame_pa8, WS28XX_LEFT_LED_COUNT);
 8000790:	4b7d      	ldr	r3, [pc, #500]	@ (8000988 <main+0x2b8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	220d      	movs	r2, #13
 8000796:	4619      	mov	r1, r3
 8000798:	4874      	ldr	r0, [pc, #464]	@ (800096c <main+0x29c>)
 800079a:	f000 f943 	bl	8000a24 <UpdateWaveEffect>
	          frame_pa8 += WAVE_STEP_SIZE;
 800079e:	4b7a      	ldr	r3, [pc, #488]	@ (8000988 <main+0x2b8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	4a78      	ldr	r2, [pc, #480]	@ (8000988 <main+0x2b8>)
 80007a6:	6013      	str	r3, [r2, #0]
	          if (frame_pa8 >= WS28XX_LEFT_LED_COUNT) frame_pa8 = 0;
 80007a8:	4b77      	ldr	r3, [pc, #476]	@ (8000988 <main+0x2b8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b0c      	cmp	r3, #12
 80007ae:	dd02      	ble.n	80007b6 <main+0xe6>
 80007b0:	4b75      	ldr	r3, [pc, #468]	@ (8000988 <main+0x2b8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
	          HAL_Delay(WAVE_SPEED);
 80007b6:	2014      	movs	r0, #20
 80007b8:	f000 fe76 	bl	80014a8 <HAL_Delay>
	          break;
 80007bc:	e094      	b.n	80008e8 <main+0x218>

	      case HAZARD_LIGHT_MODE:
	          UpdateHazardBlink(WS28XX_LEFT_LED_COUNT);  // Sync blink for hazard mode
 80007be:	200d      	movs	r0, #13
 80007c0:	f000 f996 	bl	8000af0 <UpdateHazardBlink>
	          HAL_Delay(HAZARD_BLINK_DELAY);  // Maintain a consistent delay
 80007c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007c8:	f000 fe6e 	bl	80014a8 <HAL_Delay>
	          break;
 80007cc:	e08c      	b.n	80008e8 <main+0x218>

	      case STARTUP_MODE:
	          if (wave_count < 5) {
 80007ce:	4b6f      	ldr	r3, [pc, #444]	@ (800098c <main+0x2bc>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	dc2a      	bgt.n	800082c <main+0x15c>
	              UpdateWaveEffect(&ws_pa8, frame_pa8, WS28XX_LEFT_LED_COUNT);  // Amber wave on left strip
 80007d6:	4b6c      	ldr	r3, [pc, #432]	@ (8000988 <main+0x2b8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	220d      	movs	r2, #13
 80007dc:	4619      	mov	r1, r3
 80007de:	4863      	ldr	r0, [pc, #396]	@ (800096c <main+0x29c>)
 80007e0:	f000 f920 	bl	8000a24 <UpdateWaveEffect>
	              UpdateWaveEffect(&ws_pa10, frame_pa10, WS28XX_RIGHT_LED_COUNT);  // Amber wave on right strip
 80007e4:	4b6a      	ldr	r3, [pc, #424]	@ (8000990 <main+0x2c0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	220d      	movs	r2, #13
 80007ea:	4619      	mov	r1, r3
 80007ec:	4861      	ldr	r0, [pc, #388]	@ (8000974 <main+0x2a4>)
 80007ee:	f000 f919 	bl	8000a24 <UpdateWaveEffect>
	              frame_pa8 += WAVE_STEP_SIZE;
 80007f2:	4b65      	ldr	r3, [pc, #404]	@ (8000988 <main+0x2b8>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	4a63      	ldr	r2, [pc, #396]	@ (8000988 <main+0x2b8>)
 80007fa:	6013      	str	r3, [r2, #0]
	              frame_pa10 += WAVE_STEP_SIZE;
 80007fc:	4b64      	ldr	r3, [pc, #400]	@ (8000990 <main+0x2c0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	4a63      	ldr	r2, [pc, #396]	@ (8000990 <main+0x2c0>)
 8000804:	6013      	str	r3, [r2, #0]

	              if (frame_pa8 >= WS28XX_LEFT_LED_COUNT) {
 8000806:	4b60      	ldr	r3, [pc, #384]	@ (8000988 <main+0x2b8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b0c      	cmp	r3, #12
 800080c:	dd0a      	ble.n	8000824 <main+0x154>
	                  frame_pa8 = 0;
 800080e:	4b5e      	ldr	r3, [pc, #376]	@ (8000988 <main+0x2b8>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
	                  frame_pa10 = 0;
 8000814:	4b5e      	ldr	r3, [pc, #376]	@ (8000990 <main+0x2c0>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
	                  wave_count++;
 800081a:	4b5c      	ldr	r3, [pc, #368]	@ (800098c <main+0x2bc>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	4a5a      	ldr	r2, [pc, #360]	@ (800098c <main+0x2bc>)
 8000822:	6013      	str	r3, [r2, #0]
	              }
	              HAL_Delay(WAVE_SPEED);
 8000824:	2014      	movs	r0, #20
 8000826:	f000 fe3f 	bl	80014a8 <HAL_Delay>
	              current_mode_pa8 = DRL_MODE;
	              current_mode_pa10 = DRL_MODE;
	              wave_count = 0;
	              drl_wave_complete = 0;
	          }
	          break;
 800082a:	e05d      	b.n	80008e8 <main+0x218>
	          } else if (!drl_wave_complete) {
 800082c:	4b59      	ldr	r3, [pc, #356]	@ (8000994 <main+0x2c4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d135      	bne.n	80008a0 <main+0x1d0>
	              for (int i = 0; i <= frame_pa8; i++) {
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	e012      	b.n	8000860 <main+0x190>
	                  WS28XX_SetPixel_RGBW_565(&ws_pa8, i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Left strip DRL update
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	b299      	uxth	r1, r3
 800083e:	239b      	movs	r3, #155	@ 0x9b
 8000840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000844:	4849      	ldr	r0, [pc, #292]	@ (800096c <main+0x29c>)
 8000846:	f002 ffe3 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
	                  WS28XX_SetPixel_RGBW_565(&ws_pa10, i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Right strip DRL update
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	b299      	uxth	r1, r3
 800084e:	239b      	movs	r3, #155	@ 0x9b
 8000850:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000854:	4847      	ldr	r0, [pc, #284]	@ (8000974 <main+0x2a4>)
 8000856:	f002 ffdb 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
	              for (int i = 0; i <= frame_pa8; i++) {
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3301      	adds	r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	4b49      	ldr	r3, [pc, #292]	@ (8000988 <main+0x2b8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	429a      	cmp	r2, r3
 8000868:	dde7      	ble.n	800083a <main+0x16a>
	              WS28XX_Update(&ws_pa8);
 800086a:	4840      	ldr	r0, [pc, #256]	@ (800096c <main+0x29c>)
 800086c:	f003 f844 	bl	80038f8 <WS28XX_Update>
	              WS28XX_Update(&ws_pa10);
 8000870:	4840      	ldr	r0, [pc, #256]	@ (8000974 <main+0x2a4>)
 8000872:	f003 f841 	bl	80038f8 <WS28XX_Update>
	              frame_pa8 += WAVE_STEP_SIZE;
 8000876:	4b44      	ldr	r3, [pc, #272]	@ (8000988 <main+0x2b8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a42      	ldr	r2, [pc, #264]	@ (8000988 <main+0x2b8>)
 800087e:	6013      	str	r3, [r2, #0]
	              frame_pa10 += WAVE_STEP_SIZE;
 8000880:	4b43      	ldr	r3, [pc, #268]	@ (8000990 <main+0x2c0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a42      	ldr	r2, [pc, #264]	@ (8000990 <main+0x2c0>)
 8000888:	6013      	str	r3, [r2, #0]
	              if (frame_pa8 >= WS28XX_LEFT_LED_COUNT) {
 800088a:	4b3f      	ldr	r3, [pc, #252]	@ (8000988 <main+0x2b8>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b0c      	cmp	r3, #12
 8000890:	dd02      	ble.n	8000898 <main+0x1c8>
	                  drl_wave_complete = 1;
 8000892:	4b40      	ldr	r3, [pc, #256]	@ (8000994 <main+0x2c4>)
 8000894:	2201      	movs	r2, #1
 8000896:	601a      	str	r2, [r3, #0]
	              HAL_Delay(WAVE_SPEED);
 8000898:	2014      	movs	r0, #20
 800089a:	f000 fe05 	bl	80014a8 <HAL_Delay>
	          break;
 800089e:	e023      	b.n	80008e8 <main+0x218>
	              current_mode_pa8 = DRL_MODE;
 80008a0:	4b38      	ldr	r3, [pc, #224]	@ (8000984 <main+0x2b4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	              current_mode_pa10 = DRL_MODE;
 80008a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000998 <main+0x2c8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
	              wave_count = 0;
 80008ac:	4b37      	ldr	r3, [pc, #220]	@ (800098c <main+0x2bc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
	              drl_wave_complete = 0;
 80008b2:	4b38      	ldr	r3, [pc, #224]	@ (8000994 <main+0x2c4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
	          break;
 80008b8:	e016      	b.n	80008e8 <main+0x218>

	      case DRL_MODE:
	      default:
	      {
	          static int drl_last_update_time = 0;
	          int drl_current_time = HAL_GetTick();
 80008ba:	f000 fdeb 	bl	8001494 <HAL_GetTick>
 80008be:	4603      	mov	r3, r0
 80008c0:	607b      	str	r3, [r7, #4]

	          // Sync DRL mode update with the same timing as the middle strip
	          if (drl_current_time - drl_last_update_time >= 1000) {  // 1-second update interval
 80008c2:	4b36      	ldr	r3, [pc, #216]	@ (800099c <main+0x2cc>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008ce:	db0a      	blt.n	80008e6 <main+0x216>
	              UpdateDRLMode(&ws_pa8, WS28XX_LEFT_LED_COUNT);  // Left strip DRL update
 80008d0:	210d      	movs	r1, #13
 80008d2:	4826      	ldr	r0, [pc, #152]	@ (800096c <main+0x29c>)
 80008d4:	f000 f8da 	bl	8000a8c <UpdateDRLMode>
	              UpdateDRLMode(&ws_pa10, WS28XX_RIGHT_LED_COUNT); // Right strip DRL update
 80008d8:	210d      	movs	r1, #13
 80008da:	4826      	ldr	r0, [pc, #152]	@ (8000974 <main+0x2a4>)
 80008dc:	f000 f8d6 	bl	8000a8c <UpdateDRLMode>
	              drl_last_update_time = drl_current_time;
 80008e0:	4a2e      	ldr	r2, [pc, #184]	@ (800099c <main+0x2cc>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
	          }
	          break;
 80008e6:	bf00      	nop
	      }
	  }

	  // Switch-case for right LED strip (PA10)
	  switch (current_mode_pa10)
 80008e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000998 <main+0x2c8>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d034      	beq.n	800095a <main+0x28a>
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	dc1b      	bgt.n	800092c <main+0x25c>
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d002      	beq.n	80008fe <main+0x22e>
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d030      	beq.n	800095e <main+0x28e>
 80008fc:	e016      	b.n	800092c <main+0x25c>
	  {
	      case TURN_SIGNAL_MODE:
	          UpdateWaveEffect(&ws_pa10, frame_pa10, WS28XX_RIGHT_LED_COUNT);
 80008fe:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <main+0x2c0>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	220d      	movs	r2, #13
 8000904:	4619      	mov	r1, r3
 8000906:	481b      	ldr	r0, [pc, #108]	@ (8000974 <main+0x2a4>)
 8000908:	f000 f88c 	bl	8000a24 <UpdateWaveEffect>
	          frame_pa10 += WAVE_STEP_SIZE;
 800090c:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <main+0x2c0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	4a1f      	ldr	r2, [pc, #124]	@ (8000990 <main+0x2c0>)
 8000914:	6013      	str	r3, [r2, #0]
	          if (frame_pa10 >= WS28XX_RIGHT_LED_COUNT) frame_pa10 = 0;
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <main+0x2c0>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b0c      	cmp	r3, #12
 800091c:	dd02      	ble.n	8000924 <main+0x254>
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <main+0x2c0>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
	          HAL_Delay(WAVE_SPEED);
 8000924:	2014      	movs	r0, #20
 8000926:	f000 fdbf 	bl	80014a8 <HAL_Delay>
	          break;
 800092a:	e01b      	b.n	8000964 <main+0x294>

	      case DRL_MODE:
	      default:
	      {
	          static int drl_last_update_time = 0;
	          int drl_current_time = HAL_GetTick();
 800092c:	f000 fdb2 	bl	8001494 <HAL_GetTick>
 8000930:	4603      	mov	r3, r0
 8000932:	603b      	str	r3, [r7, #0]

	          if (drl_current_time - drl_last_update_time >= 1000) {  // 1-second update interval
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <main+0x2d0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000940:	db0f      	blt.n	8000962 <main+0x292>
	              UpdateDRLMode(&ws_pa8, WS28XX_LEFT_LED_COUNT);  // Left strip DRL update
 8000942:	210d      	movs	r1, #13
 8000944:	4809      	ldr	r0, [pc, #36]	@ (800096c <main+0x29c>)
 8000946:	f000 f8a1 	bl	8000a8c <UpdateDRLMode>
	              UpdateDRLMode(&ws_pa10, WS28XX_RIGHT_LED_COUNT); // Right strip DRL update
 800094a:	210d      	movs	r1, #13
 800094c:	4809      	ldr	r0, [pc, #36]	@ (8000974 <main+0x2a4>)
 800094e:	f000 f89d 	bl	8000a8c <UpdateDRLMode>
	              drl_last_update_time = drl_current_time;
 8000952:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <main+0x2d0>)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	6013      	str	r3, [r2, #0]
	          }
	          break;
 8000958:	e003      	b.n	8000962 <main+0x292>
	          break;
 800095a:	bf00      	nop
 800095c:	e6dd      	b.n	800071a <main+0x4a>
	          break;
 800095e:	bf00      	nop
 8000960:	e6db      	b.n	800071a <main+0x4a>
	          break;
 8000962:	bf00      	nop
	  switch (current_mode_pa9)
 8000964:	e6d9      	b.n	800071a <main+0x4a>
 8000966:	bf00      	nop
 8000968:	20003394 	.word	0x20003394
 800096c:	20000038 	.word	0x20000038
 8000970:	20001144 	.word	0x20001144
 8000974:	20002250 	.word	0x20002250
 8000978:	20000001 	.word	0x20000001
 800097c:	2000336c 	.word	0x2000336c
 8000980:	20000004 	.word	0x20000004
 8000984:	20000000 	.word	0x20000000
 8000988:	2000335c 	.word	0x2000335c
 800098c:	20003364 	.word	0x20003364
 8000990:	20003360 	.word	0x20003360
 8000994:	20003368 	.word	0x20003368
 8000998:	20000002 	.word	0x20000002
 800099c:	20003370 	.word	0x20003370
 80009a0:	20003374 	.word	0x20003374

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b090      	sub	sp, #64	@ 0x40
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	2228      	movs	r2, #40	@ 0x28
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f003 f813 	bl	80039de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ca:	2301      	movs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ce:	2310      	movs	r3, #16
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009d6:	2300      	movs	r3, #0
 80009d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009da:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 0318 	add.w	r3, r7, #24
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 fa03 	bl	8001df0 <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80009f0:	f000 fabe 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f4:	230f      	movs	r3, #15
 80009f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f8:	2302      	movs	r3, #2
 80009fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fc71 	bl	80022f4 <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a18:	f000 faaa 	bl	8000f70 <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3740      	adds	r7, #64	@ 0x40
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <UpdateWaveEffect>:
  * @param frame: Current frame number for the wave effect
  * @param pixel_count: Number of pixels in the strip
  * @retval None
  */
void UpdateWaveEffect(WS28XX_HandleTypeDef* ws, int frame, int pixel_count)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
    ResetLEDStrip(ws, pixel_count);  // Ensure all LEDs are reset to black before updating
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f000 f8a8 	bl	8000b88 <ResetLEDStrip>

    for (int i = 0; i < pixel_count; i++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	e01b      	b.n	8000a76 <UpdateWaveEffect+0x52>
        if (i >= frame && i < frame + WAVE_PACKET_SIZE) {
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	db0d      	blt.n	8000a62 <UpdateWaveEffect+0x3e>
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dc08      	bgt.n	8000a62 <UpdateWaveEffect+0x3e>
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_AMBER, 255);  // Amber color
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	b299      	uxth	r1, r3
 8000a54:	23ff      	movs	r3, #255	@ 0xff
 8000a56:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f002 fed8 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
 8000a60:	e006      	b.n	8000a70 <UpdateWaveEffect+0x4c>
        } else {
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_BLACK, 0);    // Turn off (black)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	b299      	uxth	r1, r3
 8000a66:	2300      	movs	r3, #0
 8000a68:	2200      	movs	r2, #0
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f002 fed0 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < pixel_count; i++) {
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	3301      	adds	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	dbdf      	blt.n	8000a3e <UpdateWaveEffect+0x1a>
        }
    }
    WS28XX_Update(ws);  // Refresh the LED strip
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f002 ff3a 	bl	80038f8 <WS28XX_Update>
}
 8000a84:	bf00      	nop
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <UpdateDRLMode>:
  * @param ws: Pointer to the WS28XX handle
  * @param pixel_count: Number of pixels in the strip
  * @retval None
  */
void UpdateDRLMode(WS28XX_HandleTypeDef* ws, int pixel_count)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
    static int last_update_time = 0;
    int current_time = HAL_GetTick();  // Get the current system time in milliseconds
 8000a96:	f000 fcfd 	bl	8001494 <HAL_GetTick>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	60bb      	str	r3, [r7, #8]

    // Update only every 50ms to avoid flickering
    if (current_time - last_update_time >= 50) {
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <UpdateDRLMode+0x60>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b31      	cmp	r3, #49	@ 0x31
 8000aa8:	dd1b      	ble.n	8000ae2 <UpdateDRLMode+0x56>
        ResetLEDStrip(ws, pixel_count);  // Ensure no residual data on the strip
 8000aaa:	6839      	ldr	r1, [r7, #0]
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 f86b 	bl	8000b88 <ResetLEDStrip>

        for (int i = 0; i < pixel_count; i++) {
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	e00a      	b.n	8000ace <UpdateDRLMode+0x42>
            WS28XX_SetPixel_RGB_565(ws, i, COLOR_RGB565_WHITE);  // Full white light
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f002 fe54 	bl	8003770 <WS28XX_SetPixel_RGB_565>
        for (int i = 0; i < pixel_count; i++) {
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3301      	adds	r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	dbf0      	blt.n	8000ab8 <UpdateDRLMode+0x2c>
        }
        WS28XX_Update(ws);  // Refresh the LED strip
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f002 ff0e 	bl	80038f8 <WS28XX_Update>

        last_update_time = current_time;  // Update the last time we refreshed
 8000adc:	4a03      	ldr	r2, [pc, #12]	@ (8000aec <UpdateDRLMode+0x60>)
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	6013      	str	r3, [r2, #0]
    }
}
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20003378 	.word	0x20003378

08000af0 <UpdateHazardBlink>:
  * @brief Blink both LED strips for hazard mode
  * @param led_count: Number of LEDs in each strip
  * @retval None
  */
void UpdateHazardBlink(int led_count)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    static int blink_on = 0;  // Track blink state (on/off)

    for (int i = 0; i < led_count; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	e025      	b.n	8000b4a <UpdateHazardBlink+0x5a>
        if (blink_on) {
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <UpdateHazardBlink+0x8c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d010      	beq.n	8000b28 <UpdateHazardBlink+0x38>
            WS28XX_SetPixel_RGB_565(&ws_pa8, i, COLOR_RGB565_AMBER);  // Amber on for left strip
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	481b      	ldr	r0, [pc, #108]	@ (8000b80 <UpdateHazardBlink+0x90>)
 8000b12:	f002 fe2d 	bl	8003770 <WS28XX_SetPixel_RGB_565>
            WS28XX_SetPixel_RGB_565(&ws_pa10, i, COLOR_RGB565_AMBER); // Amber on for right strip
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4818      	ldr	r0, [pc, #96]	@ (8000b84 <UpdateHazardBlink+0x94>)
 8000b22:	f002 fe25 	bl	8003770 <WS28XX_SetPixel_RGB_565>
 8000b26:	e00d      	b.n	8000b44 <UpdateHazardBlink+0x54>
        } else {
            WS28XX_SetPixel_RGBW_565(&ws_pa8, i, COLOR_RGB565_BLACK, 0);    // Off for left strip
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	b299      	uxth	r1, r3
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4813      	ldr	r0, [pc, #76]	@ (8000b80 <UpdateHazardBlink+0x90>)
 8000b32:	f002 fe6d 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
            WS28XX_SetPixel_RGBW_565(&ws_pa10, i, COLOR_RGB565_BLACK, 0);   // Off for right strip
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	b299      	uxth	r1, r3
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4811      	ldr	r0, [pc, #68]	@ (8000b84 <UpdateHazardBlink+0x94>)
 8000b40:	f002 fe66 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < led_count; i++) {
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3301      	adds	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	dbd5      	blt.n	8000afe <UpdateHazardBlink+0xe>
        }
    }

    blink_on = !blink_on;  // Toggle the blink state
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <UpdateHazardBlink+0x8c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf0c      	ite	eq
 8000b5a:	2301      	moveq	r3, #1
 8000b5c:	2300      	movne	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <UpdateHazardBlink+0x8c>)
 8000b64:	601a      	str	r2, [r3, #0]
    WS28XX_Update(&ws_pa8);  // Refresh left strip
 8000b66:	4806      	ldr	r0, [pc, #24]	@ (8000b80 <UpdateHazardBlink+0x90>)
 8000b68:	f002 fec6 	bl	80038f8 <WS28XX_Update>
    WS28XX_Update(&ws_pa10); // Refresh right strip
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <UpdateHazardBlink+0x94>)
 8000b6e:	f002 fec3 	bl	80038f8 <WS28XX_Update>
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000337c 	.word	0x2000337c
 8000b80:	20000038 	.word	0x20000038
 8000b84:	20002250 	.word	0x20002250

08000b88 <ResetLEDStrip>:
  * @param ws: Pointer to the WS28XX handle
  * @param pixel_count: Number of pixels in the strip
  * @retval None
  */
void ResetLEDStrip(WS28XX_HandleTypeDef* ws, int pixel_count)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < pixel_count; i++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	e009      	b.n	8000bac <ResetLEDStrip+0x24>
        WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_BLACK, 0);  // Turn off all LEDs
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	b299      	uxth	r1, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f002 fe35 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < pixel_count; i++) {
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf1      	blt.n	8000b98 <ResetLEDStrip+0x10>
    }
    WS28XX_Update(ws);  // Refresh the strip
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f002 fe9f 	bl	80038f8 <WS28XX_Update>
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <UpdateStartupWaveForMiddle>:

void UpdateStartupWaveForMiddle(WS28XX_HandleTypeDef* ws)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
    static int frame_left = MIDDLE_LED_MID_INDEX;  // Start from the center
    static int frame_right = MIDDLE_LED_MID_INDEX;
    static uint8_t wave_direction = 0;  // 0 for outward, 1 for inward
    static int drl_wave_complete_middle = 0;  // Variable to track DRL transition

    if (wave_count_middle < 4) {
 8000bcc:	4b83      	ldr	r3, [pc, #524]	@ (8000ddc <UpdateStartupWaveForMiddle+0x218>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	f300 80aa 	bgt.w	8000d2a <UpdateStartupWaveForMiddle+0x166>
        // We want 2 full passes (each pass consists of outward and inward wave)
        ResetLEDStrip(ws, WS28XX_MIDDLE_LED_COUNT);  // Turn off LEDs to create wave movement effect
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ffd5 	bl	8000b88 <ResetLEDStrip>

        if (wave_direction == 0) {  // Wave moving outward
 8000bde:	4b80      	ldr	r3, [pc, #512]	@ (8000de0 <UpdateStartupWaveForMiddle+0x21c>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d147      	bne.n	8000c76 <UpdateStartupWaveForMiddle+0xb2>
            for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e028      	b.n	8000c3e <UpdateStartupWaveForMiddle+0x7a>
                if (frame_left - i >= 0) {
 8000bec:	4b7d      	ldr	r3, [pc, #500]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0c      	blt.n	8000c12 <UpdateStartupWaveForMiddle+0x4e>
                    WS28XX_SetPixel_RGBW_565(ws, frame_left - i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Left side
 8000bf8:	4b7a      	ldr	r3, [pc, #488]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	b299      	uxth	r1, r3
 8000c06:	239b      	movs	r3, #155	@ 0x9b
 8000c08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f002 fdff 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
                }
                if (frame_right + i < WS28XX_MIDDLE_LED_COUNT) {
 8000c12:	4b75      	ldr	r3, [pc, #468]	@ (8000de8 <UpdateStartupWaveForMiddle+0x224>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	4413      	add	r3, r2
 8000c1a:	2b0e      	cmp	r3, #14
 8000c1c:	dc0c      	bgt.n	8000c38 <UpdateStartupWaveForMiddle+0x74>
                    WS28XX_SetPixel_RGBW_565(ws, frame_right + i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Right side
 8000c1e:	4b72      	ldr	r3, [pc, #456]	@ (8000de8 <UpdateStartupWaveForMiddle+0x224>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	b299      	uxth	r1, r3
 8000c2c:	239b      	movs	r3, #155	@ 0x9b
 8000c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f002 fdec 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
            for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	ddd3      	ble.n	8000bec <UpdateStartupWaveForMiddle+0x28>
                }
            }
            WS28XX_Update(ws);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f002 fe57 	bl	80038f8 <WS28XX_Update>

            frame_left--;
 8000c4a:	4b66      	ldr	r3, [pc, #408]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	4a64      	ldr	r2, [pc, #400]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000c52:	6013      	str	r3, [r2, #0]
            frame_right++;
 8000c54:	4b64      	ldr	r3, [pc, #400]	@ (8000de8 <UpdateStartupWaveForMiddle+0x224>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a63      	ldr	r2, [pc, #396]	@ (8000de8 <UpdateStartupWaveForMiddle+0x224>)
 8000c5c:	6013      	str	r3, [r2, #0]

            if (frame_left < 0 && frame_right >= WS28XX_MIDDLE_LED_COUNT) {
 8000c5e:	4b61      	ldr	r3, [pc, #388]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	da5d      	bge.n	8000d22 <UpdateStartupWaveForMiddle+0x15e>
 8000c66:	4b60      	ldr	r3, [pc, #384]	@ (8000de8 <UpdateStartupWaveForMiddle+0x224>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b0e      	cmp	r3, #14
 8000c6c:	dd59      	ble.n	8000d22 <UpdateStartupWaveForMiddle+0x15e>
                wave_direction = 1;  // Reverse direction when it hits the edges
 8000c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8000de0 <UpdateStartupWaveForMiddle+0x21c>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e055      	b.n	8000d22 <UpdateStartupWaveForMiddle+0x15e>
            }

        } else if (wave_direction == 1) {  // Wave moving inward
 8000c76:	4b5a      	ldr	r3, [pc, #360]	@ (8000de0 <UpdateStartupWaveForMiddle+0x21c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d151      	bne.n	8000d22 <UpdateStartupWaveForMiddle+0x15e>
            for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	e028      	b.n	8000cd6 <UpdateStartupWaveForMiddle+0x112>
                if (frame_left + i < MIDDLE_LED_MID_INDEX) {
 8000c84:	4b57      	ldr	r3, [pc, #348]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	2b06      	cmp	r3, #6
 8000c8e:	dc0c      	bgt.n	8000caa <UpdateStartupWaveForMiddle+0xe6>
                    WS28XX_SetPixel_RGBW_565(ws, frame_left + i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Left side returning
 8000c90:	4b54      	ldr	r3, [pc, #336]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	239b      	movs	r3, #155	@ 0x9b
 8000ca0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f002 fdb3 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
                }
                if (frame_right - i >= MIDDLE_LED_MID_INDEX) {
 8000caa:	4b4f      	ldr	r3, [pc, #316]	@ (8000de8 <UpdateStartupWaveForMiddle+0x224>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	dd0c      	ble.n	8000cd0 <UpdateStartupWaveForMiddle+0x10c>
                    WS28XX_SetPixel_RGBW_565(ws, frame_right - i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Right side returning
 8000cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8000de8 <UpdateStartupWaveForMiddle+0x224>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	b299      	uxth	r1, r3
 8000cc4:	239b      	movs	r3, #155	@ 0x9b
 8000cc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f002 fda0 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
            for (int i = 0; i < WAVE_PACKET_SIZE_MIDDLE; i++) {
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	ddd3      	ble.n	8000c84 <UpdateStartupWaveForMiddle+0xc0>
                }
            }
            WS28XX_Update(ws);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f002 fe0b 	bl	80038f8 <WS28XX_Update>

            frame_left++;
 8000ce2:	4b40      	ldr	r3, [pc, #256]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000cea:	6013      	str	r3, [r2, #0]
            frame_right--;
 8000cec:	4b3e      	ldr	r3, [pc, #248]	@ (8000de8 <UpdateStartupWaveForMiddle+0x224>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8000de8 <UpdateStartupWaveForMiddle+0x224>)
 8000cf4:	6013      	str	r3, [r2, #0]

            if (frame_left >= MIDDLE_LED_MID_INDEX && frame_right <= MIDDLE_LED_MID_INDEX) {
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	dd11      	ble.n	8000d22 <UpdateStartupWaveForMiddle+0x15e>
 8000cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8000de8 <UpdateStartupWaveForMiddle+0x224>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b07      	cmp	r3, #7
 8000d04:	dc0d      	bgt.n	8000d22 <UpdateStartupWaveForMiddle+0x15e>
                frame_left = MIDDLE_LED_MID_INDEX;
 8000d06:	4b37      	ldr	r3, [pc, #220]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                frame_right = MIDDLE_LED_MID_INDEX;
 8000d0c:	4b36      	ldr	r3, [pc, #216]	@ (8000de8 <UpdateStartupWaveForMiddle+0x224>)
 8000d0e:	2207      	movs	r2, #7
 8000d10:	601a      	str	r2, [r3, #0]
                wave_direction = 0;  // Reset for next outward pass
 8000d12:	4b33      	ldr	r3, [pc, #204]	@ (8000de0 <UpdateStartupWaveForMiddle+0x21c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
                wave_count_middle++;  // Complete one full pass
 8000d18:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <UpdateStartupWaveForMiddle+0x218>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000ddc <UpdateStartupWaveForMiddle+0x218>)
 8000d20:	6013      	str	r3, [r2, #0]
            }
        }

        HAL_Delay(WAVE_SPEED * 2);  // Slower speed for a luxury aesthetic
 8000d22:	2028      	movs	r0, #40	@ 0x28
 8000d24:	f000 fbc0 	bl	80014a8 <HAL_Delay>

        current_mode_pa9 = DRL_MODE;  // Switch to DRL mode
        wave_count_middle = 0;  // Reset wave count for future use
        drl_wave_complete_middle = 0;  // Reset DRL wave completion flag
    }
}
 8000d28:	e053      	b.n	8000dd2 <UpdateStartupWaveForMiddle+0x20e>
    } else if (!drl_wave_complete_middle) {
 8000d2a:	4b30      	ldr	r3, [pc, #192]	@ (8000dec <UpdateStartupWaveForMiddle+0x228>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d132      	bne.n	8000d98 <UpdateStartupWaveForMiddle+0x1d4>
        for (int i = 0; i <= frame_left; i++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	e017      	b.n	8000d68 <UpdateStartupWaveForMiddle+0x1a4>
            WS28XX_SetPixel_RGBW_565(ws, MIDDLE_LED_MID_INDEX - i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Light from center outward to left
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	f1c3 0307 	rsb	r3, r3, #7
 8000d40:	b299      	uxth	r1, r3
 8000d42:	239b      	movs	r3, #155	@ 0x9b
 8000d44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f002 fd61 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
            WS28XX_SetPixel_RGBW_565(ws, MIDDLE_LED_MID_INDEX + i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Light from center outward to right
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	3307      	adds	r3, #7
 8000d54:	b299      	uxth	r1, r3
 8000d56:	239b      	movs	r3, #155	@ 0x9b
 8000d58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f002 fd57 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i <= frame_left; i++) {
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3301      	adds	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	dde2      	ble.n	8000d38 <UpdateStartupWaveForMiddle+0x174>
        WS28XX_Update(ws);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f002 fdc0 	bl	80038f8 <WS28XX_Update>
        frame_left++;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	4a19      	ldr	r2, [pc, #100]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000d80:	6013      	str	r3, [r2, #0]
        if (frame_left >= MIDDLE_LED_MID_INDEX) {
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <UpdateStartupWaveForMiddle+0x220>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	dd02      	ble.n	8000d90 <UpdateStartupWaveForMiddle+0x1cc>
            drl_wave_complete_middle = 1;  // DRL transition complete
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <UpdateStartupWaveForMiddle+0x228>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
        HAL_Delay(WAVE_SPEED);  // Smooth transition speed
 8000d90:	2014      	movs	r0, #20
 8000d92:	f000 fb89 	bl	80014a8 <HAL_Delay>
}
 8000d96:	e01c      	b.n	8000dd2 <UpdateStartupWaveForMiddle+0x20e>
        for (int i = 0; i < WS28XX_MIDDLE_LED_COUNT; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	e00a      	b.n	8000db4 <UpdateStartupWaveForMiddle+0x1f0>
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);  // Full DRL brightness
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	b299      	uxth	r1, r3
 8000da2:	239b      	movs	r3, #155	@ 0x9b
 8000da4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f002 fd31 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < WS28XX_MIDDLE_LED_COUNT; i++) {
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	3301      	adds	r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	2b0e      	cmp	r3, #14
 8000db8:	ddf1      	ble.n	8000d9e <UpdateStartupWaveForMiddle+0x1da>
        WS28XX_Update(ws);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f002 fd9c 	bl	80038f8 <WS28XX_Update>
        current_mode_pa9 = DRL_MODE;  // Switch to DRL mode
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <UpdateStartupWaveForMiddle+0x22c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
        wave_count_middle = 0;  // Reset wave count for future use
 8000dc6:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <UpdateStartupWaveForMiddle+0x218>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
        drl_wave_complete_middle = 0;  // Reset DRL wave completion flag
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <UpdateStartupWaveForMiddle+0x228>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20003380 	.word	0x20003380
 8000de0:	20003384 	.word	0x20003384
 8000de4:	20000008 	.word	0x20000008
 8000de8:	2000000c 	.word	0x2000000c
 8000dec:	20003388 	.word	0x20003388
 8000df0:	20000001 	.word	0x20000001

08000df4 <UpdateSOCIndication>:


void UpdateSOCIndication(WS28XX_HandleTypeDef* ws, int soc_percentage, int charging_type) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	@ 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
    static int last_update_time = 0;
    static uint8_t charging_blink_state = 0;  // Blink state, 0 = off, 1 = on
    int current_time = HAL_GetTick();
 8000e00:	f000 fb48 	bl	8001494 <HAL_GetTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	623b      	str	r3, [r7, #32]

    // Update every 100ms to avoid flickering
    if (current_time - last_update_time >= 1000) {
 8000e08:	4b56      	ldr	r3, [pc, #344]	@ (8000f64 <UpdateSOCIndication+0x170>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6a3a      	ldr	r2, [r7, #32]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e14:	f2c0 80a1 	blt.w	8000f5a <UpdateSOCIndication+0x166>
        last_update_time = current_time;
 8000e18:	4a52      	ldr	r2, [pc, #328]	@ (8000f64 <UpdateSOCIndication+0x170>)
 8000e1a:	6a3b      	ldr	r3, [r7, #32]
 8000e1c:	6013      	str	r3, [r2, #0]

        int led_count_to_light = (WS28XX_MIDDLE_LED_COUNT * soc_percentage) / 100;
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	4613      	mov	r3, r2
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	4a50      	ldr	r2, [pc, #320]	@ (8000f68 <UpdateSOCIndication+0x174>)
 8000e28:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2c:	1152      	asrs	r2, r2, #5
 8000e2e:	17db      	asrs	r3, r3, #31
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	61fb      	str	r3, [r7, #28]
        int left_led = MIDDLE_LED_MID_INDEX;
 8000e34:	2307      	movs	r3, #7
 8000e36:	61bb      	str	r3, [r7, #24]
        int right_led = MIDDLE_LED_MID_INDEX;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	617b      	str	r3, [r7, #20]

        for (int i = 0; i < led_count_to_light / 2; i++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e40:	e030      	b.n	8000ea4 <UpdateSOCIndication+0xb0>
            if (left_led - i >= 0) {
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db11      	blt.n	8000e70 <UpdateSOCIndication+0x7c>
                WS28XX_SetPixel_RGBW_565(ws, left_led - i, (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, DRL_BRIGHTNESS);
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	b299      	uxth	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d102      	bne.n	8000e64 <UpdateSOCIndication+0x70>
 8000e5e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000e62:	e001      	b.n	8000e68 <UpdateSOCIndication+0x74>
 8000e64:	f242 4244 	movw	r2, #9284	@ 0x2444
 8000e68:	239b      	movs	r3, #155	@ 0x9b
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f002 fcd0 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
            }
            if (right_led + i < WS28XX_MIDDLE_LED_COUNT) {
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e74:	4413      	add	r3, r2
 8000e76:	2b0e      	cmp	r3, #14
 8000e78:	dc11      	bgt.n	8000e9e <UpdateSOCIndication+0xaa>
                WS28XX_SetPixel_RGBW_565(ws, right_led + i, (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, DRL_BRIGHTNESS);
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	b299      	uxth	r1, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d102      	bne.n	8000e92 <UpdateSOCIndication+0x9e>
 8000e8c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000e90:	e001      	b.n	8000e96 <UpdateSOCIndication+0xa2>
 8000e92:	f242 4244 	movw	r2, #9284	@ 0x2444
 8000e96:	239b      	movs	r3, #155	@ 0x9b
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f002 fcb9 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < led_count_to_light / 2; i++) {
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	0fda      	lsrs	r2, r3, #31
 8000ea8:	4413      	add	r3, r2
 8000eaa:	105b      	asrs	r3, r3, #1
 8000eac:	461a      	mov	r2, r3
 8000eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	dbc6      	blt.n	8000e42 <UpdateSOCIndication+0x4e>
            }
        }

        // Blink the next LED for charging animation
        charging_blink_state = !charging_blink_state;  // Toggle the blink state
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f6c <UpdateSOCIndication+0x178>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf0c      	ite	eq
 8000ebc:	2301      	moveq	r3, #1
 8000ebe:	2300      	movne	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b29      	ldr	r3, [pc, #164]	@ (8000f6c <UpdateSOCIndication+0x178>)
 8000ec6:	701a      	strb	r2, [r3, #0]
        uint8_t blink_brightness = charging_blink_state ? DRL_BRIGHTNESS : 0;
 8000ec8:	4b28      	ldr	r3, [pc, #160]	@ (8000f6c <UpdateSOCIndication+0x178>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <UpdateSOCIndication+0xe0>
 8000ed0:	239b      	movs	r3, #155	@ 0x9b
 8000ed2:	e000      	b.n	8000ed6 <UpdateSOCIndication+0xe2>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	74fb      	strb	r3, [r7, #19]

        if (left_led - (led_count_to_light / 2) >= 0) {
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	0fda      	lsrs	r2, r3, #31
 8000edc:	4413      	add	r3, r2
 8000ede:	105b      	asrs	r3, r3, #1
 8000ee0:	425b      	negs	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db15      	blt.n	8000f18 <UpdateSOCIndication+0x124>
            WS28XX_SetPixel_RGBW_565(ws, left_led - (led_count_to_light / 2), (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, blink_brightness);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	0fda      	lsrs	r2, r3, #31
 8000ef0:	4413      	add	r3, r2
 8000ef2:	105b      	asrs	r3, r3, #1
 8000ef4:	425b      	negs	r3, r3
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	4413      	add	r3, r2
 8000efe:	b299      	uxth	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d102      	bne.n	8000f0c <UpdateSOCIndication+0x118>
 8000f06:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000f0a:	e001      	b.n	8000f10 <UpdateSOCIndication+0x11c>
 8000f0c:	f242 4244 	movw	r2, #9284	@ 0x2444
 8000f10:	7cfb      	ldrb	r3, [r7, #19]
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f002 fc7c 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
        }
        if (right_led + (led_count_to_light / 2) < WS28XX_MIDDLE_LED_COUNT) {
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	0fda      	lsrs	r2, r3, #31
 8000f1c:	4413      	add	r3, r2
 8000f1e:	105b      	asrs	r3, r3, #1
 8000f20:	461a      	mov	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	4413      	add	r3, r2
 8000f26:	2b0e      	cmp	r3, #14
 8000f28:	dc14      	bgt.n	8000f54 <UpdateSOCIndication+0x160>
            WS28XX_SetPixel_RGBW_565(ws, right_led + (led_count_to_light / 2), (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, blink_brightness);
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	0fda      	lsrs	r2, r3, #31
 8000f2e:	4413      	add	r3, r2
 8000f30:	105b      	asrs	r3, r3, #1
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4413      	add	r3, r2
 8000f3a:	b299      	uxth	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d102      	bne.n	8000f48 <UpdateSOCIndication+0x154>
 8000f42:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000f46:	e001      	b.n	8000f4c <UpdateSOCIndication+0x158>
 8000f48:	f242 4244 	movw	r2, #9284	@ 0x2444
 8000f4c:	7cfb      	ldrb	r3, [r7, #19]
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f002 fc5e 	bl	8003810 <WS28XX_SetPixel_RGBW_565>
        }

        WS28XX_Update(ws);  // Refresh the LED strip
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f002 fccf 	bl	80038f8 <WS28XX_Update>
    }
}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	@ 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000338c 	.word	0x2000338c
 8000f68:	51eb851f 	.word	0x51eb851f
 8000f6c:	20003390 	.word	0x20003390

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <Error_Handler+0x8>

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_MspInit+0x5c>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	4a14      	ldr	r2, [pc, #80]	@ (8000fd8 <HAL_MspInit+0x5c>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6193      	str	r3, [r2, #24]
 8000f8e:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <HAL_MspInit+0x5c>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <HAL_MspInit+0x5c>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd8 <HAL_MspInit+0x5c>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa4:	61d3      	str	r3, [r2, #28]
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <HAL_MspInit+0x5c>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_MspInit+0x60>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <HAL_MspInit+0x60>)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010000 	.word	0x40010000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <UsageFault_Handler+0x4>

08001008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 fa1e 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <DMA1_Channel2_IRQHandler+0x10>)
 800103e:	f000 fc1f 	bl	8001880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200033dc 	.word	0x200033dc

0800104c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <DMA1_Channel3_IRQHandler+0x10>)
 8001052:	f000 fc15 	bl	8001880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20003420 	.word	0x20003420

08001060 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <DMA1_Channel6_IRQHandler+0x10>)
 8001066:	f000 fc0b 	bl	8001880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20003464 	.word	0x20003464

08001074 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch2;
DMA_HandleTypeDef hdma_tim1_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b096      	sub	sp, #88	@ 0x58
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001086:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2220      	movs	r2, #32
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fc90 	bl	80039de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010be:	4b4a      	ldr	r3, [pc, #296]	@ (80011e8 <MX_TIM1_Init+0x168>)
 80010c0:	4a4a      	ldr	r2, [pc, #296]	@ (80011ec <MX_TIM1_Init+0x16c>)
 80010c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010c4:	4b48      	ldr	r3, [pc, #288]	@ (80011e8 <MX_TIM1_Init+0x168>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b47      	ldr	r3, [pc, #284]	@ (80011e8 <MX_TIM1_Init+0x168>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010d0:	4b45      	ldr	r3, [pc, #276]	@ (80011e8 <MX_TIM1_Init+0x168>)
 80010d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b43      	ldr	r3, [pc, #268]	@ (80011e8 <MX_TIM1_Init+0x168>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010de:	4b42      	ldr	r3, [pc, #264]	@ (80011e8 <MX_TIM1_Init+0x168>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b40      	ldr	r3, [pc, #256]	@ (80011e8 <MX_TIM1_Init+0x168>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ea:	483f      	ldr	r0, [pc, #252]	@ (80011e8 <MX_TIM1_Init+0x168>)
 80010ec:	f001 fa5e 	bl	80025ac <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010f6:	f7ff ff3b 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001100:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001104:	4619      	mov	r1, r3
 8001106:	4838      	ldr	r0, [pc, #224]	@ (80011e8 <MX_TIM1_Init+0x168>)
 8001108:	f001 fd5c 	bl	8002bc4 <HAL_TIM_ConfigClockSource>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001112:	f7ff ff2d 	bl	8000f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001116:	4834      	ldr	r0, [pc, #208]	@ (80011e8 <MX_TIM1_Init+0x168>)
 8001118:	f001 fa97 	bl	800264a <HAL_TIM_PWM_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001122:	f7ff ff25 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800112e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001132:	4619      	mov	r1, r3
 8001134:	482c      	ldr	r0, [pc, #176]	@ (80011e8 <MX_TIM1_Init+0x168>)
 8001136:	f002 f9a9 	bl	800348c <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001140:	f7ff ff16 	bl	8000f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001144:	2360      	movs	r3, #96	@ 0x60
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	481f      	ldr	r0, [pc, #124]	@ (80011e8 <MX_TIM1_Init+0x168>)
 800116a:	f001 fc69 	bl	8002a40 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001174:	f7ff fefc 	bl	8000f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117c:	2204      	movs	r2, #4
 800117e:	4619      	mov	r1, r3
 8001180:	4819      	ldr	r0, [pc, #100]	@ (80011e8 <MX_TIM1_Init+0x168>)
 8001182:	f001 fc5d 	bl	8002a40 <HAL_TIM_PWM_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800118c:	f7ff fef0 	bl	8000f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001194:	2208      	movs	r2, #8
 8001196:	4619      	mov	r1, r3
 8001198:	4813      	ldr	r0, [pc, #76]	@ (80011e8 <MX_TIM1_Init+0x168>)
 800119a:	f001 fc51 	bl	8002a40 <HAL_TIM_PWM_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80011a4:	f7ff fee4 	bl	8000f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4807      	ldr	r0, [pc, #28]	@ (80011e8 <MX_TIM1_Init+0x168>)
 80011cc:	f002 f9bc 	bl	8003548 <HAL_TIMEx_ConfigBreakDeadTime>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80011d6:	f7ff fecb 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011da:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <MX_TIM1_Init+0x168>)
 80011dc:	f000 f8a8 	bl	8001330 <HAL_TIM_MspPostInit>

}
 80011e0:	bf00      	nop
 80011e2:	3758      	adds	r7, #88	@ 0x58
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20003394 	.word	0x20003394
 80011ec:	40012c00 	.word	0x40012c00

080011f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a44      	ldr	r2, [pc, #272]	@ (8001310 <HAL_TIM_Base_MspInit+0x120>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	f040 8081 	bne.w	8001306 <HAL_TIM_Base_MspInit+0x116>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001204:	4b43      	ldr	r3, [pc, #268]	@ (8001314 <HAL_TIM_Base_MspInit+0x124>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a42      	ldr	r2, [pc, #264]	@ (8001314 <HAL_TIM_Base_MspInit+0x124>)
 800120a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b40      	ldr	r3, [pc, #256]	@ (8001314 <HAL_TIM_Base_MspInit+0x124>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800121c:	4b3e      	ldr	r3, [pc, #248]	@ (8001318 <HAL_TIM_Base_MspInit+0x128>)
 800121e:	4a3f      	ldr	r2, [pc, #252]	@ (800131c <HAL_TIM_Base_MspInit+0x12c>)
 8001220:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001222:	4b3d      	ldr	r3, [pc, #244]	@ (8001318 <HAL_TIM_Base_MspInit+0x128>)
 8001224:	2210      	movs	r2, #16
 8001226:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b3b      	ldr	r3, [pc, #236]	@ (8001318 <HAL_TIM_Base_MspInit+0x128>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b3a      	ldr	r3, [pc, #232]	@ (8001318 <HAL_TIM_Base_MspInit+0x128>)
 8001230:	2280      	movs	r2, #128	@ 0x80
 8001232:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001234:	4b38      	ldr	r3, [pc, #224]	@ (8001318 <HAL_TIM_Base_MspInit+0x128>)
 8001236:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800123a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123c:	4b36      	ldr	r3, [pc, #216]	@ (8001318 <HAL_TIM_Base_MspInit+0x128>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001242:	4b35      	ldr	r3, [pc, #212]	@ (8001318 <HAL_TIM_Base_MspInit+0x128>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001248:	4b33      	ldr	r3, [pc, #204]	@ (8001318 <HAL_TIM_Base_MspInit+0x128>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800124e:	4832      	ldr	r0, [pc, #200]	@ (8001318 <HAL_TIM_Base_MspInit+0x128>)
 8001250:	f000 fa5c 	bl	800170c <HAL_DMA_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800125a:	f7ff fe89 	bl	8000f70 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a2d      	ldr	r2, [pc, #180]	@ (8001318 <HAL_TIM_Base_MspInit+0x128>)
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24
 8001264:	4a2c      	ldr	r2, [pc, #176]	@ (8001318 <HAL_TIM_Base_MspInit+0x128>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800126a:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <HAL_TIM_Base_MspInit+0x130>)
 800126c:	4a2d      	ldr	r2, [pc, #180]	@ (8001324 <HAL_TIM_Base_MspInit+0x134>)
 800126e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001270:	4b2b      	ldr	r3, [pc, #172]	@ (8001320 <HAL_TIM_Base_MspInit+0x130>)
 8001272:	2210      	movs	r2, #16
 8001274:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <HAL_TIM_Base_MspInit+0x130>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800127c:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <HAL_TIM_Base_MspInit+0x130>)
 800127e:	2280      	movs	r2, #128	@ 0x80
 8001280:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001282:	4b27      	ldr	r3, [pc, #156]	@ (8001320 <HAL_TIM_Base_MspInit+0x130>)
 8001284:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001288:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128a:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <HAL_TIM_Base_MspInit+0x130>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001290:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <HAL_TIM_Base_MspInit+0x130>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001296:	4b22      	ldr	r3, [pc, #136]	@ (8001320 <HAL_TIM_Base_MspInit+0x130>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800129c:	4820      	ldr	r0, [pc, #128]	@ (8001320 <HAL_TIM_Base_MspInit+0x130>)
 800129e:	f000 fa35 	bl	800170c <HAL_DMA_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_TIM_Base_MspInit+0xbc>
    {
      Error_Handler();
 80012a8:	f7ff fe62 	bl	8000f70 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001320 <HAL_TIM_Base_MspInit+0x130>)
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80012b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001320 <HAL_TIM_Base_MspInit+0x130>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <HAL_TIM_Base_MspInit+0x138>)
 80012ba:	4a1c      	ldr	r2, [pc, #112]	@ (800132c <HAL_TIM_Base_MspInit+0x13c>)
 80012bc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012be:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <HAL_TIM_Base_MspInit+0x138>)
 80012c0:	2210      	movs	r2, #16
 80012c2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c4:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <HAL_TIM_Base_MspInit+0x138>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80012ca:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <HAL_TIM_Base_MspInit+0x138>)
 80012cc:	2280      	movs	r2, #128	@ 0x80
 80012ce:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d0:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <HAL_TIM_Base_MspInit+0x138>)
 80012d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d8:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <HAL_TIM_Base_MspInit+0x138>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <HAL_TIM_Base_MspInit+0x138>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80012e4:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <HAL_TIM_Base_MspInit+0x138>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80012ea:	480f      	ldr	r0, [pc, #60]	@ (8001328 <HAL_TIM_Base_MspInit+0x138>)
 80012ec:	f000 fa0e 	bl	800170c <HAL_DMA_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_TIM_Base_MspInit+0x10a>
    {
      Error_Handler();
 80012f6:	f7ff fe3b 	bl	8000f70 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <HAL_TIM_Base_MspInit+0x138>)
 80012fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001300:	4a09      	ldr	r2, [pc, #36]	@ (8001328 <HAL_TIM_Base_MspInit+0x138>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40012c00 	.word	0x40012c00
 8001314:	40021000 	.word	0x40021000
 8001318:	200033dc 	.word	0x200033dc
 800131c:	4002001c 	.word	0x4002001c
 8001320:	20003420 	.word	0x20003420
 8001324:	40020030 	.word	0x40020030
 8001328:	20003464 	.word	0x20003464
 800132c:	4002006c 	.word	0x4002006c

08001330 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a10      	ldr	r2, [pc, #64]	@ (800138c <HAL_TIM_MspPostInit+0x5c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d118      	bne.n	8001382 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_TIM_MspPostInit+0x60>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a0e      	ldr	r2, [pc, #56]	@ (8001390 <HAL_TIM_MspPostInit+0x60>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <HAL_TIM_MspPostInit+0x60>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001368:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800136c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2302      	movs	r3, #2
 8001374:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	@ (8001394 <HAL_TIM_MspPostInit+0x64>)
 800137e:	f000 fbb3 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40012c00 	.word	0x40012c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40010800 	.word	0x40010800

08001398 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001398:	f7ff fe6c 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800139c:	480b      	ldr	r0, [pc, #44]	@ (80013cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800139e:	490c      	ldr	r1, [pc, #48]	@ (80013d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013a0:	4a0c      	ldr	r2, [pc, #48]	@ (80013d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013b4:	4c09      	ldr	r4, [pc, #36]	@ (80013dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c2:	f002 fb15 	bl	80039f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c6:	f7ff f983 	bl	80006d0 <main>
  bx lr
 80013ca:	4770      	bx	lr
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80013d4:	08003b7c 	.word	0x08003b7c
  ldr r2, =_sbss
 80013d8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80013dc:	200034ac 	.word	0x200034ac

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_Init+0x28>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	@ (800140c <HAL_Init+0x28>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f947 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	200f      	movs	r0, #15
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fdbc 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f95f 	bl	80016f2 <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 f927 	bl	800169e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	@ (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000010 	.word	0x20000010
 8001468:	20000018 	.word	0x20000018
 800146c:	20000014 	.word	0x20000014

08001470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_IncTick+0x1c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_IncTick+0x20>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a03      	ldr	r2, [pc, #12]	@ (8001490 <HAL_IncTick+0x20>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	20000018 	.word	0x20000018
 8001490:	200034a8 	.word	0x200034a8

08001494 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b02      	ldr	r3, [pc, #8]	@ (80014a4 <HAL_GetTick+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	200034a8 	.word	0x200034a8

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff fff0 	bl	8001494 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffe0 	bl	8001494 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000018 	.word	0x20000018

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4906      	ldr	r1, [pc, #24]	@ (8001588 <__NVIC_EnableIRQ+0x34>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	@ 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f7ff ff90 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff2d 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff42 	bl	8001538 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff90 	bl	80015e0 <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5f 	bl	800158c <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff35 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e043      	b.n	80017aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <HAL_DMA_Init+0xa8>)
 800172a:	4413      	add	r3, r2
 800172c:	4a22      	ldr	r2, [pc, #136]	@ (80017b8 <HAL_DMA_Init+0xac>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	009a      	lsls	r2, r3, #2
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a1f      	ldr	r2, [pc, #124]	@ (80017bc <HAL_DMA_Init+0xb0>)
 800173e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2202      	movs	r2, #2
 8001744:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001756:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800175a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	bffdfff8 	.word	0xbffdfff8
 80017b8:	cccccccd 	.word	0xcccccccd
 80017bc:	40020000 	.word	0x40020000

080017c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_DMA_Start_IT+0x20>
 80017dc:	2302      	movs	r3, #2
 80017de:	e04b      	b.n	8001878 <HAL_DMA_Start_IT+0xb8>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d13a      	bne.n	800186a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 f937 	bl	8001a8c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001822:	2b00      	cmp	r3, #0
 8001824:	d008      	beq.n	8001838 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 020e 	orr.w	r2, r2, #14
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e00f      	b.n	8001858 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0204 	bic.w	r2, r2, #4
 8001846:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 020a 	orr.w	r2, r2, #10
 8001856:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e005      	b.n	8001876 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001872:	2302      	movs	r3, #2
 8001874:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001876:	7dfb      	ldrb	r3, [r7, #23]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	2204      	movs	r2, #4
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d04f      	beq.n	8001948 <HAL_DMA_IRQHandler+0xc8>
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d04a      	beq.n	8001948 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0204 	bic.w	r2, r2, #4
 80018ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a66      	ldr	r2, [pc, #408]	@ (8001a70 <HAL_DMA_IRQHandler+0x1f0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d029      	beq.n	800192e <HAL_DMA_IRQHandler+0xae>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a65      	ldr	r2, [pc, #404]	@ (8001a74 <HAL_DMA_IRQHandler+0x1f4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d022      	beq.n	800192a <HAL_DMA_IRQHandler+0xaa>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a63      	ldr	r2, [pc, #396]	@ (8001a78 <HAL_DMA_IRQHandler+0x1f8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01a      	beq.n	8001924 <HAL_DMA_IRQHandler+0xa4>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a62      	ldr	r2, [pc, #392]	@ (8001a7c <HAL_DMA_IRQHandler+0x1fc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d012      	beq.n	800191e <HAL_DMA_IRQHandler+0x9e>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a60      	ldr	r2, [pc, #384]	@ (8001a80 <HAL_DMA_IRQHandler+0x200>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00a      	beq.n	8001918 <HAL_DMA_IRQHandler+0x98>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a5f      	ldr	r2, [pc, #380]	@ (8001a84 <HAL_DMA_IRQHandler+0x204>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d102      	bne.n	8001912 <HAL_DMA_IRQHandler+0x92>
 800190c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001910:	e00e      	b.n	8001930 <HAL_DMA_IRQHandler+0xb0>
 8001912:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001916:	e00b      	b.n	8001930 <HAL_DMA_IRQHandler+0xb0>
 8001918:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800191c:	e008      	b.n	8001930 <HAL_DMA_IRQHandler+0xb0>
 800191e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001922:	e005      	b.n	8001930 <HAL_DMA_IRQHandler+0xb0>
 8001924:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001928:	e002      	b.n	8001930 <HAL_DMA_IRQHandler+0xb0>
 800192a:	2340      	movs	r3, #64	@ 0x40
 800192c:	e000      	b.n	8001930 <HAL_DMA_IRQHandler+0xb0>
 800192e:	2304      	movs	r3, #4
 8001930:	4a55      	ldr	r2, [pc, #340]	@ (8001a88 <HAL_DMA_IRQHandler+0x208>)
 8001932:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 8094 	beq.w	8001a66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001946:	e08e      	b.n	8001a66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	2202      	movs	r2, #2
 800194e:	409a      	lsls	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d056      	beq.n	8001a06 <HAL_DMA_IRQHandler+0x186>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d051      	beq.n	8001a06 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10b      	bne.n	8001988 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 020a 	bic.w	r2, r2, #10
 800197e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a38      	ldr	r2, [pc, #224]	@ (8001a70 <HAL_DMA_IRQHandler+0x1f0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d029      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x166>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a37      	ldr	r2, [pc, #220]	@ (8001a74 <HAL_DMA_IRQHandler+0x1f4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d022      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x162>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a35      	ldr	r2, [pc, #212]	@ (8001a78 <HAL_DMA_IRQHandler+0x1f8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01a      	beq.n	80019dc <HAL_DMA_IRQHandler+0x15c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a34      	ldr	r2, [pc, #208]	@ (8001a7c <HAL_DMA_IRQHandler+0x1fc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d012      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x156>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a32      	ldr	r2, [pc, #200]	@ (8001a80 <HAL_DMA_IRQHandler+0x200>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00a      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x150>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a31      	ldr	r2, [pc, #196]	@ (8001a84 <HAL_DMA_IRQHandler+0x204>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d102      	bne.n	80019ca <HAL_DMA_IRQHandler+0x14a>
 80019c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80019c8:	e00e      	b.n	80019e8 <HAL_DMA_IRQHandler+0x168>
 80019ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019ce:	e00b      	b.n	80019e8 <HAL_DMA_IRQHandler+0x168>
 80019d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019d4:	e008      	b.n	80019e8 <HAL_DMA_IRQHandler+0x168>
 80019d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019da:	e005      	b.n	80019e8 <HAL_DMA_IRQHandler+0x168>
 80019dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019e0:	e002      	b.n	80019e8 <HAL_DMA_IRQHandler+0x168>
 80019e2:	2320      	movs	r3, #32
 80019e4:	e000      	b.n	80019e8 <HAL_DMA_IRQHandler+0x168>
 80019e6:	2302      	movs	r3, #2
 80019e8:	4a27      	ldr	r2, [pc, #156]	@ (8001a88 <HAL_DMA_IRQHandler+0x208>)
 80019ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d034      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a04:	e02f      	b.n	8001a66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d028      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x1e8>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d023      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 020e 	bic.w	r2, r2, #14
 8001a2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4798      	blx	r3
    }
  }
  return;
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
}
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40020008 	.word	0x40020008
 8001a74:	4002001c 	.word	0x4002001c
 8001a78:	40020030 	.word	0x40020030
 8001a7c:	40020044 	.word	0x40020044
 8001a80:	40020058 	.word	0x40020058
 8001a84:	4002006c 	.word	0x4002006c
 8001a88:	40020000 	.word	0x40020000

08001a8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d108      	bne.n	8001acc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001aca:	e007      	b.n	8001adc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
	...

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b08b      	sub	sp, #44	@ 0x2c
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	e169      	b.n	8001dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001afc:	2201      	movs	r2, #1
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 8158 	bne.w	8001dca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a9a      	ldr	r2, [pc, #616]	@ (8001d88 <HAL_GPIO_Init+0x2a0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d05e      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b24:	4a98      	ldr	r2, [pc, #608]	@ (8001d88 <HAL_GPIO_Init+0x2a0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d875      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b2a:	4a98      	ldr	r2, [pc, #608]	@ (8001d8c <HAL_GPIO_Init+0x2a4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d058      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b30:	4a96      	ldr	r2, [pc, #600]	@ (8001d8c <HAL_GPIO_Init+0x2a4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d86f      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b36:	4a96      	ldr	r2, [pc, #600]	@ (8001d90 <HAL_GPIO_Init+0x2a8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d052      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b3c:	4a94      	ldr	r2, [pc, #592]	@ (8001d90 <HAL_GPIO_Init+0x2a8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d869      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b42:	4a94      	ldr	r2, [pc, #592]	@ (8001d94 <HAL_GPIO_Init+0x2ac>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d04c      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b48:	4a92      	ldr	r2, [pc, #584]	@ (8001d94 <HAL_GPIO_Init+0x2ac>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d863      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b4e:	4a92      	ldr	r2, [pc, #584]	@ (8001d98 <HAL_GPIO_Init+0x2b0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d046      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b54:	4a90      	ldr	r2, [pc, #576]	@ (8001d98 <HAL_GPIO_Init+0x2b0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d85d      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b5a:	2b12      	cmp	r3, #18
 8001b5c:	d82a      	bhi.n	8001bb4 <HAL_GPIO_Init+0xcc>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d859      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b62:	a201      	add	r2, pc, #4	@ (adr r2, 8001b68 <HAL_GPIO_Init+0x80>)
 8001b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b68:	08001be3 	.word	0x08001be3
 8001b6c:	08001bbd 	.word	0x08001bbd
 8001b70:	08001bcf 	.word	0x08001bcf
 8001b74:	08001c11 	.word	0x08001c11
 8001b78:	08001c17 	.word	0x08001c17
 8001b7c:	08001c17 	.word	0x08001c17
 8001b80:	08001c17 	.word	0x08001c17
 8001b84:	08001c17 	.word	0x08001c17
 8001b88:	08001c17 	.word	0x08001c17
 8001b8c:	08001c17 	.word	0x08001c17
 8001b90:	08001c17 	.word	0x08001c17
 8001b94:	08001c17 	.word	0x08001c17
 8001b98:	08001c17 	.word	0x08001c17
 8001b9c:	08001c17 	.word	0x08001c17
 8001ba0:	08001c17 	.word	0x08001c17
 8001ba4:	08001c17 	.word	0x08001c17
 8001ba8:	08001c17 	.word	0x08001c17
 8001bac:	08001bc5 	.word	0x08001bc5
 8001bb0:	08001bd9 	.word	0x08001bd9
 8001bb4:	4a79      	ldr	r2, [pc, #484]	@ (8001d9c <HAL_GPIO_Init+0x2b4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bba:	e02c      	b.n	8001c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e029      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e024      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e01f      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	330c      	adds	r3, #12
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e01a      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bea:	2304      	movs	r3, #4
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e013      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	611a      	str	r2, [r3, #16]
          break;
 8001c02:	e009      	b.n	8001c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c04:	2308      	movs	r3, #8
 8001c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	615a      	str	r2, [r3, #20]
          break;
 8001c0e:	e003      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          break;
 8001c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2bff      	cmp	r3, #255	@ 0xff
 8001c1c:	d801      	bhi.n	8001c22 <HAL_GPIO_Init+0x13a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	e001      	b.n	8001c26 <HAL_GPIO_Init+0x13e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3304      	adds	r3, #4
 8001c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2bff      	cmp	r3, #255	@ 0xff
 8001c2c:	d802      	bhi.n	8001c34 <HAL_GPIO_Init+0x14c>
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	e002      	b.n	8001c3a <HAL_GPIO_Init+0x152>
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	3b08      	subs	r3, #8
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	210f      	movs	r1, #15
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	6a39      	ldr	r1, [r7, #32]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	431a      	orrs	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80b1 	beq.w	8001dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c68:	4b4d      	ldr	r3, [pc, #308]	@ (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b4a      	ldr	r3, [pc, #296]	@ (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c80:	4a48      	ldr	r2, [pc, #288]	@ (8001da4 <HAL_GPIO_Init+0x2bc>)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a40      	ldr	r2, [pc, #256]	@ (8001da8 <HAL_GPIO_Init+0x2c0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <HAL_GPIO_Init+0x1ec>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a3f      	ldr	r2, [pc, #252]	@ (8001dac <HAL_GPIO_Init+0x2c4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8001db0 <HAL_GPIO_Init+0x2c8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <HAL_GPIO_Init+0x1e4>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3d      	ldr	r2, [pc, #244]	@ (8001db4 <HAL_GPIO_Init+0x2cc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_GPIO_Init+0x1e0>
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e006      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cc8:	2304      	movs	r3, #4
 8001cca:	e004      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd8:	f002 0203 	and.w	r2, r2, #3
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ce6:	492f      	ldr	r1, [pc, #188]	@ (8001da4 <HAL_GPIO_Init+0x2bc>)
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d00:	4b2d      	ldr	r3, [pc, #180]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	492c      	ldr	r1, [pc, #176]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4928      	ldr	r1, [pc, #160]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d28:	4b23      	ldr	r3, [pc, #140]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	4922      	ldr	r1, [pc, #136]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60cb      	str	r3, [r1, #12]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	491e      	ldr	r1, [pc, #120]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4918      	ldr	r1, [pc, #96]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d5e:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4914      	ldr	r1, [pc, #80]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d021      	beq.n	8001dbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	490e      	ldr	r1, [pc, #56]	@ (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
 8001d84:	e021      	b.n	8001dca <HAL_GPIO_Init+0x2e2>
 8001d86:	bf00      	nop
 8001d88:	10320000 	.word	0x10320000
 8001d8c:	10310000 	.word	0x10310000
 8001d90:	10220000 	.word	0x10220000
 8001d94:	10210000 	.word	0x10210000
 8001d98:	10120000 	.word	0x10120000
 8001d9c:	10110000 	.word	0x10110000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40010800 	.word	0x40010800
 8001dac:	40010c00 	.word	0x40010c00
 8001db0:	40011000 	.word	0x40011000
 8001db4:	40011400 	.word	0x40011400
 8001db8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <HAL_GPIO_Init+0x304>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	4909      	ldr	r1, [pc, #36]	@ (8001dec <HAL_GPIO_Init+0x304>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	3301      	adds	r3, #1
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f47f ae8e 	bne.w	8001afc <HAL_GPIO_Init+0x14>
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	372c      	adds	r7, #44	@ 0x2c
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e272      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8087 	beq.w	8001f1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e10:	4b92      	ldr	r3, [pc, #584]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d00c      	beq.n	8001e36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e1c:	4b8f      	ldr	r3, [pc, #572]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d112      	bne.n	8001e4e <HAL_RCC_OscConfig+0x5e>
 8001e28:	4b8c      	ldr	r3, [pc, #560]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e34:	d10b      	bne.n	8001e4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e36:	4b89      	ldr	r3, [pc, #548]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d06c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x12c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d168      	bne.n	8001f1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e24c      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x76>
 8001e58:	4b80      	ldr	r3, [pc, #512]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a7f      	ldr	r2, [pc, #508]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	e02e      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x98>
 8001e6e:	4b7b      	ldr	r3, [pc, #492]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7a      	ldr	r2, [pc, #488]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	4b78      	ldr	r3, [pc, #480]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a77      	ldr	r2, [pc, #476]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e01d      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0xbc>
 8001e92:	4b72      	ldr	r3, [pc, #456]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a71      	ldr	r2, [pc, #452]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b6f      	ldr	r3, [pc, #444]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a6e      	ldr	r2, [pc, #440]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
 8001eac:	4b6b      	ldr	r3, [pc, #428]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a6a      	ldr	r2, [pc, #424]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b68      	ldr	r3, [pc, #416]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a67      	ldr	r2, [pc, #412]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ec2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d013      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fae2 	bl	8001494 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff fade 	bl	8001494 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	@ 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e200      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xe4>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff face 	bl	8001494 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff faca 	bl	8001494 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	@ 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e1ec      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	4b53      	ldr	r3, [pc, #332]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x10c>
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d063      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00b      	beq.n	8001f4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f36:	4b49      	ldr	r3, [pc, #292]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d11c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x18c>
 8001f42:	4b46      	ldr	r3, [pc, #280]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d116      	bne.n	8001f7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4e:	4b43      	ldr	r3, [pc, #268]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_RCC_OscConfig+0x176>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e1c0      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4939      	ldr	r1, [pc, #228]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	e03a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d020      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f84:	4b36      	ldr	r3, [pc, #216]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7ff fa83 	bl	8001494 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f92:	f7ff fa7f 	bl	8001494 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e1a1      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4927      	ldr	r1, [pc, #156]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]
 8001fc4:	e015      	b.n	8001ff2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	4b26      	ldr	r3, [pc, #152]	@ (8002060 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fa62 	bl	8001494 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7ff fa5e 	bl	8001494 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e180      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d03a      	beq.n	8002074 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d019      	beq.n	800203a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002006:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <HAL_RCC_OscConfig+0x274>)
 8002008:	2201      	movs	r2, #1
 800200a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200c:	f7ff fa42 	bl	8001494 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002014:	f7ff fa3e 	bl	8001494 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e160      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	4b0d      	ldr	r3, [pc, #52]	@ (800205c <HAL_RCC_OscConfig+0x26c>)
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002032:	2001      	movs	r0, #1
 8002034:	f000 fa9c 	bl	8002570 <RCC_Delay>
 8002038:	e01c      	b.n	8002074 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <HAL_RCC_OscConfig+0x274>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002040:	f7ff fa28 	bl	8001494 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002046:	e00f      	b.n	8002068 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002048:	f7ff fa24 	bl	8001494 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d908      	bls.n	8002068 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e146      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	42420000 	.word	0x42420000
 8002064:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	4b92      	ldr	r3, [pc, #584]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e9      	bne.n	8002048 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80a6 	beq.w	80021ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002086:	4b8b      	ldr	r3, [pc, #556]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10d      	bne.n	80020ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b88      	ldr	r3, [pc, #544]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a87      	ldr	r2, [pc, #540]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800209c:	61d3      	str	r3, [r2, #28]
 800209e:	4b85      	ldr	r3, [pc, #532]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020aa:	2301      	movs	r3, #1
 80020ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ae:	4b82      	ldr	r3, [pc, #520]	@ (80022b8 <HAL_RCC_OscConfig+0x4c8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d118      	bne.n	80020ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ba:	4b7f      	ldr	r3, [pc, #508]	@ (80022b8 <HAL_RCC_OscConfig+0x4c8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a7e      	ldr	r2, [pc, #504]	@ (80022b8 <HAL_RCC_OscConfig+0x4c8>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c6:	f7ff f9e5 	bl	8001494 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ce:	f7ff f9e1 	bl	8001494 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b64      	cmp	r3, #100	@ 0x64
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e103      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	4b75      	ldr	r3, [pc, #468]	@ (80022b8 <HAL_RCC_OscConfig+0x4c8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x312>
 80020f4:	4b6f      	ldr	r3, [pc, #444]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a6e      	ldr	r2, [pc, #440]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6213      	str	r3, [r2, #32]
 8002100:	e02d      	b.n	800215e <HAL_RCC_OscConfig+0x36e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x334>
 800210a:	4b6a      	ldr	r3, [pc, #424]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a69      	ldr	r2, [pc, #420]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	6213      	str	r3, [r2, #32]
 8002116:	4b67      	ldr	r3, [pc, #412]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a66      	ldr	r2, [pc, #408]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	f023 0304 	bic.w	r3, r3, #4
 8002120:	6213      	str	r3, [r2, #32]
 8002122:	e01c      	b.n	800215e <HAL_RCC_OscConfig+0x36e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b05      	cmp	r3, #5
 800212a:	d10c      	bne.n	8002146 <HAL_RCC_OscConfig+0x356>
 800212c:	4b61      	ldr	r3, [pc, #388]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4a60      	ldr	r2, [pc, #384]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002132:	f043 0304 	orr.w	r3, r3, #4
 8002136:	6213      	str	r3, [r2, #32]
 8002138:	4b5e      	ldr	r3, [pc, #376]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a5d      	ldr	r2, [pc, #372]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	e00b      	b.n	800215e <HAL_RCC_OscConfig+0x36e>
 8002146:	4b5b      	ldr	r3, [pc, #364]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a5a      	ldr	r2, [pc, #360]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	4b58      	ldr	r3, [pc, #352]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a57      	ldr	r2, [pc, #348]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d015      	beq.n	8002192 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002166:	f7ff f995 	bl	8001494 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7ff f991 	bl	8001494 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e0b1      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	4b4b      	ldr	r3, [pc, #300]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ee      	beq.n	800216e <HAL_RCC_OscConfig+0x37e>
 8002190:	e014      	b.n	80021bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7ff f97f 	bl	8001494 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7ff f97b 	bl	8001494 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e09b      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	4b40      	ldr	r3, [pc, #256]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1ee      	bne.n	800219a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	4b3c      	ldr	r3, [pc, #240]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a3b      	ldr	r2, [pc, #236]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8087 	beq.w	80022e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d8:	4b36      	ldr	r3, [pc, #216]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d061      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d146      	bne.n	800227a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ec:	4b33      	ldr	r3, [pc, #204]	@ (80022bc <HAL_RCC_OscConfig+0x4cc>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7ff f94f 	bl	8001494 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fa:	f7ff f94b 	bl	8001494 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e06d      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220c:	4b29      	ldr	r3, [pc, #164]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f0      	bne.n	80021fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002220:	d108      	bne.n	8002234 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002222:	4b24      	ldr	r3, [pc, #144]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	4921      	ldr	r1, [pc, #132]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002234:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a19      	ldr	r1, [r3, #32]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	430b      	orrs	r3, r1
 8002246:	491b      	ldr	r1, [pc, #108]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800224c:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <HAL_RCC_OscConfig+0x4cc>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff f91f 	bl	8001494 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff f91b 	bl	8001494 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e03d      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800226c:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x46a>
 8002278:	e035      	b.n	80022e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <HAL_RCC_OscConfig+0x4cc>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff f908 	bl	8001494 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7ff f904 	bl	8001494 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e026      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229a:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x498>
 80022a6:	e01e      	b.n	80022e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e019      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40007000 	.word	0x40007000
 80022bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c0:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <HAL_RCC_OscConfig+0x500>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000

080022f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0d0      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002308:	4b6a      	ldr	r3, [pc, #424]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d910      	bls.n	8002338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b67      	ldr	r3, [pc, #412]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 0207 	bic.w	r2, r3, #7
 800231e:	4965      	ldr	r1, [pc, #404]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b63      	ldr	r3, [pc, #396]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0b8      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002350:	4b59      	ldr	r3, [pc, #356]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a58      	ldr	r2, [pc, #352]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800235a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002368:	4b53      	ldr	r3, [pc, #332]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a52      	ldr	r2, [pc, #328]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002372:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b50      	ldr	r3, [pc, #320]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	494d      	ldr	r1, [pc, #308]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d040      	beq.n	8002414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b47      	ldr	r3, [pc, #284]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d115      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e07f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b2:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e073      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c2:	4b3d      	ldr	r3, [pc, #244]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e06b      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d2:	4b39      	ldr	r3, [pc, #228]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4936      	ldr	r1, [pc, #216]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e4:	f7ff f856 	bl	8001494 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7ff f852 	bl	8001494 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e053      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	4b2d      	ldr	r3, [pc, #180]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 020c 	and.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	429a      	cmp	r2, r3
 8002412:	d1eb      	bne.n	80023ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002414:	4b27      	ldr	r3, [pc, #156]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d210      	bcs.n	8002444 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b24      	ldr	r3, [pc, #144]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 0207 	bic.w	r2, r3, #7
 800242a:	4922      	ldr	r1, [pc, #136]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e032      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4916      	ldr	r1, [pc, #88]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	490e      	ldr	r1, [pc, #56]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002482:	f000 f821 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002486:	4602      	mov	r2, r0
 8002488:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	490a      	ldr	r1, [pc, #40]	@ (80024bc <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	5ccb      	ldrb	r3, [r1, r3]
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	4a09      	ldr	r2, [pc, #36]	@ (80024c0 <HAL_RCC_ClockConfig+0x1cc>)
 800249c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_RCC_ClockConfig+0x1d0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe ffb4 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40022000 	.word	0x40022000
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08003a50 	.word	0x08003a50
 80024c0:	20000010 	.word	0x20000010
 80024c4:	20000014 	.word	0x20000014

080024c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024e2:	4b1e      	ldr	r3, [pc, #120]	@ (800255c <HAL_RCC_GetSysClockFreq+0x94>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d002      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x30>
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d003      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x36>
 80024f6:	e027      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024f8:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x98>)
 80024fa:	613b      	str	r3, [r7, #16]
      break;
 80024fc:	e027      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	0c9b      	lsrs	r3, r3, #18
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	4a17      	ldr	r2, [pc, #92]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002508:	5cd3      	ldrb	r3, [r2, r3]
 800250a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d010      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002516:	4b11      	ldr	r3, [pc, #68]	@ (800255c <HAL_RCC_GetSysClockFreq+0x94>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	0c5b      	lsrs	r3, r3, #17
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	4a11      	ldr	r2, [pc, #68]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x98>)
 800252a:	fb03 f202 	mul.w	r2, r3, r2
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	fbb2 f3f3 	udiv	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e004      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a0c      	ldr	r2, [pc, #48]	@ (800256c <HAL_RCC_GetSysClockFreq+0xa4>)
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	613b      	str	r3, [r7, #16]
      break;
 8002546:	e002      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x98>)
 800254a:	613b      	str	r3, [r7, #16]
      break;
 800254c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254e:	693b      	ldr	r3, [r7, #16]
}
 8002550:	4618      	mov	r0, r3
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	007a1200 	.word	0x007a1200
 8002564:	08003a60 	.word	0x08003a60
 8002568:	08003a70 	.word	0x08003a70
 800256c:	003d0900 	.word	0x003d0900

08002570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002578:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <RCC_Delay+0x34>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <RCC_Delay+0x38>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0a5b      	lsrs	r3, r3, #9
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800258c:	bf00      	nop
  }
  while (Delay --);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e5a      	subs	r2, r3, #1
 8002592:	60fa      	str	r2, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f9      	bne.n	800258c <RCC_Delay+0x1c>
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000010 	.word	0x20000010
 80025a8:	10624dd3 	.word	0x10624dd3

080025ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e041      	b.n	8002642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe fe0c 	bl	80011f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f000 fc9e 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e041      	b.n	80026e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f839 	bl	80026e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f000 fc4f 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d109      	bne.n	8002728 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	e022      	b.n	800276e <HAL_TIM_PWM_Start_DMA+0x72>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b04      	cmp	r3, #4
 800272c:	d109      	bne.n	8002742 <HAL_TIM_PWM_Start_DMA+0x46>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	e015      	b.n	800276e <HAL_TIM_PWM_Start_DMA+0x72>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d109      	bne.n	800275c <HAL_TIM_PWM_Start_DMA+0x60>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e008      	b.n	800276e <HAL_TIM_PWM_Start_DMA+0x72>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
 8002774:	e153      	b.n	8002a1e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <HAL_TIM_PWM_Start_DMA+0x94>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	e022      	b.n	80027d6 <HAL_TIM_PWM_Start_DMA+0xda>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b04      	cmp	r3, #4
 8002794:	d109      	bne.n	80027aa <HAL_TIM_PWM_Start_DMA+0xae>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b01      	cmp	r3, #1
 80027a0:	bf0c      	ite	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	2300      	movne	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	e015      	b.n	80027d6 <HAL_TIM_PWM_Start_DMA+0xda>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d109      	bne.n	80027c4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e008      	b.n	80027d6 <HAL_TIM_PWM_Start_DMA+0xda>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d024      	beq.n	8002824 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_TIM_PWM_Start_DMA+0xea>
 80027e0:	887b      	ldrh	r3, [r7, #2]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e119      	b.n	8002a1e <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d104      	bne.n	80027fa <HAL_TIM_PWM_Start_DMA+0xfe>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027f8:	e016      	b.n	8002828 <HAL_TIM_PWM_Start_DMA+0x12c>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d104      	bne.n	800280a <HAL_TIM_PWM_Start_DMA+0x10e>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002808:	e00e      	b.n	8002828 <HAL_TIM_PWM_Start_DMA+0x12c>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b08      	cmp	r3, #8
 800280e:	d104      	bne.n	800281a <HAL_TIM_PWM_Start_DMA+0x11e>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002818:	e006      	b.n	8002828 <HAL_TIM_PWM_Start_DMA+0x12c>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002822:	e001      	b.n	8002828 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0fa      	b.n	8002a1e <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	f200 80ae 	bhi.w	800298c <HAL_TIM_PWM_Start_DMA+0x290>
 8002830:	a201      	add	r2, pc, #4	@ (adr r2, 8002838 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	0800286d 	.word	0x0800286d
 800283c:	0800298d 	.word	0x0800298d
 8002840:	0800298d 	.word	0x0800298d
 8002844:	0800298d 	.word	0x0800298d
 8002848:	080028b5 	.word	0x080028b5
 800284c:	0800298d 	.word	0x0800298d
 8002850:	0800298d 	.word	0x0800298d
 8002854:	0800298d 	.word	0x0800298d
 8002858:	080028fd 	.word	0x080028fd
 800285c:	0800298d 	.word	0x0800298d
 8002860:	0800298d 	.word	0x0800298d
 8002864:	0800298d 	.word	0x0800298d
 8002868:	08002945 	.word	0x08002945
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	4a6d      	ldr	r2, [pc, #436]	@ (8002a28 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002872:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	4a6c      	ldr	r2, [pc, #432]	@ (8002a2c <HAL_TIM_PWM_Start_DMA+0x330>)
 800287a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	4a6b      	ldr	r2, [pc, #428]	@ (8002a30 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3334      	adds	r3, #52	@ 0x34
 8002890:	461a      	mov	r2, r3
 8002892:	887b      	ldrh	r3, [r7, #2]
 8002894:	f7fe ff94 	bl	80017c0 <HAL_DMA_Start_IT>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0bd      	b.n	8002a1e <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b0:	60da      	str	r2, [r3, #12]
      break;
 80028b2:	e06e      	b.n	8002992 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b8:	4a5b      	ldr	r2, [pc, #364]	@ (8002a28 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80028ba:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a2c <HAL_TIM_PWM_Start_DMA+0x330>)
 80028c2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	4a59      	ldr	r2, [pc, #356]	@ (8002a30 <HAL_TIM_PWM_Start_DMA+0x334>)
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3338      	adds	r3, #56	@ 0x38
 80028d8:	461a      	mov	r2, r3
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	f7fe ff70 	bl	80017c0 <HAL_DMA_Start_IT>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e099      	b.n	8002a1e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028f8:	60da      	str	r2, [r3, #12]
      break;
 80028fa:	e04a      	b.n	8002992 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	4a49      	ldr	r2, [pc, #292]	@ (8002a28 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002902:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	4a48      	ldr	r2, [pc, #288]	@ (8002a2c <HAL_TIM_PWM_Start_DMA+0x330>)
 800290a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	4a47      	ldr	r2, [pc, #284]	@ (8002a30 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002912:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	333c      	adds	r3, #60	@ 0x3c
 8002920:	461a      	mov	r2, r3
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	f7fe ff4c 	bl	80017c0 <HAL_DMA_Start_IT>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e075      	b.n	8002a1e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002940:	60da      	str	r2, [r3, #12]
      break;
 8002942:	e026      	b.n	8002992 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002948:	4a37      	ldr	r2, [pc, #220]	@ (8002a28 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800294a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002950:	4a36      	ldr	r2, [pc, #216]	@ (8002a2c <HAL_TIM_PWM_Start_DMA+0x330>)
 8002952:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002958:	4a35      	ldr	r2, [pc, #212]	@ (8002a30 <HAL_TIM_PWM_Start_DMA+0x334>)
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3340      	adds	r3, #64	@ 0x40
 8002968:	461a      	mov	r2, r3
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	f7fe ff28 	bl	80017c0 <HAL_DMA_Start_IT>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e051      	b.n	8002a1e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002988:	60da      	str	r2, [r3, #12]
      break;
 800298a:	e002      	b.n	8002992 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	75fb      	strb	r3, [r7, #23]
      break;
 8002990:	bf00      	nop
  }

  if (status == HAL_OK)
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d141      	bne.n	8002a1c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2201      	movs	r2, #1
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fd4f 	bl	8003444 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a22      	ldr	r2, [pc, #136]	@ (8002a34 <HAL_TIM_PWM_Start_DMA+0x338>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d107      	bne.n	80029c0 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029be:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a34 <HAL_TIM_PWM_Start_DMA+0x338>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00e      	beq.n	80029e8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d2:	d009      	beq.n	80029e8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a17      	ldr	r2, [pc, #92]	@ (8002a38 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d004      	beq.n	80029e8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a16      	ldr	r2, [pc, #88]	@ (8002a3c <HAL_TIM_PWM_Start_DMA+0x340>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d111      	bne.n	8002a0c <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d010      	beq.n	8002a1c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0a:	e007      	b.n	8002a1c <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	08002e1b 	.word	0x08002e1b
 8002a2c:	08002ec3 	.word	0x08002ec3
 8002a30:	08002d89 	.word	0x08002d89
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40000800 	.word	0x40000800

08002a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e0ae      	b.n	8002bbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b0c      	cmp	r3, #12
 8002a6a:	f200 809f 	bhi.w	8002bac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a74:	08002aa9 	.word	0x08002aa9
 8002a78:	08002bad 	.word	0x08002bad
 8002a7c:	08002bad 	.word	0x08002bad
 8002a80:	08002bad 	.word	0x08002bad
 8002a84:	08002ae9 	.word	0x08002ae9
 8002a88:	08002bad 	.word	0x08002bad
 8002a8c:	08002bad 	.word	0x08002bad
 8002a90:	08002bad 	.word	0x08002bad
 8002a94:	08002b2b 	.word	0x08002b2b
 8002a98:	08002bad 	.word	0x08002bad
 8002a9c:	08002bad 	.word	0x08002bad
 8002aa0:	08002bad 	.word	0x08002bad
 8002aa4:	08002b6b 	.word	0x08002b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 faaa 	bl	8003008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0208 	orr.w	r2, r2, #8
 8002ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0204 	bic.w	r2, r2, #4
 8002ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6999      	ldr	r1, [r3, #24]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	619a      	str	r2, [r3, #24]
      break;
 8002ae6:	e064      	b.n	8002bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 faf0 	bl	80030d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6999      	ldr	r1, [r3, #24]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	021a      	lsls	r2, r3, #8
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	619a      	str	r2, [r3, #24]
      break;
 8002b28:	e043      	b.n	8002bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fb39 	bl	80031a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0208 	orr.w	r2, r2, #8
 8002b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0204 	bic.w	r2, r2, #4
 8002b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69d9      	ldr	r1, [r3, #28]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	61da      	str	r2, [r3, #28]
      break;
 8002b68:	e023      	b.n	8002bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fb83 	bl	800327c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69d9      	ldr	r1, [r3, #28]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	021a      	lsls	r2, r3, #8
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	61da      	str	r2, [r3, #28]
      break;
 8002baa:	e002      	b.n	8002bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	75fb      	strb	r3, [r7, #23]
      break;
 8002bb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e0b4      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x186>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c18:	d03e      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0xd4>
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c1e:	f200 8087 	bhi.w	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c26:	f000 8086 	beq.w	8002d36 <HAL_TIM_ConfigClockSource+0x172>
 8002c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c2e:	d87f      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b70      	cmp	r3, #112	@ 0x70
 8002c32:	d01a      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0xa6>
 8002c34:	2b70      	cmp	r3, #112	@ 0x70
 8002c36:	d87b      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b60      	cmp	r3, #96	@ 0x60
 8002c3a:	d050      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x11a>
 8002c3c:	2b60      	cmp	r3, #96	@ 0x60
 8002c3e:	d877      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b50      	cmp	r3, #80	@ 0x50
 8002c42:	d03c      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0xfa>
 8002c44:	2b50      	cmp	r3, #80	@ 0x50
 8002c46:	d873      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b40      	cmp	r3, #64	@ 0x40
 8002c4a:	d058      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x13a>
 8002c4c:	2b40      	cmp	r3, #64	@ 0x40
 8002c4e:	d86f      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b30      	cmp	r3, #48	@ 0x30
 8002c52:	d064      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x15a>
 8002c54:	2b30      	cmp	r3, #48	@ 0x30
 8002c56:	d86b      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d060      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x15a>
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d867      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05c      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x15a>
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d05a      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x15a>
 8002c68:	e062      	b.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c7a:	f000 fbc4 	bl	8003406 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	609a      	str	r2, [r3, #8]
      break;
 8002c96:	e04f      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ca8:	f000 fbad 	bl	8003406 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cba:	609a      	str	r2, [r3, #8]
      break;
 8002cbc:	e03c      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f000 fb24 	bl	8003318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2150      	movs	r1, #80	@ 0x50
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fb7b 	bl	80033d2 <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e02c      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cea:	461a      	mov	r2, r3
 8002cec:	f000 fb42 	bl	8003374 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2160      	movs	r1, #96	@ 0x60
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fb6b 	bl	80033d2 <TIM_ITRx_SetConfig>
      break;
 8002cfc:	e01c      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f000 fb04 	bl	8003318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2140      	movs	r1, #64	@ 0x40
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fb5b 	bl	80033d2 <TIM_ITRx_SetConfig>
      break;
 8002d1c:	e00c      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f000 fb52 	bl	80033d2 <TIM_ITRx_SetConfig>
      break;
 8002d2e:	e003      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      break;
 8002d34:	e000      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d107      	bne.n	8002db0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dae:	e02a      	b.n	8002e06 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d107      	bne.n	8002dca <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dc8:	e01d      	b.n	8002e06 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de2:	e010      	b.n	8002e06 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d107      	bne.n	8002dfe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2208      	movs	r2, #8
 8002df2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002dfc:	e003      	b.n	8002e06 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff ffb5 	bl	8002d76 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	771a      	strb	r2, [r3, #28]
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d10b      	bne.n	8002e4a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d136      	bne.n	8002eae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e48:	e031      	b.n	8002eae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d10b      	bne.n	8002e6c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2202      	movs	r2, #2
 8002e58:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d125      	bne.n	8002eae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e6a:	e020      	b.n	8002eae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d10b      	bne.n	8002e8e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d114      	bne.n	8002eae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e8c:	e00f      	b.n	8002eae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d10a      	bne.n	8002eae <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2208      	movs	r2, #8
 8002e9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f7ff ff4f 	bl	8002d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	771a      	strb	r2, [r3, #28]
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d103      	bne.n	8002ee2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	771a      	strb	r2, [r3, #28]
 8002ee0:	e019      	b.n	8002f16 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d103      	bne.n	8002ef4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	771a      	strb	r2, [r3, #28]
 8002ef2:	e010      	b.n	8002f16 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d103      	bne.n	8002f06 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2204      	movs	r2, #4
 8002f02:	771a      	strb	r2, [r3, #28]
 8002f04:	e007      	b.n	8002f16 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d102      	bne.n	8002f16 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2208      	movs	r2, #8
 8002f14:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7ff ff24 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	771a      	strb	r2, [r3, #28]
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002ffc <TIM_Base_SetConfig+0xd0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00b      	beq.n	8002f5c <TIM_Base_SetConfig+0x30>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f4a:	d007      	beq.n	8002f5c <TIM_Base_SetConfig+0x30>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003000 <TIM_Base_SetConfig+0xd4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_Base_SetConfig+0x30>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a2b      	ldr	r2, [pc, #172]	@ (8003004 <TIM_Base_SetConfig+0xd8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d108      	bne.n	8002f6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a22      	ldr	r2, [pc, #136]	@ (8002ffc <TIM_Base_SetConfig+0xd0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <TIM_Base_SetConfig+0x62>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f7c:	d007      	beq.n	8002f8e <TIM_Base_SetConfig+0x62>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1f      	ldr	r2, [pc, #124]	@ (8003000 <TIM_Base_SetConfig+0xd4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_Base_SetConfig+0x62>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1e      	ldr	r2, [pc, #120]	@ (8003004 <TIM_Base_SetConfig+0xd8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d108      	bne.n	8002fa0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8002ffc <TIM_Base_SetConfig+0xd0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d103      	bne.n	8002fd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f023 0201 	bic.w	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	611a      	str	r2, [r3, #16]
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40000400 	.word	0x40000400
 8003004:	40000800 	.word	0x40000800

08003008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f023 0201 	bic.w	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0303 	bic.w	r3, r3, #3
 800303e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f023 0302 	bic.w	r3, r3, #2
 8003050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a1c      	ldr	r2, [pc, #112]	@ (80030d0 <TIM_OC1_SetConfig+0xc8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d10c      	bne.n	800307e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f023 0308 	bic.w	r3, r3, #8
 800306a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f023 0304 	bic.w	r3, r3, #4
 800307c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a13      	ldr	r2, [pc, #76]	@ (80030d0 <TIM_OC1_SetConfig+0xc8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d111      	bne.n	80030aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800308c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	621a      	str	r2, [r3, #32]
}
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40012c00 	.word	0x40012c00

080030d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f023 0210 	bic.w	r2, r3, #16
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800310a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f023 0320 	bic.w	r3, r3, #32
 800311e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a1d      	ldr	r2, [pc, #116]	@ (80031a4 <TIM_OC2_SetConfig+0xd0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d10d      	bne.n	8003150 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800313a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800314e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a14      	ldr	r2, [pc, #80]	@ (80031a4 <TIM_OC2_SetConfig+0xd0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d113      	bne.n	8003180 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800315e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	621a      	str	r2, [r3, #32]
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	40012c00 	.word	0x40012c00

080031a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0303 	bic.w	r3, r3, #3
 80031de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a1d      	ldr	r2, [pc, #116]	@ (8003278 <TIM_OC3_SetConfig+0xd0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10d      	bne.n	8003222 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800320c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a14      	ldr	r2, [pc, #80]	@ (8003278 <TIM_OC3_SetConfig+0xd0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d113      	bne.n	8003252 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	621a      	str	r2, [r3, #32]
}
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40012c00 	.word	0x40012c00

0800327c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	031b      	lsls	r3, r3, #12
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003314 <TIM_OC4_SetConfig+0x98>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d109      	bne.n	80032f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	019b      	lsls	r3, r3, #6
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	621a      	str	r2, [r3, #32]
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	40012c00 	.word	0x40012c00

08003318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f023 0201 	bic.w	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f023 030a 	bic.w	r3, r3, #10
 8003354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4313      	orrs	r3, r2
 800335c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f023 0210 	bic.w	r2, r3, #16
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800339e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	031b      	lsls	r3, r3, #12
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f043 0307 	orr.w	r3, r3, #7
 80033f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	609a      	str	r2, [r3, #8]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003406:	b480      	push	{r7}
 8003408:	b087      	sub	sp, #28
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003420:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	021a      	lsls	r2, r3, #8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	431a      	orrs	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4313      	orrs	r3, r2
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	609a      	str	r2, [r3, #8]
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2201      	movs	r2, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a1a      	ldr	r2, [r3, #32]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	43db      	mvns	r3, r3
 8003466:	401a      	ands	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a1a      	ldr	r2, [r3, #32]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	fa01 f303 	lsl.w	r3, r1, r3
 800347c:	431a      	orrs	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	621a      	str	r2, [r3, #32]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e046      	b.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a16      	ldr	r2, [pc, #88]	@ (800353c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00e      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f0:	d009      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a12      	ldr	r2, [pc, #72]	@ (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a10      	ldr	r2, [pc, #64]	@ (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10c      	bne.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800350c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	4313      	orrs	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800

08003548 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003560:	2302      	movs	r3, #2
 8003562:	e03d      	b.n	80035e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr

080035ea <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *Handle);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd ff58 	bl	80014a8 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *Handle)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8003608:	e002      	b.n	8003610 <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 800360a:	2001      	movs	r0, #1
 800360c:	f7ff ffed 	bl	80035ea <WS28XX_Delay>
  while (Handle->Lock)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	795b      	ldrb	r3, [r3, #5]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f8      	bne.n	800360a <WS28XX_Lock+0xa>
  }
  Handle->Lock = 1;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	715a      	strb	r2, [r3, #5]
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *Handle)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	715a      	strb	r2, [r3, #5]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
	...

08003640 <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *Handle, TIM_HandleTypeDef *HTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	4611      	mov	r1, r2
 800364c:	461a      	mov	r2, r3
 800364e:	460b      	mov	r3, r1
 8003650:	80fb      	strh	r3, [r7, #6]
 8003652:	4613      	mov	r3, r2
 8003654:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 8003656:	2300      	movs	r3, #0
 8003658:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (Handle == NULL || HTim == NULL)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d07b      	beq.n	8003758 <WS28XX_Init+0x118>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d078      	beq.n	8003758 <WS28XX_Init+0x118>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 8003666:	8c3b      	ldrh	r3, [r7, #32]
 8003668:	2ba1      	cmp	r3, #161	@ 0xa1
 800366a:	d874      	bhi.n	8003756 <WS28XX_Init+0x116>
    {
      break;
    }
    Handle->Channel = Channel;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	797a      	ldrb	r2, [r7, #5]
 8003670:	711a      	strb	r2, [r3, #4]
    Handle->MaxPixel = Pixel;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8c3a      	ldrh	r2, [r7, #32]
 8003676:	815a      	strh	r2, [r3, #10]
    Handle->HTim = HTim;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc fe1d 	bl	80002c0 <__aeabi_i2f>
 8003686:	4603      	mov	r3, r0
 8003688:	4936      	ldr	r1, [pc, #216]	@ (8003764 <WS28XX_Init+0x124>)
 800368a:	4618      	mov	r0, r3
 800368c:	f7fc ff20 	bl	80004d0 <__aeabi_fdiv>
 8003690:	4603      	mov	r3, r0
 8003692:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc fd5c 	bl	8000154 <__aeabi_fsub>
 800369c:	4603      	mov	r3, r0
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fc ffb2 	bl	8000608 <__aeabi_f2uiz>
 80036a4:	4603      	mov	r3, r0
 80036a6:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(Handle->HTim ,aar_value);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(Handle->HTim, 0);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2200      	movs	r2, #0
 80036c2:	629a      	str	r2, [r3, #40]	@ 0x28
    Handle->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 80036c4:	6938      	ldr	r0, [r7, #16]
 80036c6:	f7fc fdf7 	bl	80002b8 <__aeabi_ui2f>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4926      	ldr	r1, [pc, #152]	@ (8003768 <WS28XX_Init+0x128>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fc fe4a 	bl	8000368 <__aeabi_fmul>
 80036d4:	4603      	mov	r3, r0
 80036d6:	4925      	ldr	r1, [pc, #148]	@ (800376c <WS28XX_Init+0x12c>)
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fc fef9 	bl	80004d0 <__aeabi_fdiv>
 80036de:	4603      	mov	r3, r0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fc ff91 	bl	8000608 <__aeabi_f2uiz>
 80036e6:	4603      	mov	r3, r0
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	80da      	strh	r2, [r3, #6]
    Handle->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 80036ee:	6938      	ldr	r0, [r7, #16]
 80036f0:	f7fc fde2 	bl	80002b8 <__aeabi_ui2f>
 80036f4:	4603      	mov	r3, r0
 80036f6:	491b      	ldr	r1, [pc, #108]	@ (8003764 <WS28XX_Init+0x124>)
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fc fe35 	bl	8000368 <__aeabi_fmul>
 80036fe:	4603      	mov	r3, r0
 8003700:	491a      	ldr	r1, [pc, #104]	@ (800376c <WS28XX_Init+0x12c>)
 8003702:	4618      	mov	r0, r3
 8003704:	f7fc fee4 	bl	80004d0 <__aeabi_fdiv>
 8003708:	4603      	mov	r3, r0
 800370a:	4618      	mov	r0, r3
 800370c:	f7fc ff7c 	bl	8000608 <__aeabi_f2uiz>
 8003710:	4603      	mov	r3, r0
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	811a      	strh	r2, [r3, #8]
    memset(Handle->Pixel, 0, sizeof(Handle->Pixel));
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	330c      	adds	r3, #12
 800371c:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f95b 	bl	80039de <memset>
    memset(Handle->Buffer, 0, sizeof(Handle->Buffer));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 800372e:	f640 721a 	movw	r2, #3866	@ 0xf1a
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f952 	bl	80039de <memset>
    HAL_TIM_PWM_Start_DMA(Handle->HTim, Handle->Channel, (const uint32_t*)Handle->Buffer, Pixel);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	791b      	ldrb	r3, [r3, #4]
 8003742:	4619      	mov	r1, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f203 12ef 	addw	r2, r3, #495	@ 0x1ef
 800374a:	8c3b      	ldrh	r3, [r7, #32]
 800374c:	f7fe ffd6 	bl	80026fc <HAL_TIM_PWM_Start_DMA>
    answer = true;
 8003750:	2301      	movs	r3, #1
 8003752:	75fb      	strb	r3, [r7, #23]
 8003754:	e000      	b.n	8003758 <WS28XX_Init+0x118>
      break;
 8003756:	bf00      	nop
  }
  while (0);

  return answer;
 8003758:	7dfb      	ldrb	r3, [r7, #23]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	3f4ccccd 	.word	0x3f4ccccd
 8003768:	3ecccccd 	.word	0x3ecccccd
 800376c:	3fa00000 	.word	0x3fa00000

08003770 <WS28XX_SetPixel_RGB_565>:
  * @param  Color: RGB565 Color Code
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGB_565(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint16_t Color)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]
 800377c:	4613      	mov	r3, r2
 800377e:	803b      	strh	r3, [r7, #0]
  bool answer = true;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	895b      	ldrh	r3, [r3, #10]
 8003788:	887a      	ldrh	r2, [r7, #2]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <WS28XX_SetPixel_RGB_565+0x24>
    {
      answer = false;
 800378e:	2300      	movs	r3, #0
 8003790:	73fb      	strb	r3, [r7, #15]
      break;
 8003792:	e034      	b.n	80037fe <WS28XX_SetPixel_RGB_565+0x8e>
    }
    Red = ((Color >> 8) & 0xF8);
 8003794:	883b      	ldrh	r3, [r7, #0]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	b29b      	uxth	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f023 0307 	bic.w	r3, r3, #7
 80037a0:	73bb      	strb	r3, [r7, #14]
    Green = ((Color >> 3) & 0xFC);
 80037a2:	883b      	ldrh	r3, [r7, #0]
 80037a4:	08db      	lsrs	r3, r3, #3
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	737b      	strb	r3, [r7, #13]
    Blue = ((Color << 3) & 0xF8);
 80037b0:	883b      	ldrh	r3, [r7, #0]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	733b      	strb	r3, [r7, #12]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 80037b6:	7b7b      	ldrb	r3, [r7, #13]
 80037b8:	887a      	ldrh	r2, [r7, #2]
 80037ba:	4914      	ldr	r1, [pc, #80]	@ (800380c <WS28XX_SetPixel_RGB_565+0x9c>)
 80037bc:	5cc8      	ldrb	r0, [r1, r3]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	440b      	add	r3, r1
 80037c8:	330c      	adds	r3, #12
 80037ca:	4602      	mov	r2, r0
 80037cc:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 80037ce:	7bbb      	ldrb	r3, [r7, #14]
 80037d0:	887a      	ldrh	r2, [r7, #2]
 80037d2:	490e      	ldr	r1, [pc, #56]	@ (800380c <WS28XX_SetPixel_RGB_565+0x9c>)
 80037d4:	5cc8      	ldrb	r0, [r1, r3]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4413      	add	r3, r2
 80037de:	440b      	add	r3, r1
 80037e0:	330d      	adds	r3, #13
 80037e2:	4602      	mov	r2, r0
 80037e4:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 80037e6:	7b3b      	ldrb	r3, [r7, #12]
 80037e8:	887a      	ldrh	r2, [r7, #2]
 80037ea:	4908      	ldr	r1, [pc, #32]	@ (800380c <WS28XX_SetPixel_RGB_565+0x9c>)
 80037ec:	5cc8      	ldrb	r0, [r1, r3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	440b      	add	r3, r1
 80037f8:	330e      	adds	r3, #14
 80037fa:	4602      	mov	r2, r0
 80037fc:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	08003a74 	.word	0x08003a74

08003810 <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	4608      	mov	r0, r1
 800381a:	4611      	mov	r1, r2
 800381c:	461a      	mov	r2, r3
 800381e:	4603      	mov	r3, r0
 8003820:	817b      	strh	r3, [r7, #10]
 8003822:	460b      	mov	r3, r1
 8003824:	813b      	strh	r3, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	71fb      	strb	r3, [r7, #7]
  bool answer = true;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	895b      	ldrh	r3, [r3, #10]
 8003832:	897a      	ldrh	r2, [r7, #10]
 8003834:	429a      	cmp	r2, r3
 8003836:	d302      	bcc.n	800383e <WS28XX_SetPixel_RGBW_565+0x2e>
    {
      answer = false;
 8003838:	2300      	movs	r3, #0
 800383a:	75fb      	strb	r3, [r7, #23]
      break;
 800383c:	e051      	b.n	80038e2 <WS28XX_SetPixel_RGBW_565+0xd2>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 800383e:	893b      	ldrh	r3, [r7, #8]
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	b29b      	uxth	r3, r3
 8003844:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8003848:	79fa      	ldrb	r2, [r7, #7]
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	4a28      	ldr	r2, [pc, #160]	@ (80038f0 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8003850:	fb82 1203 	smull	r1, r2, r2, r3
 8003854:	441a      	add	r2, r3
 8003856:	11d2      	asrs	r2, r2, #7
 8003858:	17db      	asrs	r3, r3, #31
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	75bb      	strb	r3, [r7, #22]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 800385e:	893b      	ldrh	r3, [r7, #8]
 8003860:	08db      	lsrs	r3, r3, #3
 8003862:	b29b      	uxth	r3, r3
 8003864:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8003868:	79fa      	ldrb	r2, [r7, #7]
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	4a20      	ldr	r2, [pc, #128]	@ (80038f0 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8003870:	fb82 1203 	smull	r1, r2, r2, r3
 8003874:	441a      	add	r2, r3
 8003876:	11d2      	asrs	r2, r2, #7
 8003878:	17db      	asrs	r3, r3, #31
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	757b      	strb	r3, [r7, #21]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 800387e:	893b      	ldrh	r3, [r7, #8]
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	79fa      	ldrb	r2, [r7, #7]
 8003886:	fb02 f303 	mul.w	r3, r2, r3
 800388a:	4a19      	ldr	r2, [pc, #100]	@ (80038f0 <WS28XX_SetPixel_RGBW_565+0xe0>)
 800388c:	fb82 1203 	smull	r1, r2, r2, r3
 8003890:	441a      	add	r2, r3
 8003892:	11d2      	asrs	r2, r2, #7
 8003894:	17db      	asrs	r3, r3, #31
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 800389a:	7d7b      	ldrb	r3, [r7, #21]
 800389c:	897a      	ldrh	r2, [r7, #10]
 800389e:	4915      	ldr	r1, [pc, #84]	@ (80038f4 <WS28XX_SetPixel_RGBW_565+0xe4>)
 80038a0:	5cc8      	ldrb	r0, [r1, r3]
 80038a2:	68f9      	ldr	r1, [r7, #12]
 80038a4:	4613      	mov	r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4413      	add	r3, r2
 80038aa:	440b      	add	r3, r1
 80038ac:	330c      	adds	r3, #12
 80038ae:	4602      	mov	r2, r0
 80038b0:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 80038b2:	7dbb      	ldrb	r3, [r7, #22]
 80038b4:	897a      	ldrh	r2, [r7, #10]
 80038b6:	490f      	ldr	r1, [pc, #60]	@ (80038f4 <WS28XX_SetPixel_RGBW_565+0xe4>)
 80038b8:	5cc8      	ldrb	r0, [r1, r3]
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	4613      	mov	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4413      	add	r3, r2
 80038c2:	440b      	add	r3, r1
 80038c4:	330d      	adds	r3, #13
 80038c6:	4602      	mov	r2, r0
 80038c8:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 80038ca:	7d3b      	ldrb	r3, [r7, #20]
 80038cc:	897a      	ldrh	r2, [r7, #10]
 80038ce:	4909      	ldr	r1, [pc, #36]	@ (80038f4 <WS28XX_SetPixel_RGBW_565+0xe4>)
 80038d0:	5cc8      	ldrb	r0, [r1, r3]
 80038d2:	68f9      	ldr	r1, [r7, #12]
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	440b      	add	r3, r1
 80038dc:	330e      	adds	r3, #14
 80038de:	4602      	mov	r2, r0
 80038e0:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	80808081 	.word	0x80808081
 80038f4:	08003a74 	.word	0x08003a74

080038f8 <WS28XX_Update>:
  * @param  *Handle: Pointer to WS28XX_HandleTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *Handle)
{
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b089      	sub	sp, #36	@ 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  bool answer = true;
 8003900:	2301      	movs	r3, #1
 8003902:	77fb      	strb	r3, [r7, #31]
  uint32_t i = 1;
 8003904:	2301      	movs	r3, #1
 8003906:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(Handle);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fe79 	bl	8003600 <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < Handle->MaxPixel; pixel++)
 800390e:	2300      	movs	r3, #0
 8003910:	82fb      	strh	r3, [r7, #22]
 8003912:	e03e      	b.n	8003992 <WS28XX_Update+0x9a>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	e035      	b.n	8003986 <WS28XX_Update+0x8e>
    {
      for (int b = 7; b >= 0 ; b--)
 800391a:	2307      	movs	r3, #7
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	e02c      	b.n	800397a <WS28XX_Update+0x82>
      {
        if ((Handle->Pixel[pixel][rgb] & (1 << b)) == 0)
 8003920:	8afa      	ldrh	r2, [r7, #22]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	18ca      	adds	r2, r1, r3
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4413      	add	r3, r2
 8003930:	330c      	adds	r3, #12
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	fa42 f303 	asr.w	r3, r2, r3
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <WS28XX_Update+0x62>
        {
          Handle->Buffer[i] = Handle->Pulse0;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	88db      	ldrh	r3, [r3, #6]
 8003948:	b2d9      	uxtb	r1, r3
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	4413      	add	r3, r2
 8003950:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8003954:	460a      	mov	r2, r1
 8003956:	701a      	strb	r2, [r3, #0]
 8003958:	e009      	b.n	800396e <WS28XX_Update+0x76>
        }
        else
        {
          Handle->Buffer[i] = Handle->Pulse1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	891b      	ldrh	r3, [r3, #8]
 800395e:	b2d9      	uxtb	r1, r3
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	4413      	add	r3, r2
 8003966:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 800396a:	460a      	mov	r2, r1
 800396c:	701a      	strb	r2, [r3, #0]
        }
        i++;
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	3301      	adds	r3, #1
 8003972:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3b01      	subs	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	dacf      	bge.n	8003920 <WS28XX_Update+0x28>
    for (int rgb = 0; rgb < 3; rgb ++)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	3301      	adds	r3, #1
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b02      	cmp	r3, #2
 800398a:	ddc6      	ble.n	800391a <WS28XX_Update+0x22>
  for (uint16_t pixel = 0; pixel < Handle->MaxPixel; pixel++)
 800398c:	8afb      	ldrh	r3, [r7, #22]
 800398e:	3301      	adds	r3, #1
 8003990:	82fb      	strh	r3, [r7, #22]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	895b      	ldrh	r3, [r3, #10]
 8003996:	8afa      	ldrh	r2, [r7, #22]
 8003998:	429a      	cmp	r2, r3
 800399a:	d3bb      	bcc.n	8003914 <WS28XX_Update+0x1c>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(Handle->HTim, Handle->Channel, (const uint32_t*)Handle->Buffer, (Handle->MaxPixel * 24) + 2) != HAL_OK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	791b      	ldrb	r3, [r3, #4]
 80039a4:	461c      	mov	r4, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f203 12ef 	addw	r2, r3, #495	@ 0x1ef
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	895b      	ldrh	r3, [r3, #10]
 80039b0:	4619      	mov	r1, r3
 80039b2:	0049      	lsls	r1, r1, #1
 80039b4:	440b      	add	r3, r1
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3302      	adds	r3, #2
 80039bc:	b29b      	uxth	r3, r3
 80039be:	4621      	mov	r1, r4
 80039c0:	f7fe fe9c 	bl	80026fc <HAL_TIM_PWM_Start_DMA>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <WS28XX_Update+0xd6>
  {
    answer = false;
 80039ca:	2300      	movs	r3, #0
 80039cc:	77fb      	strb	r3, [r7, #31]
  }
  WS28XX_UnLock(Handle);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff fe29 	bl	8003626 <WS28XX_UnLock>
  return answer;
 80039d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3724      	adds	r7, #36	@ 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd90      	pop	{r4, r7, pc}

080039de <memset>:
 80039de:	4603      	mov	r3, r0
 80039e0:	4402      	add	r2, r0
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d100      	bne.n	80039e8 <memset+0xa>
 80039e6:	4770      	bx	lr
 80039e8:	f803 1b01 	strb.w	r1, [r3], #1
 80039ec:	e7f9      	b.n	80039e2 <memset+0x4>
	...

080039f0 <__libc_init_array>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	2600      	movs	r6, #0
 80039f4:	4d0c      	ldr	r5, [pc, #48]	@ (8003a28 <__libc_init_array+0x38>)
 80039f6:	4c0d      	ldr	r4, [pc, #52]	@ (8003a2c <__libc_init_array+0x3c>)
 80039f8:	1b64      	subs	r4, r4, r5
 80039fa:	10a4      	asrs	r4, r4, #2
 80039fc:	42a6      	cmp	r6, r4
 80039fe:	d109      	bne.n	8003a14 <__libc_init_array+0x24>
 8003a00:	f000 f81a 	bl	8003a38 <_init>
 8003a04:	2600      	movs	r6, #0
 8003a06:	4d0a      	ldr	r5, [pc, #40]	@ (8003a30 <__libc_init_array+0x40>)
 8003a08:	4c0a      	ldr	r4, [pc, #40]	@ (8003a34 <__libc_init_array+0x44>)
 8003a0a:	1b64      	subs	r4, r4, r5
 8003a0c:	10a4      	asrs	r4, r4, #2
 8003a0e:	42a6      	cmp	r6, r4
 8003a10:	d105      	bne.n	8003a1e <__libc_init_array+0x2e>
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
 8003a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a18:	4798      	blx	r3
 8003a1a:	3601      	adds	r6, #1
 8003a1c:	e7ee      	b.n	80039fc <__libc_init_array+0xc>
 8003a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a22:	4798      	blx	r3
 8003a24:	3601      	adds	r6, #1
 8003a26:	e7f2      	b.n	8003a0e <__libc_init_array+0x1e>
 8003a28:	08003b74 	.word	0x08003b74
 8003a2c:	08003b74 	.word	0x08003b74
 8003a30:	08003b74 	.word	0x08003b74
 8003a34:	08003b78 	.word	0x08003b78

08003a38 <_init>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	bf00      	nop
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr

08003a44 <_fini>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr
