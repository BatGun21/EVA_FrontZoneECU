
EVA_FrontZoneECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006028  08006028  0000803c  2**0
                  CONTENTS
  4 .ARM          00000000  08006028  08006028  0000803c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006028  08006028  0000803c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006028  08006028  00007028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800602c  0800602c  0000702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08006030  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003570  2000003c  0800606c  0000803c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035ac  0800606c  000085ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bad9  00000000  00000000  00008065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e0  00000000  00000000  00013b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  00015f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c5  00000000  00000000  00016bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b76  00000000  00000000  0001759d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa8b  00000000  00000000  00030113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ead5  00000000  00000000  0003fb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce673  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e0  00000000  00000000  000ce6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d1c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000003c 	.word	0x2000003c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ed0 	.word	0x08005ed0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000040 	.word	0x20000040
 800014c:	08005ed0 	.word	0x08005ed0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_frsub>:
 80005d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80005dc:	e002      	b.n	80005e4 <__addsf3>
 80005de:	bf00      	nop

080005e0 <__aeabi_fsub>:
 80005e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080005e4 <__addsf3>:
 80005e4:	0042      	lsls	r2, r0, #1
 80005e6:	bf1f      	itttt	ne
 80005e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005ec:	ea92 0f03 	teqne	r2, r3
 80005f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f8:	d06a      	beq.n	80006d0 <__addsf3+0xec>
 80005fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000602:	bfc1      	itttt	gt
 8000604:	18d2      	addgt	r2, r2, r3
 8000606:	4041      	eorgt	r1, r0
 8000608:	4048      	eorgt	r0, r1
 800060a:	4041      	eorgt	r1, r0
 800060c:	bfb8      	it	lt
 800060e:	425b      	neglt	r3, r3
 8000610:	2b19      	cmp	r3, #25
 8000612:	bf88      	it	hi
 8000614:	4770      	bxhi	lr
 8000616:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800062a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800062e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4249      	negne	r1, r1
 8000636:	ea92 0f03 	teq	r2, r3
 800063a:	d03f      	beq.n	80006bc <__addsf3+0xd8>
 800063c:	f1a2 0201 	sub.w	r2, r2, #1
 8000640:	fa41 fc03 	asr.w	ip, r1, r3
 8000644:	eb10 000c 	adds.w	r0, r0, ip
 8000648:	f1c3 0320 	rsb	r3, r3, #32
 800064c:	fa01 f103 	lsl.w	r1, r1, r3
 8000650:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000654:	d502      	bpl.n	800065c <__addsf3+0x78>
 8000656:	4249      	negs	r1, r1
 8000658:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800065c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000660:	d313      	bcc.n	800068a <__addsf3+0xa6>
 8000662:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000666:	d306      	bcc.n	8000676 <__addsf3+0x92>
 8000668:	0840      	lsrs	r0, r0, #1
 800066a:	ea4f 0131 	mov.w	r1, r1, rrx
 800066e:	f102 0201 	add.w	r2, r2, #1
 8000672:	2afe      	cmp	r2, #254	@ 0xfe
 8000674:	d251      	bcs.n	800071a <__addsf3+0x136>
 8000676:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800067a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067e:	bf08      	it	eq
 8000680:	f020 0001 	biceq.w	r0, r0, #1
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	4770      	bx	lr
 800068a:	0049      	lsls	r1, r1, #1
 800068c:	eb40 0000 	adc.w	r0, r0, r0
 8000690:	3a01      	subs	r2, #1
 8000692:	bf28      	it	cs
 8000694:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000698:	d2ed      	bcs.n	8000676 <__addsf3+0x92>
 800069a:	fab0 fc80 	clz	ip, r0
 800069e:	f1ac 0c08 	sub.w	ip, ip, #8
 80006a2:	ebb2 020c 	subs.w	r2, r2, ip
 80006a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006aa:	bfaa      	itet	ge
 80006ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006b0:	4252      	neglt	r2, r2
 80006b2:	4318      	orrge	r0, r3
 80006b4:	bfbc      	itt	lt
 80006b6:	40d0      	lsrlt	r0, r2
 80006b8:	4318      	orrlt	r0, r3
 80006ba:	4770      	bx	lr
 80006bc:	f092 0f00 	teq	r2, #0
 80006c0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80006c4:	bf06      	itte	eq
 80006c6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80006ca:	3201      	addeq	r2, #1
 80006cc:	3b01      	subne	r3, #1
 80006ce:	e7b5      	b.n	800063c <__addsf3+0x58>
 80006d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d8:	bf18      	it	ne
 80006da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006de:	d021      	beq.n	8000724 <__addsf3+0x140>
 80006e0:	ea92 0f03 	teq	r2, r3
 80006e4:	d004      	beq.n	80006f0 <__addsf3+0x10c>
 80006e6:	f092 0f00 	teq	r2, #0
 80006ea:	bf08      	it	eq
 80006ec:	4608      	moveq	r0, r1
 80006ee:	4770      	bx	lr
 80006f0:	ea90 0f01 	teq	r0, r1
 80006f4:	bf1c      	itt	ne
 80006f6:	2000      	movne	r0, #0
 80006f8:	4770      	bxne	lr
 80006fa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80006fe:	d104      	bne.n	800070a <__addsf3+0x126>
 8000700:	0040      	lsls	r0, r0, #1
 8000702:	bf28      	it	cs
 8000704:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000708:	4770      	bx	lr
 800070a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800070e:	bf3c      	itt	cc
 8000710:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000714:	4770      	bxcc	lr
 8000716:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800071a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800071e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000722:	4770      	bx	lr
 8000724:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000728:	bf16      	itet	ne
 800072a:	4608      	movne	r0, r1
 800072c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000730:	4601      	movne	r1, r0
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	bf06      	itte	eq
 8000736:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800073a:	ea90 0f01 	teqeq	r0, r1
 800073e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000742:	4770      	bx	lr

08000744 <__aeabi_ui2f>:
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e004      	b.n	8000754 <__aeabi_i2f+0x8>
 800074a:	bf00      	nop

0800074c <__aeabi_i2f>:
 800074c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	ea5f 0c00 	movs.w	ip, r0
 8000758:	bf08      	it	eq
 800075a:	4770      	bxeq	lr
 800075c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000760:	4601      	mov	r1, r0
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	e01c      	b.n	80007a2 <__aeabi_l2f+0x2a>

08000768 <__aeabi_ul2f>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	e00a      	b.n	800078c <__aeabi_l2f+0x14>
 8000776:	bf00      	nop

08000778 <__aeabi_l2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__aeabi_l2f+0x14>
 8000786:	4240      	negs	r0, r0
 8000788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078c:	ea5f 0c01 	movs.w	ip, r1
 8000790:	bf02      	ittt	eq
 8000792:	4684      	moveq	ip, r0
 8000794:	4601      	moveq	r1, r0
 8000796:	2000      	moveq	r0, #0
 8000798:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800079c:	bf08      	it	eq
 800079e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80007a6:	fabc f28c 	clz	r2, ip
 80007aa:	3a08      	subs	r2, #8
 80007ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007b0:	db10      	blt.n	80007d4 <__aeabi_l2f+0x5c>
 80007b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b6:	4463      	add	r3, ip
 80007b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007bc:	f1c2 0220 	rsb	r2, r2, #32
 80007c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80007c4:	fa20 f202 	lsr.w	r2, r0, r2
 80007c8:	eb43 0002 	adc.w	r0, r3, r2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f102 0220 	add.w	r2, r2, #32
 80007d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e4:	fa21 f202 	lsr.w	r2, r1, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_fmul>:
 80007f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007fc:	bf1e      	ittt	ne
 80007fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000802:	ea92 0f0c 	teqne	r2, ip
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d06f      	beq.n	80008ec <__aeabi_fmul+0xf8>
 800080c:	441a      	add	r2, r3
 800080e:	ea80 0c01 	eor.w	ip, r0, r1
 8000812:	0240      	lsls	r0, r0, #9
 8000814:	bf18      	it	ne
 8000816:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800081a:	d01e      	beq.n	800085a <__aeabi_fmul+0x66>
 800081c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000820:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000824:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000828:	fba0 3101 	umull	r3, r1, r0, r1
 800082c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000830:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000834:	bf3e      	ittt	cc
 8000836:	0049      	lslcc	r1, r1, #1
 8000838:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800083c:	005b      	lslcc	r3, r3, #1
 800083e:	ea40 0001 	orr.w	r0, r0, r1
 8000842:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000846:	2afd      	cmp	r2, #253	@ 0xfd
 8000848:	d81d      	bhi.n	8000886 <__aeabi_fmul+0x92>
 800084a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	4770      	bx	lr
 800085a:	f090 0f00 	teq	r0, #0
 800085e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000862:	bf08      	it	eq
 8000864:	0249      	lsleq	r1, r1, #9
 8000866:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800086a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086e:	3a7f      	subs	r2, #127	@ 0x7f
 8000870:	bfc2      	ittt	gt
 8000872:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000876:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800087a:	4770      	bxgt	lr
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	3a01      	subs	r2, #1
 8000886:	dc5d      	bgt.n	8000944 <__aeabi_fmul+0x150>
 8000888:	f112 0f19 	cmn.w	r2, #25
 800088c:	bfdc      	itt	le
 800088e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000892:	4770      	bxle	lr
 8000894:	f1c2 0200 	rsb	r2, r2, #0
 8000898:	0041      	lsls	r1, r0, #1
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	f1c2 0220 	rsb	r2, r2, #32
 80008a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008aa:	f140 0000 	adc.w	r0, r0, #0
 80008ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008b2:	bf08      	it	eq
 80008b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b8:	4770      	bx	lr
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80008c2:	bf02      	ittt	eq
 80008c4:	0040      	lsleq	r0, r0, #1
 80008c6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80008ca:	3a01      	subeq	r2, #1
 80008cc:	d0f9      	beq.n	80008c2 <__aeabi_fmul+0xce>
 80008ce:	ea40 000c 	orr.w	r0, r0, ip
 80008d2:	f093 0f00 	teq	r3, #0
 80008d6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008da:	bf02      	ittt	eq
 80008dc:	0049      	lsleq	r1, r1, #1
 80008de:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80008e2:	3b01      	subeq	r3, #1
 80008e4:	d0f9      	beq.n	80008da <__aeabi_fmul+0xe6>
 80008e6:	ea41 010c 	orr.w	r1, r1, ip
 80008ea:	e78f      	b.n	800080c <__aeabi_fmul+0x18>
 80008ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008f0:	ea92 0f0c 	teq	r2, ip
 80008f4:	bf18      	it	ne
 80008f6:	ea93 0f0c 	teqne	r3, ip
 80008fa:	d00a      	beq.n	8000912 <__aeabi_fmul+0x11e>
 80008fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000900:	bf18      	it	ne
 8000902:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000906:	d1d8      	bne.n	80008ba <__aeabi_fmul+0xc6>
 8000908:	ea80 0001 	eor.w	r0, r0, r1
 800090c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f090 0f00 	teq	r0, #0
 8000916:	bf17      	itett	ne
 8000918:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800091c:	4608      	moveq	r0, r1
 800091e:	f091 0f00 	teqne	r1, #0
 8000922:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000926:	d014      	beq.n	8000952 <__aeabi_fmul+0x15e>
 8000928:	ea92 0f0c 	teq	r2, ip
 800092c:	d101      	bne.n	8000932 <__aeabi_fmul+0x13e>
 800092e:	0242      	lsls	r2, r0, #9
 8000930:	d10f      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000932:	ea93 0f0c 	teq	r3, ip
 8000936:	d103      	bne.n	8000940 <__aeabi_fmul+0x14c>
 8000938:	024b      	lsls	r3, r1, #9
 800093a:	bf18      	it	ne
 800093c:	4608      	movne	r0, r1
 800093e:	d108      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000940:	ea80 0001 	eor.w	r0, r0, r1
 8000944:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000950:	4770      	bx	lr
 8000952:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000956:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800095a:	4770      	bx	lr

0800095c <__aeabi_fdiv>:
 800095c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000964:	bf1e      	ittt	ne
 8000966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800096a:	ea92 0f0c 	teqne	r2, ip
 800096e:	ea93 0f0c 	teqne	r3, ip
 8000972:	d069      	beq.n	8000a48 <__aeabi_fdiv+0xec>
 8000974:	eba2 0203 	sub.w	r2, r2, r3
 8000978:	ea80 0c01 	eor.w	ip, r0, r1
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000982:	d037      	beq.n	80009f4 <__aeabi_fdiv+0x98>
 8000984:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000988:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800098c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000990:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000994:	428b      	cmp	r3, r1
 8000996:	bf38      	it	cc
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800099e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80009a2:	428b      	cmp	r3, r1
 80009a4:	bf24      	itt	cs
 80009a6:	1a5b      	subcs	r3, r3, r1
 80009a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009b0:	bf24      	itt	cs
 80009b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009be:	bf24      	itt	cs
 80009c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009cc:	bf24      	itt	cs
 80009ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	bf18      	it	ne
 80009da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009de:	d1e0      	bne.n	80009a2 <__aeabi_fdiv+0x46>
 80009e0:	2afd      	cmp	r2, #253	@ 0xfd
 80009e2:	f63f af50 	bhi.w	8000886 <__aeabi_fmul+0x92>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fc:	327f      	adds	r2, #127	@ 0x7f
 80009fe:	bfc2      	ittt	gt
 8000a00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a08:	4770      	bxgt	lr
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	3a01      	subs	r2, #1
 8000a14:	e737      	b.n	8000886 <__aeabi_fmul+0x92>
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fdiv+0xc2>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fdiv+0xda>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e795      	b.n	8000974 <__aeabi_fdiv+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	d108      	bne.n	8000a64 <__aeabi_fdiv+0x108>
 8000a52:	0242      	lsls	r2, r0, #9
 8000a54:	f47f af7d 	bne.w	8000952 <__aeabi_fmul+0x15e>
 8000a58:	ea93 0f0c 	teq	r3, ip
 8000a5c:	f47f af70 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e776      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a64:	ea93 0f0c 	teq	r3, ip
 8000a68:	d104      	bne.n	8000a74 <__aeabi_fdiv+0x118>
 8000a6a:	024b      	lsls	r3, r1, #9
 8000a6c:	f43f af4c 	beq.w	8000908 <__aeabi_fmul+0x114>
 8000a70:	4608      	mov	r0, r1
 8000a72:	e76e      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a78:	bf18      	it	ne
 8000a7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a7e:	d1ca      	bne.n	8000a16 <__aeabi_fdiv+0xba>
 8000a80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000a84:	f47f af5c 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000a8c:	f47f af3c 	bne.w	8000908 <__aeabi_fmul+0x114>
 8000a90:	e75f      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a92:	bf00      	nop

08000a94 <__gesf2>:
 8000a94:	f04f 3cff 	mov.w	ip, #4294967295
 8000a98:	e006      	b.n	8000aa8 <__cmpsf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__lesf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	e002      	b.n	8000aa8 <__cmpsf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__cmpsf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ab0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab8:	bf18      	it	ne
 8000aba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abe:	d011      	beq.n	8000ae4 <__cmpsf2+0x40>
 8000ac0:	b001      	add	sp, #4
 8000ac2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ac6:	bf18      	it	ne
 8000ac8:	ea90 0f01 	teqne	r0, r1
 8000acc:	bf58      	it	pl
 8000ace:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ad2:	bf88      	it	hi
 8000ad4:	17c8      	asrhi	r0, r1, #31
 8000ad6:	bf38      	it	cc
 8000ad8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000adc:	bf18      	it	ne
 8000ade:	f040 0001 	orrne.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ae8:	d102      	bne.n	8000af0 <__cmpsf2+0x4c>
 8000aea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000aee:	d105      	bne.n	8000afc <__cmpsf2+0x58>
 8000af0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000af4:	d1e4      	bne.n	8000ac0 <__cmpsf2+0x1c>
 8000af6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000afa:	d0e1      	beq.n	8000ac0 <__cmpsf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cfrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4608      	mov	r0, r1
 8000b08:	4661      	mov	r1, ip
 8000b0a:	e7ff      	b.n	8000b0c <__aeabi_cfcmpeq>

08000b0c <__aeabi_cfcmpeq>:
 8000b0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b0e:	f7ff ffc9 	bl	8000aa4 <__cmpsf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b1c <__aeabi_fcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_fcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_fcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffd2 	bl	8000b04 <__aeabi_cfrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc8 	bl	8000b04 <__aeabi_cfrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_f2uiz>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	d20e      	bcs.n	8000ba2 <__aeabi_f2uiz+0x22>
 8000b84:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b88:	d30b      	bcc.n	8000ba2 <__aeabi_f2uiz+0x22>
 8000b8a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b92:	d409      	bmi.n	8000ba8 <__aeabi_f2uiz+0x28>
 8000b94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr
 8000ba8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000bac:	d101      	bne.n	8000bb2 <__aeabi_f2uiz+0x32>
 8000bae:	0242      	lsls	r2, r0, #9
 8000bb0:	d102      	bne.n	8000bb8 <__aeabi_f2uiz+0x38>
 8000bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	@ (8000c68 <MX_ADC1_Init+0xa8>)
 8000bd2:	4a26      	ldr	r2, [pc, #152]	@ (8000c6c <MX_ADC1_Init+0xac>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	@ (8000c68 <MX_ADC1_Init+0xa8>)
 8000bd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bde:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <MX_ADC1_Init+0xa8>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be4:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <MX_ADC1_Init+0xa8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_ADC1_Init+0xa8>)
 8000bec:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000bf0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <MX_ADC1_Init+0xa8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_ADC1_Init+0xa8>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bfe:	481a      	ldr	r0, [pc, #104]	@ (8000c68 <MX_ADC1_Init+0xa8>)
 8000c00:	f001 ff24 	bl	8002a4c <HAL_ADC_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c0a:	f001 fc5f 	bl	80024cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4812      	ldr	r0, [pc, #72]	@ (8000c68 <MX_ADC1_Init+0xa8>)
 8000c20:	f002 f9d8 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c2a:	f001 fc4f 	bl	80024cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	4619      	mov	r1, r3
 8000c36:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <MX_ADC1_Init+0xa8>)
 8000c38:	f002 f9cc 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000c42:	f001 fc43 	bl	80024cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c46:	2303      	movs	r3, #3
 8000c48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <MX_ADC1_Init+0xa8>)
 8000c50:	f002 f9c0 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000c5a:	f001 fc37 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000058 	.word	0x20000058
 8000c6c:	40012400 	.word	0x40012400

08000c70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <HAL_ADC_MspInit+0x6c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d121      	bne.n	8000cd4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c90:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <HAL_ADC_MspInit+0x70>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <HAL_ADC_MspInit+0x70>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <HAL_ADC_MspInit+0x70>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <HAL_ADC_MspInit+0x70>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce0 <HAL_ADC_MspInit+0x70>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_ADC_MspInit+0x70>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000cc0:	231c      	movs	r3, #28
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <HAL_ADC_MspInit+0x74>)
 8000cd0:	f002 fe88 	bl	80039e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40012400 	.word	0x40012400
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010800 	.word	0x40010800

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <MX_DMA_Init+0x58>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a13      	ldr	r2, [pc, #76]	@ (8000d40 <MX_DMA_Init+0x58>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_DMA_Init+0x58>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	200c      	movs	r0, #12
 8000d0c:	f002 fbcd 	bl	80034aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d10:	200c      	movs	r0, #12
 8000d12:	f002 fbe6 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	200d      	movs	r0, #13
 8000d1c:	f002 fbc5 	bl	80034aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d20:	200d      	movs	r0, #13
 8000d22:	f002 fbde 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2010      	movs	r0, #16
 8000d2c:	f002 fbbd 	bl	80034aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d30:	2010      	movs	r0, #16
 8000d32:	f002 fbd6 	bl	80034e2 <HAL_NVIC_EnableIRQ>

}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40021000 	.word	0x40021000

08000d44 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_GPIO_Init+0x28>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	4a07      	ldr	r2, [pc, #28]	@ (8000d6c <MX_GPIO_Init+0x28>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6193      	str	r3, [r2, #24]
 8000d56:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <MX_GPIO_Init+0x28>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40021000 	.word	0x40021000

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d76:	f001 fde3 	bl	8002940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7a:	f000 f853 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7e:	f7ff ffe1 	bl	8000d44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d82:	f7ff ffb1 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000d86:	f001 fc29 	bl	80025dc <MX_TIM1_Init>
  MX_ADC1_Init();
 8000d8a:	f7ff ff19 	bl	8000bc0 <MX_ADC1_Init>
  GPIO_Init_PA0_PA1_PA6();
 8000d8e:	f000 f947 	bl	8001020 <GPIO_Init_PA0_PA1_PA6>
  InitFastOutputPins();
 8000d92:	f000 f8ff 	bl	8000f94 <InitFastOutputPins>
  /* USER CODE BEGIN 2 */
  WS28XX_Init(&ws_pa8, &htim1, 36, TIM_CHANNEL_1, WS28XX_LEFT_LED_COUNT);   // Initialize for PA8
 8000d96:	2319      	movs	r3, #25
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	2224      	movs	r2, #36	@ 0x24
 8000d9e:	491c      	ldr	r1, [pc, #112]	@ (8000e10 <main+0xa0>)
 8000da0:	481c      	ldr	r0, [pc, #112]	@ (8000e14 <main+0xa4>)
 8000da2:	f004 fe41 	bl	8005a28 <WS28XX_Init>
  WS28XX_Init(&ws_pa9, &htim1, 36, TIM_CHANNEL_2, WS28XX_MIDDLE_LED_COUNT); // Initialize for PA9 (middle strip)
 8000da6:	2398      	movs	r3, #152	@ 0x98
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2304      	movs	r3, #4
 8000dac:	2224      	movs	r2, #36	@ 0x24
 8000dae:	4918      	ldr	r1, [pc, #96]	@ (8000e10 <main+0xa0>)
 8000db0:	4819      	ldr	r0, [pc, #100]	@ (8000e18 <main+0xa8>)
 8000db2:	f004 fe39 	bl	8005a28 <WS28XX_Init>
  WS28XX_Init(&ws_pa10, &htim1, 36, TIM_CHANNEL_3, WS28XX_RIGHT_LED_COUNT); // Initialize for PA10
 8000db6:	2319      	movs	r3, #25
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2308      	movs	r3, #8
 8000dbc:	2224      	movs	r2, #36	@ 0x24
 8000dbe:	4914      	ldr	r1, [pc, #80]	@ (8000e10 <main+0xa0>)
 8000dc0:	4816      	ldr	r0, [pc, #88]	@ (8000e1c <main+0xac>)
 8000dc2:	f004 fe31 	bl	8005a28 <WS28XX_Init>
  SetGPIOHigh(GPIOA, GPIO_PIN_0);  //  Horn Off
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4815      	ldr	r0, [pc, #84]	@ (8000e20 <main+0xb0>)
 8000dca:	f000 fefd 	bl	8001bc8 <SetGPIOHigh>
  SetGPIOHigh(GPIOA, GPIO_PIN_1);  //  Head Lamp off
 8000dce:	2102      	movs	r1, #2
 8000dd0:	4813      	ldr	r0, [pc, #76]	@ (8000e20 <main+0xb0>)
 8000dd2:	f000 fef9 	bl	8001bc8 <SetGPIOHigh>
  SetGPIOHigh(GPIOA, GPIO_PIN_6);  //  in Low Beam Mode
 8000dd6:	2140      	movs	r1, #64	@ 0x40
 8000dd8:	4811      	ldr	r0, [pc, #68]	@ (8000e20 <main+0xb0>)
 8000dda:	f000 fef5 	bl	8001bc8 <SetGPIOHigh>
  Init_InputPins();
 8000dde:	f000 f877 	bl	8000ed0 <Init_InputPins>
       // UART_ReceiveAndProcess();

	// ========================
	// Handle Inputs and Update Flags
	// ========================
	readBrakeSwitch();
 8000de2:	f001 fa41 	bl	8002268 <readBrakeSwitch>
	readSteeringControls();
 8000de6:	f000 ffc7 	bl	8001d78 <readSteeringControls>
	readHorn();
 8000dea:	f001 fa5b 	bl	80022a4 <readHorn>
	readReverseGear();
 8000dee:	f001 fa75 	bl	80022dc <readReverseGear>
	readHazardSwitch();
 8000df2:	f000 ff6d 	bl	8001cd0 <readHazardSwitch>
	    Handle_TestMode();  // Call the test mode handler
	#endif
	// ========================
	// Handle State Machines
	// ========================
	  HandleMiddleStripState();
 8000df6:	f000 f95f 	bl	80010b8 <HandleMiddleStripState>
	  HandleLeftStripState();
 8000dfa:	f000 f9e7 	bl	80011cc <HandleLeftStripState>
	  HandleRightStripState();
 8000dfe:	f000 fa9d 	bl	800133c <HandleRightStripState>
	  HandleHornState();
 8000e02:	f000 ff01 	bl	8001c08 <HandleHornState>
	  HandleHeadlampState();
 8000e06:	f000 ff23 	bl	8001c50 <HandleHeadlampState>
	readBrakeSwitch();
 8000e0a:	bf00      	nop
 8000e0c:	e7e9      	b.n	8000de2 <main+0x72>
 8000e0e:	bf00      	nop
 8000e10:	20003494 	.word	0x20003494
 8000e14:	20000088 	.word	0x20000088
 8000e18:	20001194 	.word	0x20001194
 8000e1c:	200022a0 	.word	0x200022a0
 8000e20:	40010800 	.word	0x40010800

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b094      	sub	sp, #80	@ 0x50
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e2e:	2228      	movs	r2, #40	@ 0x28
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f005 f81f 	bl	8005e76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e54:	2302      	movs	r3, #2
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e60:	2302      	movs	r3, #2
 8000e62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e64:	2300      	movs	r3, #0
 8000e66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e68:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 ff6a 	bl	8003d4c <HAL_RCC_OscConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000e7e:	f001 fb25 	bl	80024cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e82:	230f      	movs	r3, #15
 8000e84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 f9d7 	bl	8004250 <HAL_RCC_ClockConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ea8:	f001 fb10 	bl	80024cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eac:	2302      	movs	r3, #2
 8000eae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000eb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000eb4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fb43 	bl	8004544 <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ec4:	f001 fb02 	bl	80024cc <Error_Handler>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3750      	adds	r7, #80	@ 0x50
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <Init_InputPins>:


/* USER CODE BEGIN 4 */
void Init_InputPins(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]

    // Enable clock for GPIO ports
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee4:	4b28      	ldr	r3, [pc, #160]	@ (8000f88 <Init_InputPins+0xb8>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a27      	ldr	r2, [pc, #156]	@ (8000f88 <Init_InputPins+0xb8>)
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <Init_InputPins+0xb8>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <Init_InputPins+0xb8>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a21      	ldr	r2, [pc, #132]	@ (8000f88 <Init_InputPins+0xb8>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <Init_InputPins+0xb8>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]

    // PB12 (Horn), PB13 (Hazard), PB3 (Brake fluid): Floating if inactive, pulled down when active
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_3;
 8000f14:	f243 0308 	movw	r3, #12296	@ 0x3008
 8000f18:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	4619      	mov	r1, r3
 8000f28:	4818      	ldr	r0, [pc, #96]	@ (8000f8c <Init_InputPins+0xbc>)
 8000f2a:	f002 fd5b 	bl	80039e4 <HAL_GPIO_Init>

    // PB15 (Brake) (3.3V when inactive, GND when brake switch pressed)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f32:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <Init_InputPins+0xbc>)
 8000f44:	f002 fd4e 	bl	80039e4 <HAL_GPIO_Init>

    // PA12 (Reverse): Pulled up when active
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f4c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <Init_InputPins+0xc0>)
 8000f5e:	f002 fd41 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f62:	2304      	movs	r3, #4
 8000f64:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull mode
 8000f66:	2301      	movs	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // High-speed configuration
 8000f6e:	2302      	movs	r3, #2
 8000f70:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	4619      	mov	r1, r3
 8000f78:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <Init_InputPins+0xbc>)
 8000f7a:	f002 fd33 	bl	80039e4 <HAL_GPIO_Init>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	40010800 	.word	0x40010800

08000f94 <InitFastOutputPins>:

void InitFastOutputPins(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]

    // Enable the GPIOB clock
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <InitFastOutputPins+0x84>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a1a      	ldr	r2, [pc, #104]	@ (8001018 <InitFastOutputPins+0x84>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <InitFastOutputPins+0x84>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]

    // Configure PB4 to PB9 as fast outputs with pull-down resistors
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8000fc0:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8000fc4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull mode
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;       // Enable pull-down resistors
 8000fca:	2302      	movs	r3, #2
 8000fcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; // High-speed configuration
 8000fce:	2303      	movs	r3, #3
 8000fd0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4810      	ldr	r0, [pc, #64]	@ (800101c <InitFastOutputPins+0x88>)
 8000fda:	f002 fd03 	bl	80039e4 <HAL_GPIO_Init>

    // Set all pins to their default inactive state (low)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8000fe4:	480d      	ldr	r0, [pc, #52]	@ (800101c <InitFastOutputPins+0x88>)
 8000fe6:	f002 fe98 	bl	8003d1a <HAL_GPIO_WritePin>




    // Configure PB4 to PB9 as fast outputs with pull-down resistors
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fea:	2302      	movs	r3, #2
 8000fec:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull mode
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; // High-speed configuration
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4619      	mov	r1, r3
 8001000:	4806      	ldr	r0, [pc, #24]	@ (800101c <InitFastOutputPins+0x88>)
 8001002:	f002 fcef 	bl	80039e4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Driving relay, inactive state is GPIO pin set
 8001006:	2201      	movs	r2, #1
 8001008:	2102      	movs	r1, #2
 800100a:	4804      	ldr	r0, [pc, #16]	@ (800101c <InitFastOutputPins+0x88>)
 800100c:	f002 fe85 	bl	8003d1a <HAL_GPIO_WritePin>
}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	40010c00 	.word	0x40010c00

08001020 <GPIO_Init_PA0_PA1_PA6>:

void GPIO_Init_PA0_PA1_PA6(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (assuming it's AHB1 on your microcontroller)
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // Enable clock for GPIOA
 8001024:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <GPIO_Init_PA0_PA1_PA6+0x90>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <GPIO_Init_PA0_PA1_PA6+0x90>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6193      	str	r3, [r2, #24]

    // Configure PA0, PA1, PA6 as output, push-pull, high-speed

    // PA0 Configuration
    GPIOA->CRL &= ~GPIO_CRL_CNF0;   // Clear CNF0[1:0] (set as push-pull)
 8001030:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a1f      	ldr	r2, [pc, #124]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 8001036:	f023 030c 	bic.w	r3, r3, #12
 800103a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_MODE0_1 | GPIO_CRL_MODE0_0;  // Set MODE0 to 11 (high-speed output 50 MHz)
 800103c:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1c      	ldr	r2, [pc, #112]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 8001042:	f043 0303 	orr.w	r3, r3, #3
 8001046:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= GPIO_ODR_ODR0;  // Set PA0 high
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	4a19      	ldr	r2, [pc, #100]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	60d3      	str	r3, [r2, #12]


    // PA1 Configuration
    GPIOA->CRL &= ~GPIO_CRL_CNF1;   // Clear CNF1[1:0] (set as push-pull)
 8001054:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a16      	ldr	r2, [pc, #88]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 800105a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800105e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_MODE1_1 | GPIO_CRL_MODE1_0;  // Set MODE1 to 11 (high-speed output 50 MHz)
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a13      	ldr	r2, [pc, #76]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 8001066:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800106a:	6013      	str	r3, [r2, #0]

    // PA6 Configuration
    GPIOA->CRL &= ~GPIO_CRL_CNF6;   // Clear CNF6[1:0] (set as push-pull)
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 8001072:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001076:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_MODE6_1 | GPIO_CRL_MODE6_0;  // Set MODE6 to 11 (high-speed output 50 MHz)
 8001078:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 800107e:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8001082:	6013      	str	r3, [r2, #0]

    // Set PA0, PA1, PA6 initially to high (deactivate relays)
    GPIOA->ODR |= GPIO_ODR_ODR0;  // Set PA0 high
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	60d3      	str	r3, [r2, #12]
    GPIOA->ODR |= GPIO_ODR_ODR1;  // Set PA1 high
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	4a07      	ldr	r2, [pc, #28]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	60d3      	str	r3, [r2, #12]
    GPIOA->ODR |= GPIO_ODR_ODR6;  // Set PA6 high
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <GPIO_Init_PA0_PA1_PA6+0x94>)
 80010a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010800 	.word	0x40010800

080010b8 <HandleMiddleStripState>:

void HandleMiddleStripState(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	// Adjusted priority code for setting current_mode_pa9
	if (charging_signal_received) {
 80010bc:	4b3a      	ldr	r3, [pc, #232]	@ (80011a8 <HandleMiddleStripState+0xf0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HandleMiddleStripState+0x14>
	    current_mode_pa9 = CHARGING_MODE;  // Highest priority: Charging mode
 80010c4:	4b39      	ldr	r3, [pc, #228]	@ (80011ac <HandleMiddleStripState+0xf4>)
 80010c6:	2204      	movs	r2, #4
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e01a      	b.n	8001102 <HandleMiddleStripState+0x4a>
	} else if (drl_signal_received) {
 80010cc:	4b38      	ldr	r3, [pc, #224]	@ (80011b0 <HandleMiddleStripState+0xf8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HandleMiddleStripState+0x24>
	    current_mode_pa9 = DRL_MODE;       // Next priority: DRL mode if charging is inactive
 80010d4:	4b35      	ldr	r3, [pc, #212]	@ (80011ac <HandleMiddleStripState+0xf4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e012      	b.n	8001102 <HandleMiddleStripState+0x4a>
	} else if (breathing_signal_received) {
 80010dc:	4b35      	ldr	r3, [pc, #212]	@ (80011b4 <HandleMiddleStripState+0xfc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HandleMiddleStripState+0x34>
	    current_mode_pa9 = BREATHING_MODE; // Next: Breathing mode if no charging or DRL
 80010e4:	4b31      	ldr	r3, [pc, #196]	@ (80011ac <HandleMiddleStripState+0xf4>)
 80010e6:	2205      	movs	r2, #5
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e00a      	b.n	8001102 <HandleMiddleStripState+0x4a>
	} else if (startup_signal_received){
 80010ec:	4b32      	ldr	r3, [pc, #200]	@ (80011b8 <HandleMiddleStripState+0x100>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HandleMiddleStripState+0x44>
	    current_mode_pa9 = STARTUP_MODE;   // Default to startup mode if no other signals are active
 80010f4:	4b2d      	ldr	r3, [pc, #180]	@ (80011ac <HandleMiddleStripState+0xf4>)
 80010f6:	2203      	movs	r2, #3
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e002      	b.n	8001102 <HandleMiddleStripState+0x4a>
	}else
	{
		current_mode_pa9 = OFF_MODE;
 80010fc:	4b2b      	ldr	r3, [pc, #172]	@ (80011ac <HandleMiddleStripState+0xf4>)
 80010fe:	2206      	movs	r2, #6
 8001100:	701a      	strb	r2, [r3, #0]
	}


    switch (current_mode_pa9) {
 8001102:	4b2a      	ldr	r3, [pc, #168]	@ (80011ac <HandleMiddleStripState+0xf4>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b06      	cmp	r3, #6
 8001108:	d83c      	bhi.n	8001184 <HandleMiddleStripState+0xcc>
 800110a:	a201      	add	r2, pc, #4	@ (adr r2, 8001110 <HandleMiddleStripState+0x58>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	08001143 	.word	0x08001143
 8001114:	08001185 	.word	0x08001185
 8001118:	08001185 	.word	0x08001185
 800111c:	08001159 	.word	0x08001159
 8001120:	0800112d 	.word	0x0800112d
 8001124:	0800114f 	.word	0x0800114f
 8001128:	08001167 	.word	0x08001167
        case CHARGING_MODE:
            UpdateSOCIndication(&ws_pa9, soc_percentage, DC_CHARGING);
 800112c:	4b23      	ldr	r3, [pc, #140]	@ (80011bc <HandleMiddleStripState+0x104>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2202      	movs	r2, #2
 8001132:	4619      	mov	r1, r3
 8001134:	4822      	ldr	r0, [pc, #136]	@ (80011c0 <HandleMiddleStripState+0x108>)
 8001136:	f000 fc43 	bl	80019c0 <UpdateSOCIndication>
            is_drl_displayed_pa9 = 0;
 800113a:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <HandleMiddleStripState+0x10c>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
            break;
 8001140:	e02f      	b.n	80011a2 <HandleMiddleStripState+0xea>
        case DRL_MODE:
            UpdateDRLMode(&ws_pa9, WS28XX_MIDDLE_LED_COUNT, &is_drl_displayed_pa9);
 8001142:	4a20      	ldr	r2, [pc, #128]	@ (80011c4 <HandleMiddleStripState+0x10c>)
 8001144:	2198      	movs	r1, #152	@ 0x98
 8001146:	481e      	ldr	r0, [pc, #120]	@ (80011c0 <HandleMiddleStripState+0x108>)
 8001148:	f000 f9b0 	bl	80014ac <UpdateDRLMode>
            break;
 800114c:	e029      	b.n	80011a2 <HandleMiddleStripState+0xea>
        case BREATHING_MODE:
            BreathingEffect(&ws_pa9, BREATHING_DURATION);  // Custom breathing color
 800114e:	2101      	movs	r1, #1
 8001150:	481b      	ldr	r0, [pc, #108]	@ (80011c0 <HandleMiddleStripState+0x108>)
 8001152:	f000 fbd7 	bl	8001904 <BreathingEffect>
            break;
 8001156:	e024      	b.n	80011a2 <HandleMiddleStripState+0xea>
        case STARTUP_MODE:
            UpdateStartupWaveForMiddle(&ws_pa9);
 8001158:	4819      	ldr	r0, [pc, #100]	@ (80011c0 <HandleMiddleStripState+0x108>)
 800115a:	f000 fa29 	bl	80015b0 <UpdateStartupWaveForMiddle>
            is_drl_displayed_pa9 = 0;
 800115e:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <HandleMiddleStripState+0x10c>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
            break;
 8001164:	e01d      	b.n	80011a2 <HandleMiddleStripState+0xea>
        case OFF_MODE:
            ResetLEDStrip(&ws_pa9, WS28XX_MIDDLE_LED_COUNT);
 8001166:	2198      	movs	r1, #152	@ 0x98
 8001168:	4815      	ldr	r0, [pc, #84]	@ (80011c0 <HandleMiddleStripState+0x108>)
 800116a:	f000 fa03 	bl	8001574 <ResetLEDStrip>
            HAL_Delay(6);
 800116e:	2006      	movs	r0, #6
 8001170:	f001 fc48 	bl	8002a04 <HAL_Delay>
            HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8001174:	2104      	movs	r1, #4
 8001176:	4814      	ldr	r0, [pc, #80]	@ (80011c8 <HandleMiddleStripState+0x110>)
 8001178:	f003 fd9a 	bl	8004cb0 <HAL_TIM_PWM_Stop_DMA>
            is_drl_displayed_pa9 = 0;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <HandleMiddleStripState+0x10c>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
            break;
 8001182:	e00e      	b.n	80011a2 <HandleMiddleStripState+0xea>
        default:
        	ResetLEDStrip(&ws_pa9, WS28XX_MIDDLE_LED_COUNT);
 8001184:	2198      	movs	r1, #152	@ 0x98
 8001186:	480e      	ldr	r0, [pc, #56]	@ (80011c0 <HandleMiddleStripState+0x108>)
 8001188:	f000 f9f4 	bl	8001574 <ResetLEDStrip>
        	HAL_Delay(6);
 800118c:	2006      	movs	r0, #6
 800118e:	f001 fc39 	bl	8002a04 <HAL_Delay>
        	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8001192:	2104      	movs	r1, #4
 8001194:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <HandleMiddleStripState+0x110>)
 8001196:	f003 fd8b 	bl	8004cb0 <HAL_TIM_PWM_Stop_DMA>
        	is_drl_displayed_pa9 = 0;
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HandleMiddleStripState+0x10c>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
    }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200033c8 	.word	0x200033c8
 80011ac:	200033ad 	.word	0x200033ad
 80011b0:	200033cc 	.word	0x200033cc
 80011b4:	200033e8 	.word	0x200033e8
 80011b8:	20000004 	.word	0x20000004
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20001194 	.word	0x20001194
 80011c4:	200033c4 	.word	0x200033c4
 80011c8:	20003494 	.word	0x20003494

080011cc <HandleLeftStripState>:

void HandleLeftStripState(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
    static uint32_t last_blink_time_left = 0;
    uint32_t current_time = HAL_GetTick();
 80011d2:	f001 fc0d 	bl	80029f0 <HAL_GetTick>
 80011d6:	6038      	str	r0, [r7, #0]
    static uint8_t blink_state_left = 0;

    // Priority management for left strip
    if (charging_signal_received) {
 80011d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001314 <HandleLeftStripState+0x148>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00b      	beq.n	80011f8 <HandleLeftStripState+0x2c>
        if (hazard_signal_received) {
 80011e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001318 <HandleLeftStripState+0x14c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HandleLeftStripState+0x24>
            current_mode_pa8 = TURN_SIGNAL_MODE;
 80011e8:	4b4c      	ldr	r3, [pc, #304]	@ (800131c <HandleLeftStripState+0x150>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e022      	b.n	8001236 <HandleLeftStripState+0x6a>
        } else {
            current_mode_pa8 = CHARGING_MODE;
 80011f0:	4b4a      	ldr	r3, [pc, #296]	@ (800131c <HandleLeftStripState+0x150>)
 80011f2:	2204      	movs	r2, #4
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	e01e      	b.n	8001236 <HandleLeftStripState+0x6a>
        }
    } else if (hazard_signal_received || turn_signal_left_received) {
 80011f8:	4b47      	ldr	r3, [pc, #284]	@ (8001318 <HandleLeftStripState+0x14c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d103      	bne.n	8001208 <HandleLeftStripState+0x3c>
 8001200:	4b47      	ldr	r3, [pc, #284]	@ (8001320 <HandleLeftStripState+0x154>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HandleLeftStripState+0x44>
//        current_mode_pa8 = HAZARD_LIGHT_MODE;
    	current_mode_pa8 = TURN_SIGNAL_MODE;
 8001208:	4b44      	ldr	r3, [pc, #272]	@ (800131c <HandleLeftStripState+0x150>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	e012      	b.n	8001236 <HandleLeftStripState+0x6a>
    } else if (drl_signal_received && !hazard_signal_received && !turn_signal_left_received) {
 8001210:	4b44      	ldr	r3, [pc, #272]	@ (8001324 <HandleLeftStripState+0x158>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00b      	beq.n	8001230 <HandleLeftStripState+0x64>
 8001218:	4b3f      	ldr	r3, [pc, #252]	@ (8001318 <HandleLeftStripState+0x14c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d107      	bne.n	8001230 <HandleLeftStripState+0x64>
 8001220:	4b3f      	ldr	r3, [pc, #252]	@ (8001320 <HandleLeftStripState+0x154>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <HandleLeftStripState+0x64>
        current_mode_pa8 = DRL_MODE;
 8001228:	4b3c      	ldr	r3, [pc, #240]	@ (800131c <HandleLeftStripState+0x150>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
 800122e:	e002      	b.n	8001236 <HandleLeftStripState+0x6a>
    } else {
        current_mode_pa8 = OFF_MODE;
 8001230:	4b3a      	ldr	r3, [pc, #232]	@ (800131c <HandleLeftStripState+0x150>)
 8001232:	2206      	movs	r2, #6
 8001234:	701a      	strb	r2, [r3, #0]
    }

    // State machine for left strip (PA8)
    switch (current_mode_pa8) {
 8001236:	4b39      	ldr	r3, [pc, #228]	@ (800131c <HandleLeftStripState+0x150>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b06      	cmp	r3, #6
 800123c:	d861      	bhi.n	8001302 <HandleLeftStripState+0x136>
 800123e:	a201      	add	r2, pc, #4	@ (adr r2, 8001244 <HandleLeftStripState+0x78>)
 8001240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001244:	080012db 	.word	0x080012db
 8001248:	08001271 	.word	0x08001271
 800124c:	08001303 	.word	0x08001303
 8001250:	08001303 	.word	0x08001303
 8001254:	08001261 	.word	0x08001261
 8001258:	08001303 	.word	0x08001303
 800125c:	080012ed 	.word	0x080012ed
        case CHARGING_MODE:
            ResetLEDStrip(&ws_pa8, WS28XX_LEFT_LED_COUNT);
 8001260:	2119      	movs	r1, #25
 8001262:	4831      	ldr	r0, [pc, #196]	@ (8001328 <HandleLeftStripState+0x15c>)
 8001264:	f000 f986 	bl	8001574 <ResetLEDStrip>
            is_drl_displayed_pa8 = 0;
 8001268:	4b30      	ldr	r3, [pc, #192]	@ (800132c <HandleLeftStripState+0x160>)
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
            break;
 800126e:	e04c      	b.n	800130a <HandleLeftStripState+0x13e>
////            }
////            is_drl_displayed_pa8 = 0; // Reset DRL flag
//            break;

        case TURN_SIGNAL_MODE:
            if (current_time - last_blink_time_left >= HAZARD_BLINK_DELAY) {
 8001270:	4b2f      	ldr	r3, [pc, #188]	@ (8001330 <HandleLeftStripState+0x164>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800127c:	d329      	bcc.n	80012d2 <HandleLeftStripState+0x106>
                blink_state_left = !blink_state_left; // Toggle blink state
 800127e:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <HandleLeftStripState+0x168>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	bf0c      	ite	eq
 8001286:	2301      	moveq	r3, #1
 8001288:	2300      	movne	r3, #0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <HandleLeftStripState+0x168>)
 8001290:	701a      	strb	r2, [r3, #0]
                if (blink_state_left)
 8001292:	4b28      	ldr	r3, [pc, #160]	@ (8001334 <HandleLeftStripState+0x168>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d014      	beq.n	80012c4 <HandleLeftStripState+0xf8>
                {
                    // Set all LEDs to amber
                    for (int i = 0; i < WS28XX_LEFT_LED_COUNT; i++) {
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	e00a      	b.n	80012b6 <HandleLeftStripState+0xea>
                        WS28XX_SetPixel_RGBW_565(&ws_pa8, i, COLOR_RGB565_AMBER, 255);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	b299      	uxth	r1, r3
 80012a4:	23ff      	movs	r3, #255	@ 0xff
 80012a6:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 80012aa:	481f      	ldr	r0, [pc, #124]	@ (8001328 <HandleLeftStripState+0x15c>)
 80012ac:	f004 fc9a 	bl	8005be4 <WS28XX_SetPixel_RGBW_565>
                    for (int i = 0; i < WS28XX_LEFT_LED_COUNT; i++) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3301      	adds	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b18      	cmp	r3, #24
 80012ba:	ddf1      	ble.n	80012a0 <HandleLeftStripState+0xd4>
                    }
                    WS28XX_Update(&ws_pa8);
 80012bc:	481a      	ldr	r0, [pc, #104]	@ (8001328 <HandleLeftStripState+0x15c>)
 80012be:	f004 fd67 	bl	8005d90 <WS28XX_Update>
 80012c2:	e003      	b.n	80012cc <HandleLeftStripState+0x100>
                } else
                {
                    // Reset all LEDs to off
                    ResetLEDStrip(&ws_pa8, WS28XX_LEFT_LED_COUNT);
 80012c4:	2119      	movs	r1, #25
 80012c6:	4818      	ldr	r0, [pc, #96]	@ (8001328 <HandleLeftStripState+0x15c>)
 80012c8:	f000 f954 	bl	8001574 <ResetLEDStrip>
                }
                last_blink_time_left = current_time; // Update last blink timestamp
 80012cc:	4a18      	ldr	r2, [pc, #96]	@ (8001330 <HandleLeftStripState+0x164>)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6013      	str	r3, [r2, #0]
            }
            is_drl_displayed_pa8 = 0; // Reset DRL flag
 80012d2:	4b16      	ldr	r3, [pc, #88]	@ (800132c <HandleLeftStripState+0x160>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
            break;
 80012d8:	e017      	b.n	800130a <HandleLeftStripState+0x13e>


        case DRL_MODE:
            frame_pa8 = 0;
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <HandleLeftStripState+0x16c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
            UpdateDRLMode(&ws_pa8, WS28XX_LEFT_LED_COUNT, &is_drl_displayed_pa8);
 80012e0:	4a12      	ldr	r2, [pc, #72]	@ (800132c <HandleLeftStripState+0x160>)
 80012e2:	2119      	movs	r1, #25
 80012e4:	4810      	ldr	r0, [pc, #64]	@ (8001328 <HandleLeftStripState+0x15c>)
 80012e6:	f000 f8e1 	bl	80014ac <UpdateDRLMode>
            break;
 80012ea:	e00e      	b.n	800130a <HandleLeftStripState+0x13e>

        case OFF_MODE:
            frame_pa8 = 0;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HandleLeftStripState+0x16c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
            ResetLEDStrip(&ws_pa8, WS28XX_LEFT_LED_COUNT);
 80012f2:	2119      	movs	r1, #25
 80012f4:	480c      	ldr	r0, [pc, #48]	@ (8001328 <HandleLeftStripState+0x15c>)
 80012f6:	f000 f93d 	bl	8001574 <ResetLEDStrip>
            is_drl_displayed_pa8 = 0;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <HandleLeftStripState+0x160>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
            break;
 8001300:	e003      	b.n	800130a <HandleLeftStripState+0x13e>

        default:
            current_mode_pa8 = DRL_MODE;
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HandleLeftStripState+0x150>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
            break;
 8001308:	bf00      	nop
    }
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200033c8 	.word	0x200033c8
 8001318:	200033d0 	.word	0x200033d0
 800131c:	200033ac 	.word	0x200033ac
 8001320:	200033d4 	.word	0x200033d4
 8001324:	200033cc 	.word	0x200033cc
 8001328:	20000088 	.word	0x20000088
 800132c:	200033bc 	.word	0x200033bc
 8001330:	20003450 	.word	0x20003450
 8001334:	20003454 	.word	0x20003454
 8001338:	200033b4 	.word	0x200033b4

0800133c <HandleRightStripState>:

void HandleRightStripState(void) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
    static uint32_t last_blink_time_right = 0;
    uint32_t current_time = HAL_GetTick();
 8001342:	f001 fb55 	bl	80029f0 <HAL_GetTick>
 8001346:	6038      	str	r0, [r7, #0]
    static uint8_t blink_state_right = 0;

    // Priority management for right strip
    if (charging_signal_received) {
 8001348:	4b4e      	ldr	r3, [pc, #312]	@ (8001484 <HandleRightStripState+0x148>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <HandleRightStripState+0x2c>
        if (hazard_signal_received) {
 8001350:	4b4d      	ldr	r3, [pc, #308]	@ (8001488 <HandleRightStripState+0x14c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HandleRightStripState+0x24>
            current_mode_pa10 = TURN_SIGNAL_MODE;
 8001358:	4b4c      	ldr	r3, [pc, #304]	@ (800148c <HandleRightStripState+0x150>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e022      	b.n	80013a6 <HandleRightStripState+0x6a>
        } else {
            current_mode_pa10 = CHARGING_MODE;
 8001360:	4b4a      	ldr	r3, [pc, #296]	@ (800148c <HandleRightStripState+0x150>)
 8001362:	2204      	movs	r2, #4
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	e01e      	b.n	80013a6 <HandleRightStripState+0x6a>
        }
    } else if (hazard_signal_received||turn_signal_right_received) {
 8001368:	4b47      	ldr	r3, [pc, #284]	@ (8001488 <HandleRightStripState+0x14c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d103      	bne.n	8001378 <HandleRightStripState+0x3c>
 8001370:	4b47      	ldr	r3, [pc, #284]	@ (8001490 <HandleRightStripState+0x154>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HandleRightStripState+0x44>
//        current_mode_pa10 = HAZARD_LIGHT_MODE;
//    } else if (turn_signal_right_received && !hazard_signal_received) {
        current_mode_pa10 = TURN_SIGNAL_MODE;
 8001378:	4b44      	ldr	r3, [pc, #272]	@ (800148c <HandleRightStripState+0x150>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	e012      	b.n	80013a6 <HandleRightStripState+0x6a>
    } else if (drl_signal_received && !hazard_signal_received && !turn_signal_right_received) {
 8001380:	4b44      	ldr	r3, [pc, #272]	@ (8001494 <HandleRightStripState+0x158>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00b      	beq.n	80013a0 <HandleRightStripState+0x64>
 8001388:	4b3f      	ldr	r3, [pc, #252]	@ (8001488 <HandleRightStripState+0x14c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <HandleRightStripState+0x64>
 8001390:	4b3f      	ldr	r3, [pc, #252]	@ (8001490 <HandleRightStripState+0x154>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d103      	bne.n	80013a0 <HandleRightStripState+0x64>
        current_mode_pa10 = DRL_MODE;
 8001398:	4b3c      	ldr	r3, [pc, #240]	@ (800148c <HandleRightStripState+0x150>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e002      	b.n	80013a6 <HandleRightStripState+0x6a>
    } else {
        current_mode_pa10 = OFF_MODE;
 80013a0:	4b3a      	ldr	r3, [pc, #232]	@ (800148c <HandleRightStripState+0x150>)
 80013a2:	2206      	movs	r2, #6
 80013a4:	701a      	strb	r2, [r3, #0]
    }

    // State machine for right strip (PA10)
    switch (current_mode_pa10) {
 80013a6:	4b39      	ldr	r3, [pc, #228]	@ (800148c <HandleRightStripState+0x150>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d861      	bhi.n	8001472 <HandleRightStripState+0x136>
 80013ae:	a201      	add	r2, pc, #4	@ (adr r2, 80013b4 <HandleRightStripState+0x78>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	0800144b 	.word	0x0800144b
 80013b8:	080013e1 	.word	0x080013e1
 80013bc:	08001473 	.word	0x08001473
 80013c0:	08001473 	.word	0x08001473
 80013c4:	080013d1 	.word	0x080013d1
 80013c8:	08001473 	.word	0x08001473
 80013cc:	0800145d 	.word	0x0800145d
        case CHARGING_MODE:
            ResetLEDStrip(&ws_pa10, WS28XX_RIGHT_LED_COUNT);
 80013d0:	2119      	movs	r1, #25
 80013d2:	4831      	ldr	r0, [pc, #196]	@ (8001498 <HandleRightStripState+0x15c>)
 80013d4:	f000 f8ce 	bl	8001574 <ResetLEDStrip>
            is_drl_displayed_pa10 = 0;
 80013d8:	4b30      	ldr	r3, [pc, #192]	@ (800149c <HandleRightStripState+0x160>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
            break;
 80013de:	e04c      	b.n	800147a <HandleRightStripState+0x13e>
//            }
//            is_drl_displayed_pa10 = 0; // Reset DRL flag
//            break;

        case TURN_SIGNAL_MODE:
            if (current_time - last_blink_time_right >= HAZARD_BLINK_DELAY) {
 80013e0:	4b2f      	ldr	r3, [pc, #188]	@ (80014a0 <HandleRightStripState+0x164>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013ec:	d329      	bcc.n	8001442 <HandleRightStripState+0x106>
                blink_state_right = !blink_state_right; // Toggle blink state
 80013ee:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <HandleRightStripState+0x168>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	bf0c      	ite	eq
 80013f6:	2301      	moveq	r3, #1
 80013f8:	2300      	movne	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b29      	ldr	r3, [pc, #164]	@ (80014a4 <HandleRightStripState+0x168>)
 8001400:	701a      	strb	r2, [r3, #0]
                if (blink_state_right)
 8001402:	4b28      	ldr	r3, [pc, #160]	@ (80014a4 <HandleRightStripState+0x168>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d014      	beq.n	8001434 <HandleRightStripState+0xf8>
                {
                    // Set all LEDs to amber
                    for (int i = 0; i < WS28XX_RIGHT_LED_COUNT; i++) {
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	e00a      	b.n	8001426 <HandleRightStripState+0xea>
                        WS28XX_SetPixel_RGBW_565(&ws_pa10, i, COLOR_RGB565_AMBER, 255);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	b299      	uxth	r1, r3
 8001414:	23ff      	movs	r3, #255	@ 0xff
 8001416:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 800141a:	481f      	ldr	r0, [pc, #124]	@ (8001498 <HandleRightStripState+0x15c>)
 800141c:	f004 fbe2 	bl	8005be4 <WS28XX_SetPixel_RGBW_565>
                    for (int i = 0; i < WS28XX_RIGHT_LED_COUNT; i++) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3301      	adds	r3, #1
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b18      	cmp	r3, #24
 800142a:	ddf1      	ble.n	8001410 <HandleRightStripState+0xd4>
                    }
                    WS28XX_Update(&ws_pa10);
 800142c:	481a      	ldr	r0, [pc, #104]	@ (8001498 <HandleRightStripState+0x15c>)
 800142e:	f004 fcaf 	bl	8005d90 <WS28XX_Update>
 8001432:	e003      	b.n	800143c <HandleRightStripState+0x100>
                } else
                {
                    // Reset all LEDs to off
                    ResetLEDStrip(&ws_pa10, WS28XX_RIGHT_LED_COUNT);
 8001434:	2119      	movs	r1, #25
 8001436:	4818      	ldr	r0, [pc, #96]	@ (8001498 <HandleRightStripState+0x15c>)
 8001438:	f000 f89c 	bl	8001574 <ResetLEDStrip>
                }
                last_blink_time_right = current_time; // Update last blink timestamp
 800143c:	4a18      	ldr	r2, [pc, #96]	@ (80014a0 <HandleRightStripState+0x164>)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	6013      	str	r3, [r2, #0]
            }
            is_drl_displayed_pa10 = 0; // Reset DRL flag
 8001442:	4b16      	ldr	r3, [pc, #88]	@ (800149c <HandleRightStripState+0x160>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
            break;
 8001448:	e017      	b.n	800147a <HandleRightStripState+0x13e>

        case DRL_MODE:
            frame_pa10 = 0;
 800144a:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <HandleRightStripState+0x16c>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
            UpdateDRLMode(&ws_pa10, WS28XX_RIGHT_LED_COUNT, &is_drl_displayed_pa10);
 8001450:	4a12      	ldr	r2, [pc, #72]	@ (800149c <HandleRightStripState+0x160>)
 8001452:	2119      	movs	r1, #25
 8001454:	4810      	ldr	r0, [pc, #64]	@ (8001498 <HandleRightStripState+0x15c>)
 8001456:	f000 f829 	bl	80014ac <UpdateDRLMode>
            break;
 800145a:	e00e      	b.n	800147a <HandleRightStripState+0x13e>

        case OFF_MODE:
            frame_pa10 = 0;
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HandleRightStripState+0x16c>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
            ResetLEDStrip(&ws_pa10, WS28XX_RIGHT_LED_COUNT);
 8001462:	2119      	movs	r1, #25
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <HandleRightStripState+0x15c>)
 8001466:	f000 f885 	bl	8001574 <ResetLEDStrip>
            is_drl_displayed_pa10 = 0;
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <HandleRightStripState+0x160>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
            break;
 8001470:	e003      	b.n	800147a <HandleRightStripState+0x13e>

        default:
            current_mode_pa10 = DRL_MODE;
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HandleRightStripState+0x150>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
            break;
 8001478:	bf00      	nop
    }
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200033c8 	.word	0x200033c8
 8001488:	200033d0 	.word	0x200033d0
 800148c:	200033ae 	.word	0x200033ae
 8001490:	200033d8 	.word	0x200033d8
 8001494:	200033cc 	.word	0x200033cc
 8001498:	200022a0 	.word	0x200022a0
 800149c:	200033c0 	.word	0x200033c0
 80014a0:	20003458 	.word	0x20003458
 80014a4:	2000345c 	.word	0x2000345c
 80014a8:	200033b8 	.word	0x200033b8

080014ac <UpdateDRLMode>:
    }
    WS28XX_Update(ws);
}

void UpdateDRLMode(WS28XX_HandleTypeDef* ws, int pixel_count, int* is_drl_displayed)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
    static uint32_t last_refresh_time = 0;  // Tracks the last refresh time
    uint32_t current_time = HAL_GetTick(); // Get the current tick count
 80014b8:	f001 fa9a 	bl	80029f0 <HAL_GetTick>
 80014bc:	6178      	str	r0, [r7, #20]

    // Check if DRL mode is already displayed
    if (*is_drl_displayed) {
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d026      	beq.n	8001514 <UpdateDRLMode+0x68>
        // Refresh the DRL state every 100 ms
        if (current_time - last_refresh_time >= DRL_REFRESH_TIME) {
 80014c6:	4b29      	ldr	r3, [pc, #164]	@ (800156c <UpdateDRLMode+0xc0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014d2:	d346      	bcc.n	8001562 <UpdateDRLMode+0xb6>
            last_refresh_time = current_time;
 80014d4:	4a25      	ldr	r2, [pc, #148]	@ (800156c <UpdateDRLMode+0xc0>)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	6013      	str	r3, [r2, #0]

            // Reset and update DRL LEDs
//            ResetLEDStrip(ws, pixel_count);
            for (int i = 0; i < pixel_count; i++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	e00a      	b.n	80014f6 <UpdateDRLMode+0x4a>
                WS28XX_SetPixel_RGB_888(ws, i, COLOR_RGB888_WHITE);  // Set all LEDs to full white
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80014e8:	4619      	mov	r1, r3
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f004 fb34 	bl	8005b58 <WS28XX_SetPixel_RGB_888>
            for (int i = 0; i < pixel_count; i++) {
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	3301      	adds	r3, #1
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbf0      	blt.n	80014e0 <UpdateDRLMode+0x34>
            }

            WS28XX_Update(ws);  // Refresh the strip with the new DRL state
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f004 fc46 	bl	8005d90 <WS28XX_Update>
            HAL_Delay(6);
 8001504:	2006      	movs	r0, #6
 8001506:	f001 fa7d 	bl	8002a04 <HAL_Delay>
            HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 800150a:	2104      	movs	r1, #4
 800150c:	4818      	ldr	r0, [pc, #96]	@ (8001570 <UpdateDRLMode+0xc4>)
 800150e:	f003 fbcf 	bl	8004cb0 <HAL_TIM_PWM_Stop_DMA>
        }
        return;  // Exit function if DRL is already displayed
 8001512:	e026      	b.n	8001562 <UpdateDRLMode+0xb6>
    }else
    {
        // If DRL is not displayed, initialize DRL mode
        ResetLEDStrip(ws, pixel_count);
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 f82c 	bl	8001574 <ResetLEDStrip>
        for (int i = 0; i < pixel_count; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	e00a      	b.n	8001538 <UpdateDRLMode+0x8c>
            WS28XX_SetPixel_RGB_888(ws, i, COLOR_RGB888_WHITE);  // Set all LEDs to full white
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	b29b      	uxth	r3, r3
 8001526:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800152a:	4619      	mov	r1, r3
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f004 fb13 	bl	8005b58 <WS28XX_SetPixel_RGB_888>
        for (int i = 0; i < pixel_count; i++) {
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	3301      	adds	r3, #1
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf0      	blt.n	8001522 <UpdateDRLMode+0x76>
        }

        WS28XX_Update(ws);  // Refresh the strip with the new DRL state
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f004 fc25 	bl	8005d90 <WS28XX_Update>
        HAL_Delay(6);
 8001546:	2006      	movs	r0, #6
 8001548:	f001 fa5c 	bl	8002a04 <HAL_Delay>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 800154c:	2104      	movs	r1, #4
 800154e:	4808      	ldr	r0, [pc, #32]	@ (8001570 <UpdateDRLMode+0xc4>)
 8001550:	f003 fbae 	bl	8004cb0 <HAL_TIM_PWM_Stop_DMA>

        // Mark DRL as displayed
        *is_drl_displayed = 1;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]
        last_refresh_time = current_time;  // Reset refresh timer
 800155a:	4a04      	ldr	r2, [pc, #16]	@ (800156c <UpdateDRLMode+0xc0>)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e000      	b.n	8001564 <UpdateDRLMode+0xb8>
        return;  // Exit function if DRL is already displayed
 8001562:	bf00      	nop
    }
}
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20003460 	.word	0x20003460
 8001570:	20003494 	.word	0x20003494

08001574 <ResetLEDStrip>:
    HAL_Delay(6);
    WS28XX_Update(&ws_pa10);
}

void ResetLEDStrip(WS28XX_HandleTypeDef* ws, int pixel_count)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < pixel_count; i++) {
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e009      	b.n	8001598 <ResetLEDStrip+0x24>
        WS28XX_SetPixel_RGBW_888(ws, i, COLOR_RGB888_BLACK, 0);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	b299      	uxth	r1, r3
 8001588:	2300      	movs	r3, #0
 800158a:	2200      	movs	r2, #0
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f004 fb9d 	bl	8005ccc <WS28XX_SetPixel_RGBW_888>
    for (int i = 0; i < pixel_count; i++) {
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbf1      	blt.n	8001584 <ResetLEDStrip+0x10>
    }
    WS28XX_Update(ws);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f004 fbf5 	bl	8005d90 <WS28XX_Update>
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <UpdateStartupWaveForMiddle>:

void UpdateStartupWaveForMiddle(WS28XX_HandleTypeDef* ws)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    static int frame_right = MIDDLE_LED_MID_INDEX;  // Start from the middle (right side)
    static uint8_t wave_direction = 0;              // 0 = outward, 1 = inward
    static int last_update_time = 0;                // To control update speed
    static int drl_wave_complete_middle = 0;        // To indicate when DRL transition is complete
    static int sequential_turn_on = 0;              // Counter for sequential turn-on after waves
    int current_time = HAL_GetTick();               // Get the current system time in milliseconds
 80015b8:	f001 fa1a 	bl	80029f0 <HAL_GetTick>
 80015bc:	4603      	mov	r3, r0
 80015be:	60bb      	str	r3, [r7, #8]

    // Phase 1: Wave Animation (Two full passes: outward and inward)
    if (wave_count_middle < 2) {
 80015c0:	4b8e      	ldr	r3, [pc, #568]	@ (80017fc <UpdateStartupWaveForMiddle+0x24c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	f300 8125 	bgt.w	8001814 <UpdateStartupWaveForMiddle+0x264>
        if (current_time - last_update_time >= STARTUP_WAVE_SPEED) {
 80015ca:	4b8d      	ldr	r3, [pc, #564]	@ (8001800 <UpdateStartupWaveForMiddle+0x250>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f340 8183 	ble.w	80018de <UpdateStartupWaveForMiddle+0x32e>
            // Outward wave animation
            if (wave_direction == 0) {
 80015d8:	4b8a      	ldr	r3, [pc, #552]	@ (8001804 <UpdateStartupWaveForMiddle+0x254>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d17d      	bne.n	80016dc <UpdateStartupWaveForMiddle+0x12c>
                // Turn off the previous edge LEDs
                for (int i = 0; i < 4; i++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	e026      	b.n	8001634 <UpdateStartupWaveForMiddle+0x84>
                    if (frame_left + i < MIDDLE_LED_MID_INDEX) {
 80015e6:	4b88      	ldr	r3, [pc, #544]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4413      	add	r3, r2
 80015ee:	2b4b      	cmp	r3, #75	@ 0x4b
 80015f0:	dc0b      	bgt.n	800160a <UpdateStartupWaveForMiddle+0x5a>
                        WS28XX_SetPixel_RGBW_888(ws, frame_left + i, COLOR_RGB888_BLACK, 0);
 80015f2:	4b85      	ldr	r3, [pc, #532]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	b299      	uxth	r1, r3
 8001600:	2300      	movs	r3, #0
 8001602:	2200      	movs	r2, #0
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f004 fb61 	bl	8005ccc <WS28XX_SetPixel_RGBW_888>
                    }
                    if (frame_right - i >= MIDDLE_LED_MID_INDEX) {
 800160a:	4b80      	ldr	r3, [pc, #512]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b4b      	cmp	r3, #75	@ 0x4b
 8001614:	dd0b      	ble.n	800162e <UpdateStartupWaveForMiddle+0x7e>
                        WS28XX_SetPixel_RGBW_888(ws, frame_right - i, COLOR_RGB888_BLACK, 0);
 8001616:	4b7d      	ldr	r3, [pc, #500]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29a      	uxth	r2, r3
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	b29b      	uxth	r3, r3
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	b299      	uxth	r1, r3
 8001624:	2300      	movs	r3, #0
 8001626:	2200      	movs	r2, #0
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f004 fb4f 	bl	8005ccc <WS28XX_SetPixel_RGBW_888>
                for (int i = 0; i < 4; i++) {
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3301      	adds	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b03      	cmp	r3, #3
 8001638:	ddd5      	ble.n	80015e6 <UpdateStartupWaveForMiddle+0x36>
                    }
                }

                // Turn on the new edge LEDs
                for (int i = 0; i < 4; i++) {
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	e028      	b.n	8001692 <UpdateStartupWaveForMiddle+0xe2>
                    if (frame_left - i >= 0) {
 8001640:	4b71      	ldr	r3, [pc, #452]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0c      	blt.n	8001666 <UpdateStartupWaveForMiddle+0xb6>
                        WS28XX_SetPixel_RGBW_888(ws, frame_left - i, COLOR_RGB888_WHITE, DRL_BRIGHTNESS);
 800164c:	4b6e      	ldr	r3, [pc, #440]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29a      	uxth	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	b29b      	uxth	r3, r3
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	b299      	uxth	r1, r3
 800165a:	23c8      	movs	r3, #200	@ 0xc8
 800165c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f004 fb33 	bl	8005ccc <WS28XX_SetPixel_RGBW_888>
                    }
                    if (frame_right + i < WS28XX_MIDDLE_LED_COUNT) {
 8001666:	4b69      	ldr	r3, [pc, #420]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	4413      	add	r3, r2
 800166e:	2b97      	cmp	r3, #151	@ 0x97
 8001670:	dc0c      	bgt.n	800168c <UpdateStartupWaveForMiddle+0xdc>
                        WS28XX_SetPixel_RGBW_888(ws, frame_right + i, COLOR_RGB888_WHITE, DRL_BRIGHTNESS);
 8001672:	4b66      	ldr	r3, [pc, #408]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29a      	uxth	r2, r3
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4413      	add	r3, r2
 800167e:	b299      	uxth	r1, r3
 8001680:	23c8      	movs	r3, #200	@ 0xc8
 8001682:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f004 fb20 	bl	8005ccc <WS28XX_SetPixel_RGBW_888>
                for (int i = 0; i < 4; i++) {
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	3301      	adds	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	2b03      	cmp	r3, #3
 8001696:	ddd3      	ble.n	8001640 <UpdateStartupWaveForMiddle+0x90>
                    }
                }

                WS28XX_Update(ws);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f004 fb79 	bl	8005d90 <WS28XX_Update>
                HAL_Delay(6);
 800169e:	2006      	movs	r0, #6
 80016a0:	f001 f9b0 	bl	8002a04 <HAL_Delay>
                HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 80016a4:	2104      	movs	r1, #4
 80016a6:	485a      	ldr	r0, [pc, #360]	@ (8001810 <UpdateStartupWaveForMiddle+0x260>)
 80016a8:	f003 fb02 	bl	8004cb0 <HAL_TIM_PWM_Stop_DMA>

                frame_left--;
 80016ac:	4b56      	ldr	r3, [pc, #344]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	4a55      	ldr	r2, [pc, #340]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 80016b4:	6013      	str	r3, [r2, #0]
                frame_right++;
 80016b6:	4b55      	ldr	r3, [pc, #340]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a53      	ldr	r2, [pc, #332]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 80016be:	6013      	str	r3, [r2, #0]

                if (frame_left < 0 && frame_right >= WS28XX_MIDDLE_LED_COUNT) {
 80016c0:	4b51      	ldr	r3, [pc, #324]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f280 8094 	bge.w	80017f2 <UpdateStartupWaveForMiddle+0x242>
 80016ca:	4b50      	ldr	r3, [pc, #320]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b97      	cmp	r3, #151	@ 0x97
 80016d0:	f340 808f 	ble.w	80017f2 <UpdateStartupWaveForMiddle+0x242>
                    wave_direction = 1;  // Switch to inward direction
 80016d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001804 <UpdateStartupWaveForMiddle+0x254>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	e08a      	b.n	80017f2 <UpdateStartupWaveForMiddle+0x242>
                }
            }
            // Inward wave animation
            else if (wave_direction == 1) {
 80016dc:	4b49      	ldr	r3, [pc, #292]	@ (8001804 <UpdateStartupWaveForMiddle+0x254>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	f040 8086 	bne.w	80017f2 <UpdateStartupWaveForMiddle+0x242>
                // Turn off the previous edge LEDs
                for (int i = 0; i < 4; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e026      	b.n	800173a <UpdateStartupWaveForMiddle+0x18a>
                    if (frame_left - i >= 0) {
 80016ec:	4b46      	ldr	r3, [pc, #280]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0b      	blt.n	8001710 <UpdateStartupWaveForMiddle+0x160>
                        WS28XX_SetPixel_RGBW_888(ws, frame_left - i, COLOR_RGB888_BLACK, 0);
 80016f8:	4b43      	ldr	r3, [pc, #268]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	b29b      	uxth	r3, r3
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	b299      	uxth	r1, r3
 8001706:	2300      	movs	r3, #0
 8001708:	2200      	movs	r2, #0
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f004 fade 	bl	8005ccc <WS28XX_SetPixel_RGBW_888>
                    }
                    if (frame_right + i < WS28XX_MIDDLE_LED_COUNT) {
 8001710:	4b3e      	ldr	r3, [pc, #248]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	4413      	add	r3, r2
 8001718:	2b97      	cmp	r3, #151	@ 0x97
 800171a:	dc0b      	bgt.n	8001734 <UpdateStartupWaveForMiddle+0x184>
                        WS28XX_SetPixel_RGBW_888(ws, frame_right + i, COLOR_RGB888_BLACK, 0);
 800171c:	4b3b      	ldr	r3, [pc, #236]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	b29a      	uxth	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	b29b      	uxth	r3, r3
 8001726:	4413      	add	r3, r2
 8001728:	b299      	uxth	r1, r3
 800172a:	2300      	movs	r3, #0
 800172c:	2200      	movs	r2, #0
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f004 facc 	bl	8005ccc <WS28XX_SetPixel_RGBW_888>
                for (int i = 0; i < 4; i++) {
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2b03      	cmp	r3, #3
 800173e:	ddd5      	ble.n	80016ec <UpdateStartupWaveForMiddle+0x13c>
                    }
                }

                // Turn on the new edge LEDs
                for (int i = 0; i < 4; i++) {
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	e028      	b.n	8001798 <UpdateStartupWaveForMiddle+0x1e8>
                    if (frame_left + i < MIDDLE_LED_MID_INDEX) {
 8001746:	4b30      	ldr	r3, [pc, #192]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4413      	add	r3, r2
 800174e:	2b4b      	cmp	r3, #75	@ 0x4b
 8001750:	dc0c      	bgt.n	800176c <UpdateStartupWaveForMiddle+0x1bc>
                        WS28XX_SetPixel_RGBW_888(ws, frame_left + i, COLOR_RGB888_WHITE, DRL_BRIGHTNESS);
 8001752:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29a      	uxth	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	b29b      	uxth	r3, r3
 800175c:	4413      	add	r3, r2
 800175e:	b299      	uxth	r1, r3
 8001760:	23c8      	movs	r3, #200	@ 0xc8
 8001762:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f004 fab0 	bl	8005ccc <WS28XX_SetPixel_RGBW_888>
                    }
                    if (frame_right - i >= MIDDLE_LED_MID_INDEX) {
 800176c:	4b27      	ldr	r3, [pc, #156]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b4b      	cmp	r3, #75	@ 0x4b
 8001776:	dd0c      	ble.n	8001792 <UpdateStartupWaveForMiddle+0x1e2>
                        WS28XX_SetPixel_RGBW_888(ws, frame_right - i, COLOR_RGB888_WHITE, DRL_BRIGHTNESS);
 8001778:	4b24      	ldr	r3, [pc, #144]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	b29a      	uxth	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	b29b      	uxth	r3, r3
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	b299      	uxth	r1, r3
 8001786:	23c8      	movs	r3, #200	@ 0xc8
 8001788:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f004 fa9d 	bl	8005ccc <WS28XX_SetPixel_RGBW_888>
                for (int i = 0; i < 4; i++) {
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	3301      	adds	r3, #1
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b03      	cmp	r3, #3
 800179c:	ddd3      	ble.n	8001746 <UpdateStartupWaveForMiddle+0x196>
                    }
                }

                WS28XX_Update(ws);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f004 faf6 	bl	8005d90 <WS28XX_Update>
                HAL_Delay(6);
 80017a4:	2006      	movs	r0, #6
 80017a6:	f001 f92d 	bl	8002a04 <HAL_Delay>
                HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 80017aa:	2104      	movs	r1, #4
 80017ac:	4818      	ldr	r0, [pc, #96]	@ (8001810 <UpdateStartupWaveForMiddle+0x260>)
 80017ae:	f003 fa7f 	bl	8004cb0 <HAL_TIM_PWM_Stop_DMA>

                frame_left++;
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	4a13      	ldr	r2, [pc, #76]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 80017ba:	6013      	str	r3, [r2, #0]
                frame_right--;
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 80017c4:	6013      	str	r3, [r2, #0]

                if (frame_left >= MIDDLE_LED_MID_INDEX && frame_right <= MIDDLE_LED_MID_INDEX) {
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b4b      	cmp	r3, #75	@ 0x4b
 80017cc:	dd11      	ble.n	80017f2 <UpdateStartupWaveForMiddle+0x242>
 80017ce:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b4c      	cmp	r3, #76	@ 0x4c
 80017d4:	dc0d      	bgt.n	80017f2 <UpdateStartupWaveForMiddle+0x242>
                    frame_left = MIDDLE_LED_MID_INDEX;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <UpdateStartupWaveForMiddle+0x258>)
 80017d8:	224c      	movs	r2, #76	@ 0x4c
 80017da:	601a      	str	r2, [r3, #0]
                    frame_right = MIDDLE_LED_MID_INDEX;
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <UpdateStartupWaveForMiddle+0x25c>)
 80017de:	224c      	movs	r2, #76	@ 0x4c
 80017e0:	601a      	str	r2, [r3, #0]
                    wave_direction = 0;  // Reset to outward
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <UpdateStartupWaveForMiddle+0x254>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
                    wave_count_middle++;  // Increment pass count
 80017e8:	4b04      	ldr	r3, [pc, #16]	@ (80017fc <UpdateStartupWaveForMiddle+0x24c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a03      	ldr	r2, [pc, #12]	@ (80017fc <UpdateStartupWaveForMiddle+0x24c>)
 80017f0:	6013      	str	r3, [r2, #0]
                }
            }
            last_update_time = current_time;  // Update time for next wave step
 80017f2:	4a03      	ldr	r2, [pc, #12]	@ (8001800 <UpdateStartupWaveForMiddle+0x250>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	6013      	str	r3, [r2, #0]
        startup_signal_received = 0; // Turn off startup mode after one run
        wave_count_middle = 0;    // Reset wave count for future sequences
        drl_wave_complete_middle = 0;  // Reset DRL completion flag
        sequential_turn_on = 0;   // Reset sequential turn-on counter
    }
}
 80017f8:	e071      	b.n	80018de <UpdateStartupWaveForMiddle+0x32e>
 80017fa:	bf00      	nop
 80017fc:	20003464 	.word	0x20003464
 8001800:	20003468 	.word	0x20003468
 8001804:	2000346c 	.word	0x2000346c
 8001808:	20000020 	.word	0x20000020
 800180c:	20000024 	.word	0x20000024
 8001810:	20003494 	.word	0x20003494
    } else if (!drl_wave_complete_middle) {
 8001814:	4b34      	ldr	r3, [pc, #208]	@ (80018e8 <UpdateStartupWaveForMiddle+0x338>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d136      	bne.n	800188a <UpdateStartupWaveForMiddle+0x2da>
        if (current_time - last_update_time >= STARTUP_WAVE_SPEED * 2) {  // Slower speed for smooth sequential effect
 800181c:	4b33      	ldr	r3, [pc, #204]	@ (80018ec <UpdateStartupWaveForMiddle+0x33c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b01      	cmp	r3, #1
 8001826:	dd5a      	ble.n	80018de <UpdateStartupWaveForMiddle+0x32e>
            WS28XX_SetPixel_RGBW_565(ws, MIDDLE_LED_MID_INDEX - sequential_turn_on, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);
 8001828:	4b31      	ldr	r3, [pc, #196]	@ (80018f0 <UpdateStartupWaveForMiddle+0x340>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	f1c3 034c 	rsb	r3, r3, #76	@ 0x4c
 8001832:	b299      	uxth	r1, r3
 8001834:	23c8      	movs	r3, #200	@ 0xc8
 8001836:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f004 f9d2 	bl	8005be4 <WS28XX_SetPixel_RGBW_565>
            WS28XX_SetPixel_RGBW_565(ws, MIDDLE_LED_MID_INDEX + sequential_turn_on, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);
 8001840:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <UpdateStartupWaveForMiddle+0x340>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	334c      	adds	r3, #76	@ 0x4c
 8001848:	b299      	uxth	r1, r3
 800184a:	23c8      	movs	r3, #200	@ 0xc8
 800184c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f004 f9c7 	bl	8005be4 <WS28XX_SetPixel_RGBW_565>
            WS28XX_Update(ws);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f004 fa9a 	bl	8005d90 <WS28XX_Update>
            HAL_Delay(6);
 800185c:	2006      	movs	r0, #6
 800185e:	f001 f8d1 	bl	8002a04 <HAL_Delay>
            HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8001862:	2104      	movs	r1, #4
 8001864:	4823      	ldr	r0, [pc, #140]	@ (80018f4 <UpdateStartupWaveForMiddle+0x344>)
 8001866:	f003 fa23 	bl	8004cb0 <HAL_TIM_PWM_Stop_DMA>
            sequential_turn_on++;
 800186a:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <UpdateStartupWaveForMiddle+0x340>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4a1f      	ldr	r2, [pc, #124]	@ (80018f0 <UpdateStartupWaveForMiddle+0x340>)
 8001872:	6013      	str	r3, [r2, #0]
            if (sequential_turn_on >= MIDDLE_LED_MID_INDEX) {
 8001874:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <UpdateStartupWaveForMiddle+0x340>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b4b      	cmp	r3, #75	@ 0x4b
 800187a:	dd02      	ble.n	8001882 <UpdateStartupWaveForMiddle+0x2d2>
                drl_wave_complete_middle = 1;  // Mark sequential turn-on complete
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <UpdateStartupWaveForMiddle+0x338>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]
            last_update_time = current_time;  // Update time for next step
 8001882:	4a1a      	ldr	r2, [pc, #104]	@ (80018ec <UpdateStartupWaveForMiddle+0x33c>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	e029      	b.n	80018de <UpdateStartupWaveForMiddle+0x32e>
        for (int i = 0; i < WS28XX_MIDDLE_LED_COUNT; i++) {
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e00a      	b.n	80018a6 <UpdateStartupWaveForMiddle+0x2f6>
            WS28XX_SetPixel_RGBW_565(ws, i, COLOR_RGB565_WHITE, DRL_BRIGHTNESS);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	b299      	uxth	r1, r3
 8001894:	23c8      	movs	r3, #200	@ 0xc8
 8001896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f004 f9a2 	bl	8005be4 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < WS28XX_MIDDLE_LED_COUNT; i++) {
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3301      	adds	r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b97      	cmp	r3, #151	@ 0x97
 80018aa:	ddf1      	ble.n	8001890 <UpdateStartupWaveForMiddle+0x2e0>
        WS28XX_Update(ws);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f004 fa6f 	bl	8005d90 <WS28XX_Update>
        HAL_Delay(6);
 80018b2:	2006      	movs	r0, #6
 80018b4:	f001 f8a6 	bl	8002a04 <HAL_Delay>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 80018b8:	2104      	movs	r1, #4
 80018ba:	480e      	ldr	r0, [pc, #56]	@ (80018f4 <UpdateStartupWaveForMiddle+0x344>)
 80018bc:	f003 f9f8 	bl	8004cb0 <HAL_TIM_PWM_Stop_DMA>
        drl_signal_received = 1;  // Signal that DRL mode is active
 80018c0:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <UpdateStartupWaveForMiddle+0x348>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
        startup_signal_received = 0; // Turn off startup mode after one run
 80018c6:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <UpdateStartupWaveForMiddle+0x34c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
        wave_count_middle = 0;    // Reset wave count for future sequences
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <UpdateStartupWaveForMiddle+0x350>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
        drl_wave_complete_middle = 0;  // Reset DRL completion flag
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <UpdateStartupWaveForMiddle+0x338>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
        sequential_turn_on = 0;   // Reset sequential turn-on counter
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <UpdateStartupWaveForMiddle+0x340>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20003470 	.word	0x20003470
 80018ec:	20003468 	.word	0x20003468
 80018f0:	20003474 	.word	0x20003474
 80018f4:	20003494 	.word	0x20003494
 80018f8:	200033cc 	.word	0x200033cc
 80018fc:	20000004 	.word	0x20000004
 8001900:	20003464 	.word	0x20003464

08001904 <BreathingEffect>:

void BreathingEffect(WS28XX_HandleTypeDef* ws, int duration)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
    static int last_update_time = 0;
    static uint8_t brightness = 0;
    static int increasing = 1; // 1 for increasing, 0 for decreasing
    int current_time = HAL_GetTick();
 800190e:	f001 f86f 	bl	80029f0 <HAL_GetTick>
 8001912:	4603      	mov	r3, r0
 8001914:	60bb      	str	r3, [r7, #8]

    // Adjust duration for smoother transitions
    if (current_time - last_update_time >= duration) {
 8001916:	4b26      	ldr	r3, [pc, #152]	@ (80019b0 <BreathingEffect+0xac>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	dc40      	bgt.n	80019a6 <BreathingEffect+0xa2>
        last_update_time = current_time;
 8001924:	4a22      	ldr	r2, [pc, #136]	@ (80019b0 <BreathingEffect+0xac>)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	6013      	str	r3, [r2, #0]

        // Modify brightness increment/decrement step for smoother effect
        if (increasing) {
 800192a:	4b22      	ldr	r3, [pc, #136]	@ (80019b4 <BreathingEffect+0xb0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00d      	beq.n	800194e <BreathingEffect+0x4a>
            brightness += 1;  // Increase brightness step by 5
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <BreathingEffect+0xb4>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <BreathingEffect+0xb4>)
 800193c:	701a      	strb	r2, [r3, #0]
            if (brightness >= 255) increasing = 0; // Reverse direction
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <BreathingEffect+0xb4>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2bff      	cmp	r3, #255	@ 0xff
 8001944:	d110      	bne.n	8001968 <BreathingEffect+0x64>
 8001946:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <BreathingEffect+0xb0>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e00c      	b.n	8001968 <BreathingEffect+0x64>
        } else {
            brightness -= 1;
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <BreathingEffect+0xb4>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	3b01      	subs	r3, #1
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <BreathingEffect+0xb4>)
 8001958:	701a      	strb	r2, [r3, #0]
            if (brightness <= 0) increasing = 1;  // Reverse direction
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <BreathingEffect+0xb4>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <BreathingEffect+0x64>
 8001962:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <BreathingEffect+0xb0>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]
        }

        // Apply brightness level to each LED
        for (int i = 0; i < ws->MaxPixel; i++) {
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e00b      	b.n	8001986 <BreathingEffect+0x82>
            WS28XX_SetPixel_RGBW_888(ws, i, COLOR_RGB888_WHITE, brightness);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	b299      	uxth	r1, r3
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <BreathingEffect+0xb4>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f004 f9a6 	bl	8005ccc <WS28XX_SetPixel_RGBW_888>
        for (int i = 0; i < ws->MaxPixel; i++) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	895b      	ldrh	r3, [r3, #10]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4293      	cmp	r3, r2
 8001990:	dbed      	blt.n	800196e <BreathingEffect+0x6a>
        }

        WS28XX_Update(ws);  // Refresh LED strip with current brightness level
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f004 f9fc 	bl	8005d90 <WS28XX_Update>
        HAL_Delay(6);
 8001998:	2006      	movs	r0, #6
 800199a:	f001 f833 	bl	8002a04 <HAL_Delay>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 800199e:	2104      	movs	r1, #4
 80019a0:	4806      	ldr	r0, [pc, #24]	@ (80019bc <BreathingEffect+0xb8>)
 80019a2:	f003 f985 	bl	8004cb0 <HAL_TIM_PWM_Stop_DMA>
    }
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20003478 	.word	0x20003478
 80019b4:	20000028 	.word	0x20000028
 80019b8:	2000347c 	.word	0x2000347c
 80019bc:	20003494 	.word	0x20003494

080019c0 <UpdateSOCIndication>:

void UpdateSOCIndication(WS28XX_HandleTypeDef* ws, int soc_percentage, int charging_type) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	@ 0x30
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
    static int last_update_time = 0;
    static uint8_t charging_blink_state = 0;
    int current_time = HAL_GetTick();
 80019cc:	f001 f810 	bl	80029f0 <HAL_GetTick>
 80019d0:	4603      	mov	r3, r0
 80019d2:	623b      	str	r3, [r7, #32]
    int led_count_to_light = (WS28XX_MIDDLE_LED_COUNT * soc_percentage) / 100;
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2298      	movs	r2, #152	@ 0x98
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	4a76      	ldr	r2, [pc, #472]	@ (8001bb8 <UpdateSOCIndication+0x1f8>)
 80019de:	fb82 1203 	smull	r1, r2, r2, r3
 80019e2:	1152      	asrs	r2, r2, #5
 80019e4:	17db      	asrs	r3, r3, #31
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	61fb      	str	r3, [r7, #28]
    int left_led = MIDDLE_LED_MID_INDEX;
 80019ea:	234c      	movs	r3, #76	@ 0x4c
 80019ec:	61bb      	str	r3, [r7, #24]
    int right_led = MIDDLE_LED_MID_INDEX;
 80019ee:	234c      	movs	r3, #76	@ 0x4c
 80019f0:	617b      	str	r3, [r7, #20]

    if (current_time - last_update_time >= 1000) {
 80019f2:	4b72      	ldr	r3, [pc, #456]	@ (8001bbc <UpdateSOCIndication+0x1fc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6a3a      	ldr	r2, [r7, #32]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019fe:	f2c0 80d7 	blt.w	8001bb0 <UpdateSOCIndication+0x1f0>
        last_update_time = current_time;
 8001a02:	4a6e      	ldr	r2, [pc, #440]	@ (8001bbc <UpdateSOCIndication+0x1fc>)
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	6013      	str	r3, [r2, #0]

        // Clear blinking LEDs only
        for (int i = 0; i < 10; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a0c:	e022      	b.n	8001a54 <UpdateSOCIndication+0x94>
            if (left_led - i >= 0) {
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <UpdateSOCIndication+0x6e>
                WS28XX_SetPixel_RGBW_565(ws, left_led - i, COLOR_RGB565_BLACK, 0);
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	b299      	uxth	r1, r3
 8001a24:	2300      	movs	r3, #0
 8001a26:	2200      	movs	r2, #0
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f004 f8db 	bl	8005be4 <WS28XX_SetPixel_RGBW_565>
            }
            if (right_led + i < WS28XX_MIDDLE_LED_COUNT) {
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a32:	4413      	add	r3, r2
 8001a34:	2b97      	cmp	r3, #151	@ 0x97
 8001a36:	dc0a      	bgt.n	8001a4e <UpdateSOCIndication+0x8e>
                WS28XX_SetPixel_RGBW_565(ws, right_led + i, COLOR_RGB565_BLACK, 0);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b299      	uxth	r1, r3
 8001a44:	2300      	movs	r3, #0
 8001a46:	2200      	movs	r2, #0
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f004 f8cb 	bl	8005be4 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < 10; i++) {
 8001a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a50:	3301      	adds	r3, #1
 8001a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a56:	2b09      	cmp	r3, #9
 8001a58:	ddd9      	ble.n	8001a0e <UpdateSOCIndication+0x4e>
            }
        }

        // Set steady LEDs up to SOC percentage
        for (int i = 0; i < led_count_to_light / 2; i++) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a5e:	e030      	b.n	8001ac2 <UpdateSOCIndication+0x102>
            if (left_led - i >= 0) {
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db11      	blt.n	8001a8e <UpdateSOCIndication+0xce>
                WS28XX_SetPixel_RGBW_565(ws, left_led - i,
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	b299      	uxth	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d102      	bne.n	8001a82 <UpdateSOCIndication+0xc2>
 8001a7c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001a80:	e001      	b.n	8001a86 <UpdateSOCIndication+0xc6>
 8001a82:	f242 4244 	movw	r2, #9284	@ 0x2444
 8001a86:	23c8      	movs	r3, #200	@ 0xc8
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f004 f8ab 	bl	8005be4 <WS28XX_SetPixel_RGBW_565>
                    (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, DRL_BRIGHTNESS);
            }
            if (right_led + i < WS28XX_MIDDLE_LED_COUNT) {
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a92:	4413      	add	r3, r2
 8001a94:	2b97      	cmp	r3, #151	@ 0x97
 8001a96:	dc11      	bgt.n	8001abc <UpdateSOCIndication+0xfc>
                WS28XX_SetPixel_RGBW_565(ws, right_led + i,
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b299      	uxth	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d102      	bne.n	8001ab0 <UpdateSOCIndication+0xf0>
 8001aaa:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001aae:	e001      	b.n	8001ab4 <UpdateSOCIndication+0xf4>
 8001ab0:	f242 4244 	movw	r2, #9284	@ 0x2444
 8001ab4:	23c8      	movs	r3, #200	@ 0xc8
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f004 f894 	bl	8005be4 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < led_count_to_light / 2; i++) {
 8001abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001abe:	3301      	adds	r3, #1
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	0fda      	lsrs	r2, r3, #31
 8001ac6:	4413      	add	r3, r2
 8001ac8:	105b      	asrs	r3, r3, #1
 8001aca:	461a      	mov	r2, r3
 8001acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	dbc6      	blt.n	8001a60 <UpdateSOCIndication+0xa0>
                    (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, DRL_BRIGHTNESS);
            }
        }

        // Blink next 10 LEDs
        charging_blink_state = !charging_blink_state;
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc0 <UpdateSOCIndication+0x200>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b37      	ldr	r3, [pc, #220]	@ (8001bc0 <UpdateSOCIndication+0x200>)
 8001ae4:	701a      	strb	r2, [r3, #0]
        uint8_t blink_brightness = charging_blink_state ? DRL_BRIGHTNESS : 0;
 8001ae6:	4b36      	ldr	r3, [pc, #216]	@ (8001bc0 <UpdateSOCIndication+0x200>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <UpdateSOCIndication+0x132>
 8001aee:	23c8      	movs	r3, #200	@ 0xc8
 8001af0:	e000      	b.n	8001af4 <UpdateSOCIndication+0x134>
 8001af2:	2300      	movs	r3, #0
 8001af4:	74fb      	strb	r3, [r7, #19]
        for (int i = 0; i < 10; i++) {
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afa:	e04c      	b.n	8001b96 <UpdateSOCIndication+0x1d6>
            if (left_led - (led_count_to_light / 2) - i >= 0) {
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	0fda      	lsrs	r2, r3, #31
 8001b00:	4413      	add	r3, r2
 8001b02:	105b      	asrs	r3, r3, #1
 8001b04:	425b      	negs	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	441a      	add	r2, r3
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db19      	blt.n	8001b48 <UpdateSOCIndication+0x188>
                WS28XX_SetPixel_RGBW_565(ws, left_led - (led_count_to_light / 2) - i,
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	0fda      	lsrs	r2, r3, #31
 8001b18:	4413      	add	r3, r2
 8001b1a:	105b      	asrs	r3, r3, #1
 8001b1c:	425b      	negs	r3, r3
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	b299      	uxth	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d102      	bne.n	8001b3c <UpdateSOCIndication+0x17c>
 8001b36:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001b3a:	e001      	b.n	8001b40 <UpdateSOCIndication+0x180>
 8001b3c:	f242 4244 	movw	r2, #9284	@ 0x2444
 8001b40:	7cfb      	ldrb	r3, [r7, #19]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f004 f84e 	bl	8005be4 <WS28XX_SetPixel_RGBW_565>
                    (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, blink_brightness);
            }
            if (right_led + (led_count_to_light / 2) + i < WS28XX_MIDDLE_LED_COUNT) {
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	0fda      	lsrs	r2, r3, #31
 8001b4c:	4413      	add	r3, r2
 8001b4e:	105b      	asrs	r3, r3, #1
 8001b50:	461a      	mov	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	441a      	add	r2, r3
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	4413      	add	r3, r2
 8001b5a:	2b97      	cmp	r3, #151	@ 0x97
 8001b5c:	dc18      	bgt.n	8001b90 <UpdateSOCIndication+0x1d0>
                WS28XX_SetPixel_RGBW_565(ws, right_led + (led_count_to_light / 2) + i,
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	0fda      	lsrs	r2, r3, #31
 8001b62:	4413      	add	r3, r2
 8001b64:	105b      	asrs	r3, r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	b299      	uxth	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d102      	bne.n	8001b84 <UpdateSOCIndication+0x1c4>
 8001b7e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001b82:	e001      	b.n	8001b88 <UpdateSOCIndication+0x1c8>
 8001b84:	f242 4244 	movw	r2, #9284	@ 0x2444
 8001b88:	7cfb      	ldrb	r3, [r7, #19]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f004 f82a 	bl	8005be4 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < 10; i++) {
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	3301      	adds	r3, #1
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	ddaf      	ble.n	8001afc <UpdateSOCIndication+0x13c>
                    (charging_type == AC_CHARGING) ? CHARGING_COLOR_AC : CHARGING_COLOR_DC, blink_brightness);
            }
        }
        WS28XX_Update(ws);
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f004 f8f7 	bl	8005d90 <WS28XX_Update>
        HAL_Delay(6);
 8001ba2:	2006      	movs	r0, #6
 8001ba4:	f000 ff2e 	bl	8002a04 <HAL_Delay>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8001ba8:	2104      	movs	r1, #4
 8001baa:	4806      	ldr	r0, [pc, #24]	@ (8001bc4 <UpdateSOCIndication+0x204>)
 8001bac:	f003 f880 	bl	8004cb0 <HAL_TIM_PWM_Stop_DMA>

    }
}
 8001bb0:	bf00      	nop
 8001bb2:	3730      	adds	r7, #48	@ 0x30
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	51eb851f 	.word	0x51eb851f
 8001bbc:	20003480 	.word	0x20003480
 8001bc0:	20003484 	.word	0x20003484
 8001bc4:	20003494 	.word	0x20003494

08001bc8 <SetGPIOHigh>:

void SetGPIOHigh(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4619      	mov	r1, r3
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f002 f89d 	bl	8003d1a <HAL_GPIO_WritePin>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <SetGPIOLow>:

void SetGPIOLow(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001bf4:	887b      	ldrh	r3, [r7, #2]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f002 f88d 	bl	8003d1a <HAL_GPIO_WritePin>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HandleHornState>:

void HandleHornState(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    if (horn_signal_received) {
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <HandleHornState+0x3c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HandleHornState+0x14>
        current_horn_state = HORN_ON;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <HandleHornState+0x40>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	e002      	b.n	8001c22 <HandleHornState+0x1a>
    } else {
        current_horn_state = HORN_OFF;
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HandleHornState+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
    }

    switch (current_horn_state) {
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HandleHornState+0x40>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d104      	bne.n	8001c34 <HandleHornState+0x2c>
        case HORN_ON:
            SetGPIOLow(GPIOA, GPIO_PIN_0);  // PA0 LOW to turn on the horn
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	4807      	ldr	r0, [pc, #28]	@ (8001c4c <HandleHornState+0x44>)
 8001c2e:	f7ff ffdb 	bl	8001be8 <SetGPIOLow>
            break;
 8001c32:	e004      	b.n	8001c3e <HandleHornState+0x36>

        case HORN_OFF:
        default:
            SetGPIOHigh(GPIOA, GPIO_PIN_0);  // PA0 HIGH to turn off the horn
 8001c34:	2101      	movs	r1, #1
 8001c36:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <HandleHornState+0x44>)
 8001c38:	f7ff ffc6 	bl	8001bc8 <SetGPIOHigh>
            break;
 8001c3c:	bf00      	nop
    }
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200033dc 	.word	0x200033dc
 8001c48:	200033af 	.word	0x200033af
 8001c4c:	40010800 	.word	0x40010800

08001c50 <HandleHeadlampState>:

void HandleHeadlampState(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
    if (headlamp_high_beam_signal_received) {
 8001c54:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <HandleHeadlampState+0x70>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HandleHeadlampState+0x14>
        current_headlamp_state = HEADLAMP_HIGH_BEAM;
 8001c5c:	4b19      	ldr	r3, [pc, #100]	@ (8001cc4 <HandleHeadlampState+0x74>)
 8001c5e:	2202      	movs	r2, #2
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e00a      	b.n	8001c7a <HandleHeadlampState+0x2a>
    } else if (headlamp_low_beam_signal_received) {
 8001c64:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <HandleHeadlampState+0x78>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HandleHeadlampState+0x24>
        current_headlamp_state = HEADLAMP_LOW_BEAM;
 8001c6c:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <HandleHeadlampState+0x74>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	e002      	b.n	8001c7a <HandleHeadlampState+0x2a>
    } else {
        current_headlamp_state = HEADLAMP_OFF;
 8001c74:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <HandleHeadlampState+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
    }

    switch (current_headlamp_state) {
 8001c7a:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HandleHeadlampState+0x74>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d00a      	beq.n	8001c98 <HandleHeadlampState+0x48>
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d111      	bne.n	8001caa <HandleHeadlampState+0x5a>
        case HEADLAMP_HIGH_BEAM:
            // High beam active (Both low beam and high beam relays should be on)
            SetGPIOLow(GPIOA, GPIO_PIN_1);  // PA1 LOW for headlamp power
 8001c86:	2102      	movs	r1, #2
 8001c88:	4810      	ldr	r0, [pc, #64]	@ (8001ccc <HandleHeadlampState+0x7c>)
 8001c8a:	f7ff ffad 	bl	8001be8 <SetGPIOLow>
            SetGPIOLow(GPIOA, GPIO_PIN_6);  // PA6 LOW for beam selector
 8001c8e:	2140      	movs	r1, #64	@ 0x40
 8001c90:	480e      	ldr	r0, [pc, #56]	@ (8001ccc <HandleHeadlampState+0x7c>)
 8001c92:	f7ff ffa9 	bl	8001be8 <SetGPIOLow>
            break;
 8001c96:	e011      	b.n	8001cbc <HandleHeadlampState+0x6c>

        case HEADLAMP_LOW_BEAM:
            // Low beam active (Only low beam relay should be on)
            SetGPIOLow(GPIOA, GPIO_PIN_1);  // PA1 LOW for headlamp power
 8001c98:	2102      	movs	r1, #2
 8001c9a:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <HandleHeadlampState+0x7c>)
 8001c9c:	f7ff ffa4 	bl	8001be8 <SetGPIOLow>
            SetGPIOHigh(GPIOA, GPIO_PIN_6);  // PA6 HIGH to deactivate high beam
 8001ca0:	2140      	movs	r1, #64	@ 0x40
 8001ca2:	480a      	ldr	r0, [pc, #40]	@ (8001ccc <HandleHeadlampState+0x7c>)
 8001ca4:	f7ff ff90 	bl	8001bc8 <SetGPIOHigh>
            break;
 8001ca8:	e008      	b.n	8001cbc <HandleHeadlampState+0x6c>

        case HEADLAMP_OFF:
        default:
            // Headlamps off
            SetGPIOHigh(GPIOA, GPIO_PIN_1);  // PA1 HIGH to turn off the headlamp power
 8001caa:	2102      	movs	r1, #2
 8001cac:	4807      	ldr	r0, [pc, #28]	@ (8001ccc <HandleHeadlampState+0x7c>)
 8001cae:	f7ff ff8b 	bl	8001bc8 <SetGPIOHigh>
            SetGPIOHigh(GPIOA, GPIO_PIN_6);  // PA6 HIGH to turn off beam selector
 8001cb2:	2140      	movs	r1, #64	@ 0x40
 8001cb4:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <HandleHeadlampState+0x7c>)
 8001cb6:	f7ff ff87 	bl	8001bc8 <SetGPIOHigh>
            break;
 8001cba:	bf00      	nop
    }
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200033e4 	.word	0x200033e4
 8001cc4:	200033b0 	.word	0x200033b0
 8001cc8:	200033e0 	.word	0x200033e0
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <readHazardSwitch>:

void readHazardSwitch(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
	  uint8_t switchedge = DetectEdge(GPIOB, GPIO_PIN_13, debounceDelay);
 8001cd6:	220a      	movs	r2, #10
 8001cd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cdc:	4823      	ldr	r0, [pc, #140]	@ (8001d6c <readHazardSwitch+0x9c>)
 8001cde:	f000 fb5d 	bl	800239c <DetectEdge>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71bb      	strb	r3, [r7, #6]
	  uint8_t hazard_pressed = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	71fb      	strb	r3, [r7, #7]

	  if (switchedge == falling_edge){
 8001cea:	79bb      	ldrb	r3, [r7, #6]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d102      	bne.n	8001cf6 <readHazardSwitch+0x26>
		  hazard_pressed = 1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	e001      	b.n	8001cfa <readHazardSwitch+0x2a>
	  }else
	  {
		  hazard_pressed = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	71fb      	strb	r3, [r7, #7]
	  }
//	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==GPIO_PIN_RESET && hazard_signal_received == 0){
	  if(hazard_pressed && (hazard_signal_received == 0)){ // hazard press is active low
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d017      	beq.n	8001d30 <readHazardSwitch+0x60>
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <readHazardSwitch+0xa0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d113      	bne.n	8001d30 <readHazardSwitch+0x60>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // give 12 volt power through relay connected to PB1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	4817      	ldr	r0, [pc, #92]	@ (8001d6c <readHazardSwitch+0x9c>)
 8001d0e:	f002 f804 	bl	8003d1a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001d12:	2201      	movs	r2, #1
 8001d14:	2104      	movs	r1, #4
 8001d16:	4815      	ldr	r0, [pc, #84]	@ (8001d6c <readHazardSwitch+0x9c>)
 8001d18:	f001 ffff 	bl	8003d1a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); //sending signal to rear side
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d22:	4812      	ldr	r0, [pc, #72]	@ (8001d6c <readHazardSwitch+0x9c>)
 8001d24:	f001 fff9 	bl	8003d1a <HAL_GPIO_WritePin>
		  hazard_signal_received = 1;
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <readHazardSwitch+0xa0>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //sending signal to rear side
		  hazard_signal_received = 0;
//		  HAL_Delay(100);
	  }
}
 8001d2e:	e019      	b.n	8001d64 <readHazardSwitch+0x94>
	  }else if(hazard_pressed && (hazard_signal_received == 1)){
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d016      	beq.n	8001d64 <readHazardSwitch+0x94>
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <readHazardSwitch+0xa0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d112      	bne.n	8001d64 <readHazardSwitch+0x94>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // removing 12 volt power through relay
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2102      	movs	r1, #2
 8001d42:	480a      	ldr	r0, [pc, #40]	@ (8001d6c <readHazardSwitch+0x9c>)
 8001d44:	f001 ffe9 	bl	8003d1a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4807      	ldr	r0, [pc, #28]	@ (8001d6c <readHazardSwitch+0x9c>)
 8001d4e:	f001 ffe4 	bl	8003d1a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //sending signal to rear side
 8001d52:	2200      	movs	r2, #0
 8001d54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d58:	4804      	ldr	r0, [pc, #16]	@ (8001d6c <readHazardSwitch+0x9c>)
 8001d5a:	f001 ffde 	bl	8003d1a <HAL_GPIO_WritePin>
		  hazard_signal_received = 0;
 8001d5e:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <readHazardSwitch+0xa0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40010c00 	.word	0x40010c00
 8001d70:	200033d0 	.word	0x200033d0
 8001d74:	00000000 	.word	0x00000000

08001d78 <readSteeringControls>:

void readSteeringControls(void) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
    // Read ADC for PA3
    ADC_Select_CH3();
 8001d7c:	f000 fa1a 	bl	80021b4 <ADC_Select_CH3>
    HAL_ADC_Start(&hadc1);
 8001d80:	48ad      	ldr	r0, [pc, #692]	@ (8002038 <readSteeringControls+0x2c0>)
 8001d82:	f000 ff3b 	bl	8002bfc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8001d86:	2164      	movs	r1, #100	@ 0x64
 8001d88:	48ab      	ldr	r0, [pc, #684]	@ (8002038 <readSteeringControls+0x2c0>)
 8001d8a:	f001 f811 	bl	8002db0 <HAL_ADC_PollForConversion>
    adc_val_pa3 = HAL_ADC_GetValue(&hadc1);
 8001d8e:	48aa      	ldr	r0, [pc, #680]	@ (8002038 <readSteeringControls+0x2c0>)
 8001d90:	f001 f914 	bl	8002fbc <HAL_ADC_GetValue>
 8001d94:	4603      	mov	r3, r0
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	4ba8      	ldr	r3, [pc, #672]	@ (800203c <readSteeringControls+0x2c4>)
 8001d9a:	801a      	strh	r2, [r3, #0]
    voltage_pa3 = (adc_val_pa3 * VREF) / 4095.0; // Convert to voltage
 8001d9c:	4ba7      	ldr	r3, [pc, #668]	@ (800203c <readSteeringControls+0x2c4>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fcd3 	bl	800074c <__aeabi_i2f>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4aa5      	ldr	r2, [pc, #660]	@ (8002040 <readSteeringControls+0x2c8>)
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fd21 	bl	80007f4 <__aeabi_fmul>
 8001db2:	4603      	mov	r3, r0
 8001db4:	49a3      	ldr	r1, [pc, #652]	@ (8002044 <readSteeringControls+0x2cc>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fdd0 	bl	800095c <__aeabi_fdiv>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4ba1      	ldr	r3, [pc, #644]	@ (8002048 <readSteeringControls+0x2d0>)
 8001dc2:	601a      	str	r2, [r3, #0]
    HAL_ADC_Stop(&hadc1);
 8001dc4:	489c      	ldr	r0, [pc, #624]	@ (8002038 <readSteeringControls+0x2c0>)
 8001dc6:	f000 ffc7 	bl	8002d58 <HAL_ADC_Stop>

    // Read ADC for PA4
    ADC_Select_CH4();
 8001dca:	f000 fa11 	bl	80021f0 <ADC_Select_CH4>
    HAL_ADC_Start(&hadc1);
 8001dce:	489a      	ldr	r0, [pc, #616]	@ (8002038 <readSteeringControls+0x2c0>)
 8001dd0:	f000 ff14 	bl	8002bfc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8001dd4:	2164      	movs	r1, #100	@ 0x64
 8001dd6:	4898      	ldr	r0, [pc, #608]	@ (8002038 <readSteeringControls+0x2c0>)
 8001dd8:	f000 ffea 	bl	8002db0 <HAL_ADC_PollForConversion>
    adc_val_pa4 = HAL_ADC_GetValue(&hadc1);
 8001ddc:	4896      	ldr	r0, [pc, #600]	@ (8002038 <readSteeringControls+0x2c0>)
 8001dde:	f001 f8ed 	bl	8002fbc <HAL_ADC_GetValue>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b99      	ldr	r3, [pc, #612]	@ (800204c <readSteeringControls+0x2d4>)
 8001de8:	801a      	strh	r2, [r3, #0]
    voltage_pa4 = (adc_val_pa4 * VREF) / 4095.0; // Convert to voltage
 8001dea:	4b98      	ldr	r3, [pc, #608]	@ (800204c <readSteeringControls+0x2d4>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fcac 	bl	800074c <__aeabi_i2f>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4a92      	ldr	r2, [pc, #584]	@ (8002040 <readSteeringControls+0x2c8>)
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fcfa 	bl	80007f4 <__aeabi_fmul>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4990      	ldr	r1, [pc, #576]	@ (8002044 <readSteeringControls+0x2cc>)
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fda9 	bl	800095c <__aeabi_fdiv>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b90      	ldr	r3, [pc, #576]	@ (8002050 <readSteeringControls+0x2d8>)
 8001e10:	601a      	str	r2, [r3, #0]
    HAL_ADC_Stop(&hadc1);
 8001e12:	4889      	ldr	r0, [pc, #548]	@ (8002038 <readSteeringControls+0x2c0>)
 8001e14:	f000 ffa0 	bl	8002d58 <HAL_ADC_Stop>

    // Read ADC for PA2
    ADC_Select_CH2();
 8001e18:	f000 fa08 	bl	800222c <ADC_Select_CH2>
    HAL_ADC_Start(&hadc1);
 8001e1c:	4886      	ldr	r0, [pc, #536]	@ (8002038 <readSteeringControls+0x2c0>)
 8001e1e:	f000 feed 	bl	8002bfc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8001e22:	2164      	movs	r1, #100	@ 0x64
 8001e24:	4884      	ldr	r0, [pc, #528]	@ (8002038 <readSteeringControls+0x2c0>)
 8001e26:	f000 ffc3 	bl	8002db0 <HAL_ADC_PollForConversion>
    adc_val_pa2 = HAL_ADC_GetValue(&hadc1);
 8001e2a:	4883      	ldr	r0, [pc, #524]	@ (8002038 <readSteeringControls+0x2c0>)
 8001e2c:	f001 f8c6 	bl	8002fbc <HAL_ADC_GetValue>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	4b87      	ldr	r3, [pc, #540]	@ (8002054 <readSteeringControls+0x2dc>)
 8001e36:	801a      	strh	r2, [r3, #0]
    voltage_pa2 = (adc_val_pa2 * VREF) / 4095.0; // Convert to voltage
 8001e38:	4b86      	ldr	r3, [pc, #536]	@ (8002054 <readSteeringControls+0x2dc>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fc85 	bl	800074c <__aeabi_i2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4a7e      	ldr	r2, [pc, #504]	@ (8002040 <readSteeringControls+0x2c8>)
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fcd3 	bl	80007f4 <__aeabi_fmul>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	497c      	ldr	r1, [pc, #496]	@ (8002044 <readSteeringControls+0x2cc>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fd82 	bl	800095c <__aeabi_fdiv>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8002058 <readSteeringControls+0x2e0>)
 8001e5e:	601a      	str	r2, [r3, #0]
    HAL_ADC_Stop(&hadc1);
 8001e60:	4875      	ldr	r0, [pc, #468]	@ (8002038 <readSteeringControls+0x2c0>)
 8001e62:	f000 ff79 	bl	8002d58 <HAL_ADC_Stop>


    if (voltage_pa3 < 2.6 && voltage_pa3 > 2.3) {
 8001e66:	4b78      	ldr	r3, [pc, #480]	@ (8002048 <readSteeringControls+0x2d0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fad4 	bl	8000418 <__aeabi_f2d>
 8001e70:	a367      	add	r3, pc, #412	@ (adr r3, 8002010 <readSteeringControls+0x298>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fb87 	bl	8000588 <__aeabi_dcmplt>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01e      	beq.n	8001ebe <readSteeringControls+0x146>
 8001e80:	4b71      	ldr	r3, [pc, #452]	@ (8002048 <readSteeringControls+0x2d0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fac7 	bl	8000418 <__aeabi_f2d>
 8001e8a:	a363      	add	r3, pc, #396	@ (adr r3, 8002018 <readSteeringControls+0x2a0>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fb98 	bl	80005c4 <__aeabi_dcmpgt>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d011      	beq.n	8001ebe <readSteeringControls+0x146>
        turn_signal_left_raw = 0;
 8001e9a:	4b70      	ldr	r3, [pc, #448]	@ (800205c <readSteeringControls+0x2e4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
        turn_signal_right_raw = 1;
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8002060 <readSteeringControls+0x2e8>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eac:	486d      	ldr	r0, [pc, #436]	@ (8002064 <readSteeringControls+0x2ec>)
 8001eae:	f001 ff34 	bl	8003d1a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2180      	movs	r1, #128	@ 0x80
 8001eb6:	486b      	ldr	r0, [pc, #428]	@ (8002064 <readSteeringControls+0x2ec>)
 8001eb8:	f001 ff2f 	bl	8003d1a <HAL_GPIO_WritePin>
 8001ebc:	e03c      	b.n	8001f38 <readSteeringControls+0x1c0>
    } else if (voltage_pa3 < 1.7 && voltage_pa3 > 1.4) {
 8001ebe:	4b62      	ldr	r3, [pc, #392]	@ (8002048 <readSteeringControls+0x2d0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe faa8 	bl	8000418 <__aeabi_f2d>
 8001ec8:	a355      	add	r3, pc, #340	@ (adr r3, 8002020 <readSteeringControls+0x2a8>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fb5b 	bl	8000588 <__aeabi_dcmplt>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01e      	beq.n	8001f16 <readSteeringControls+0x19e>
 8001ed8:	4b5b      	ldr	r3, [pc, #364]	@ (8002048 <readSteeringControls+0x2d0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fa9b 	bl	8000418 <__aeabi_f2d>
 8001ee2:	a351      	add	r3, pc, #324	@ (adr r3, 8002028 <readSteeringControls+0x2b0>)
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	f7fe fb6c 	bl	80005c4 <__aeabi_dcmpgt>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d011      	beq.n	8001f16 <readSteeringControls+0x19e>
        turn_signal_right_raw = 0;
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8002060 <readSteeringControls+0x2e8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
        turn_signal_left_raw = 1;
 8001ef8:	4b58      	ldr	r3, [pc, #352]	@ (800205c <readSteeringControls+0x2e4>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2180      	movs	r1, #128	@ 0x80
 8001f02:	4858      	ldr	r0, [pc, #352]	@ (8002064 <readSteeringControls+0x2ec>)
 8001f04:	f001 ff09 	bl	8003d1a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f0e:	4855      	ldr	r0, [pc, #340]	@ (8002064 <readSteeringControls+0x2ec>)
 8001f10:	f001 ff03 	bl	8003d1a <HAL_GPIO_WritePin>
 8001f14:	e010      	b.n	8001f38 <readSteeringControls+0x1c0>
    } else {
        turn_signal_right_raw = 0;
 8001f16:	4b52      	ldr	r3, [pc, #328]	@ (8002060 <readSteeringControls+0x2e8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
        turn_signal_left_raw = 0;
 8001f1c:	4b4f      	ldr	r3, [pc, #316]	@ (800205c <readSteeringControls+0x2e4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2180      	movs	r1, #128	@ 0x80
 8001f26:	484f      	ldr	r0, [pc, #316]	@ (8002064 <readSteeringControls+0x2ec>)
 8001f28:	f001 fef7 	bl	8003d1a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f32:	484c      	ldr	r0, [pc, #304]	@ (8002064 <readSteeringControls+0x2ec>)
 8001f34:	f001 fef1 	bl	8003d1a <HAL_GPIO_WritePin>
    }

    if (voltage_pa4 < 2.6 && voltage_pa4 > 2.3) {
 8001f38:	4b45      	ldr	r3, [pc, #276]	@ (8002050 <readSteeringControls+0x2d8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fa6b 	bl	8000418 <__aeabi_f2d>
 8001f42:	a333      	add	r3, pc, #204	@ (adr r3, 8002010 <readSteeringControls+0x298>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe fb1e 	bl	8000588 <__aeabi_dcmplt>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d015      	beq.n	8001f7e <readSteeringControls+0x206>
 8001f52:	4b3f      	ldr	r3, [pc, #252]	@ (8002050 <readSteeringControls+0x2d8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fa5e 	bl	8000418 <__aeabi_f2d>
 8001f5c:	a32e      	add	r3, pc, #184	@ (adr r3, 8002018 <readSteeringControls+0x2a0>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	f7fe fb2f 	bl	80005c4 <__aeabi_dcmpgt>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <readSteeringControls+0x206>
        headlamp_high_raw = 1;
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8002068 <readSteeringControls+0x2f0>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	2120      	movs	r1, #32
 8001f76:	483b      	ldr	r0, [pc, #236]	@ (8002064 <readSteeringControls+0x2ec>)
 8001f78:	f001 fecf 	bl	8003d1a <HAL_GPIO_WritePin>
 8001f7c:	e025      	b.n	8001fca <readSteeringControls+0x252>
    } else if (voltage_pa4 < 1.7 && voltage_pa4 > 1.4) {
 8001f7e:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <readSteeringControls+0x2d8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fa48 	bl	8000418 <__aeabi_f2d>
 8001f88:	a325      	add	r3, pc, #148	@ (adr r3, 8002020 <readSteeringControls+0x2a8>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f7fe fafb 	bl	8000588 <__aeabi_dcmplt>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d015      	beq.n	8001fc4 <readSteeringControls+0x24c>
 8001f98:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <readSteeringControls+0x2d8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fa3b 	bl	8000418 <__aeabi_f2d>
 8001fa2:	a321      	add	r3, pc, #132	@ (adr r3, 8002028 <readSteeringControls+0x2b0>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	f7fe fb0c 	bl	80005c4 <__aeabi_dcmpgt>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <readSteeringControls+0x24c>
        headlamp_high_raw = 1;
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002068 <readSteeringControls+0x2f0>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	2120      	movs	r1, #32
 8001fbc:	4829      	ldr	r0, [pc, #164]	@ (8002064 <readSteeringControls+0x2ec>)
 8001fbe:	f001 feac 	bl	8003d1a <HAL_GPIO_WritePin>
 8001fc2:	e002      	b.n	8001fca <readSteeringControls+0x252>
    } else {
        headlamp_high_raw = 0;
 8001fc4:	4b28      	ldr	r3, [pc, #160]	@ (8002068 <readSteeringControls+0x2f0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
    }

    if (voltage_pa2 < 2.4 && voltage_pa2 > 1.5) {
 8001fca:	4b23      	ldr	r3, [pc, #140]	@ (8002058 <readSteeringControls+0x2e0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fa22 	bl	8000418 <__aeabi_f2d>
 8001fd4:	a316      	add	r3, pc, #88	@ (adr r3, 8002030 <readSteeringControls+0x2b8>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe fad5 	bl	8000588 <__aeabi_dcmplt>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d047      	beq.n	8002074 <readSteeringControls+0x2fc>
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <readSteeringControls+0x2e0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fdbd 	bl	8000b6c <__aeabi_fcmpgt>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d03d      	beq.n	8002074 <readSteeringControls+0x2fc>
        headlamp_low_raw = 0;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <readSteeringControls+0x2f4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
        drl_signal_received_raw = 1;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <readSteeringControls+0x2f8>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	2120      	movs	r1, #32
 8002008:	4816      	ldr	r0, [pc, #88]	@ (8002064 <readSteeringControls+0x2ec>)
 800200a:	f001 fe86 	bl	8003d1a <HAL_GPIO_WritePin>
 800200e:	e05e      	b.n	80020ce <readSteeringControls+0x356>
 8002010:	cccccccd 	.word	0xcccccccd
 8002014:	4004cccc 	.word	0x4004cccc
 8002018:	66666666 	.word	0x66666666
 800201c:	40026666 	.word	0x40026666
 8002020:	33333333 	.word	0x33333333
 8002024:	3ffb3333 	.word	0x3ffb3333
 8002028:	66666666 	.word	0x66666666
 800202c:	3ff66666 	.word	0x3ff66666
 8002030:	33333333 	.word	0x33333333
 8002034:	40033333 	.word	0x40033333
 8002038:	20000058 	.word	0x20000058
 800203c:	200033ec 	.word	0x200033ec
 8002040:	40533333 	.word	0x40533333
 8002044:	457ff000 	.word	0x457ff000
 8002048:	200033f4 	.word	0x200033f4
 800204c:	200033f0 	.word	0x200033f0
 8002050:	200033fc 	.word	0x200033fc
 8002054:	200033ee 	.word	0x200033ee
 8002058:	200033f8 	.word	0x200033f8
 800205c:	20003448 	.word	0x20003448
 8002060:	20003449 	.word	0x20003449
 8002064:	40010c00 	.word	0x40010c00
 8002068:	2000344b 	.word	0x2000344b
 800206c:	2000344a 	.word	0x2000344a
 8002070:	2000344c 	.word	0x2000344c
    } else if (voltage_pa2 < 3.0 && voltage_pa2 > 2.6) {
 8002074:	4b34      	ldr	r3, [pc, #208]	@ (8002148 <readSteeringControls+0x3d0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4934      	ldr	r1, [pc, #208]	@ (800214c <readSteeringControls+0x3d4>)
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fd58 	bl	8000b30 <__aeabi_fcmplt>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d018      	beq.n	80020b8 <readSteeringControls+0x340>
 8002086:	4b30      	ldr	r3, [pc, #192]	@ (8002148 <readSteeringControls+0x3d0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe f9c4 	bl	8000418 <__aeabi_f2d>
 8002090:	a32b      	add	r3, pc, #172	@ (adr r3, 8002140 <readSteeringControls+0x3c8>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe fa95 	bl	80005c4 <__aeabi_dcmpgt>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00b      	beq.n	80020b8 <readSteeringControls+0x340>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	2120      	movs	r1, #32
 80020a4:	482a      	ldr	r0, [pc, #168]	@ (8002150 <readSteeringControls+0x3d8>)
 80020a6:	f001 fe38 	bl	8003d1a <HAL_GPIO_WritePin>
        headlamp_low_raw = 1;
 80020aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002154 <readSteeringControls+0x3dc>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
        drl_signal_received_raw = 1;
 80020b0:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <readSteeringControls+0x3e0>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	e00a      	b.n	80020ce <readSteeringControls+0x356>
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2120      	movs	r1, #32
 80020bc:	4824      	ldr	r0, [pc, #144]	@ (8002150 <readSteeringControls+0x3d8>)
 80020be:	f001 fe2c 	bl	8003d1a <HAL_GPIO_WritePin>
        headlamp_low_raw = 0;
 80020c2:	4b24      	ldr	r3, [pc, #144]	@ (8002154 <readSteeringControls+0x3dc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
        drl_signal_received_raw = 0;
 80020c8:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <readSteeringControls+0x3e0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
    }

    // Debounce raw values to update stable flags
    DebounceFlag(&turn_signal_left_flag, turn_signal_left_raw);
 80020ce:	4b23      	ldr	r3, [pc, #140]	@ (800215c <readSteeringControls+0x3e4>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	4822      	ldr	r0, [pc, #136]	@ (8002160 <readSteeringControls+0x3e8>)
 80020d6:	f000 f9ca 	bl	800246e <DebounceFlag>
    DebounceFlag(&turn_signal_right_flag, turn_signal_right_raw);
 80020da:	4b22      	ldr	r3, [pc, #136]	@ (8002164 <readSteeringControls+0x3ec>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	4619      	mov	r1, r3
 80020e0:	4821      	ldr	r0, [pc, #132]	@ (8002168 <readSteeringControls+0x3f0>)
 80020e2:	f000 f9c4 	bl	800246e <DebounceFlag>
    DebounceFlag(&headlamp_low_beam_flag, headlamp_low_raw);
 80020e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <readSteeringControls+0x3dc>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	4619      	mov	r1, r3
 80020ec:	481f      	ldr	r0, [pc, #124]	@ (800216c <readSteeringControls+0x3f4>)
 80020ee:	f000 f9be 	bl	800246e <DebounceFlag>
    DebounceFlag(&headlamp_high_beam_flag, headlamp_high_raw);
 80020f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002170 <readSteeringControls+0x3f8>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	4619      	mov	r1, r3
 80020f8:	481e      	ldr	r0, [pc, #120]	@ (8002174 <readSteeringControls+0x3fc>)
 80020fa:	f000 f9b8 	bl	800246e <DebounceFlag>
    DebounceFlag(&drl_flag, drl_signal_received_raw);
 80020fe:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <readSteeringControls+0x3e0>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	4619      	mov	r1, r3
 8002104:	481c      	ldr	r0, [pc, #112]	@ (8002178 <readSteeringControls+0x400>)
 8002106:	f000 f9b2 	bl	800246e <DebounceFlag>

    // Update flags with stable values
    turn_signal_left_received = turn_signal_left_flag.stable_value;
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <readSteeringControls+0x3e8>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	4b1a      	ldr	r3, [pc, #104]	@ (800217c <readSteeringControls+0x404>)
 8002112:	601a      	str	r2, [r3, #0]
    turn_signal_right_received = turn_signal_right_flag.stable_value;
 8002114:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <readSteeringControls+0x3f0>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4b19      	ldr	r3, [pc, #100]	@ (8002180 <readSteeringControls+0x408>)
 800211c:	601a      	str	r2, [r3, #0]
    headlamp_low_beam_signal_received = headlamp_low_beam_flag.stable_value;
 800211e:	4b13      	ldr	r3, [pc, #76]	@ (800216c <readSteeringControls+0x3f4>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <readSteeringControls+0x40c>)
 8002126:	601a      	str	r2, [r3, #0]
    headlamp_high_beam_signal_received = headlamp_high_beam_flag.stable_value;
 8002128:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <readSteeringControls+0x3fc>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b16      	ldr	r3, [pc, #88]	@ (8002188 <readSteeringControls+0x410>)
 8002130:	601a      	str	r2, [r3, #0]
    drl_signal_received = drl_flag.stable_value;
 8002132:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <readSteeringControls+0x400>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	4b14      	ldr	r3, [pc, #80]	@ (800218c <readSteeringControls+0x414>)
 800213a:	601a      	str	r2, [r3, #0]
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	cccccccd 	.word	0xcccccccd
 8002144:	4004cccc 	.word	0x4004cccc
 8002148:	200033f8 	.word	0x200033f8
 800214c:	40400000 	.word	0x40400000
 8002150:	40010c00 	.word	0x40010c00
 8002154:	2000344a 	.word	0x2000344a
 8002158:	2000344c 	.word	0x2000344c
 800215c:	20003448 	.word	0x20003448
 8002160:	2000340c 	.word	0x2000340c
 8002164:	20003449 	.word	0x20003449
 8002168:	20003418 	.word	0x20003418
 800216c:	20003424 	.word	0x20003424
 8002170:	2000344b 	.word	0x2000344b
 8002174:	20003430 	.word	0x20003430
 8002178:	2000343c 	.word	0x2000343c
 800217c:	200033d4 	.word	0x200033d4
 8002180:	200033d8 	.word	0x200033d8
 8002184:	200033e0 	.word	0x200033e0
 8002188:	200033e4 	.word	0x200033e4
 800218c:	200033cc 	.word	0x200033cc

08002190 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8002198:	2100      	movs	r1, #0
 800219a:	4805      	ldr	r0, [pc, #20]	@ (80021b0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800219c:	f002 fd88 	bl	8004cb0 <HAL_TIM_PWM_Stop_DMA>
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 80021a0:	2108      	movs	r1, #8
 80021a2:	4803      	ldr	r0, [pc, #12]	@ (80021b0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80021a4:	f002 fd84 	bl	8004cb0 <HAL_TIM_PWM_Stop_DMA>
//	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2); //We don't stop this PWM as this LED strip is too long and doesn't get update fast enough
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20003494 	.word	0x20003494

080021b4 <ADC_Select_CH3>:

void ADC_Select_CH3(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 80021c4:	2303      	movs	r3, #3
 80021c6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80021c8:	2301      	movs	r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80021cc:	2303      	movs	r3, #3
 80021ce:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4805      	ldr	r0, [pc, #20]	@ (80021ec <ADC_Select_CH3+0x38>)
 80021d6:	f000 fefd 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <ADC_Select_CH3+0x30>
	  {
	    Error_Handler();
 80021e0:	f000 f974 	bl	80024cc <Error_Handler>
	  }
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000058 	.word	0x20000058

080021f0 <ADC_Select_CH4>:

void ADC_Select_CH4(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8002200:	2304      	movs	r3, #4
 8002202:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8002204:	2301      	movs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8002208:	2304      	movs	r3, #4
 800220a:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	@ (8002228 <ADC_Select_CH4+0x38>)
 8002212:	f000 fedf 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <ADC_Select_CH4+0x30>
	  {
	    Error_Handler();
 800221c:	f000 f956 	bl	80024cc <Error_Handler>
	  }
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000058 	.word	0x20000058

0800222c <ADC_Select_CH2>:

void ADC_Select_CH2(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 800223c:	2302      	movs	r3, #2
 800223e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8002240:	2301      	movs	r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002244:	2305      	movs	r3, #5
 8002246:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	4619      	mov	r1, r3
 800224c:	4805      	ldr	r0, [pc, #20]	@ (8002264 <ADC_Select_CH2+0x38>)
 800224e:	f000 fec1 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 8002258:	f000 f938 	bl	80024cc <Error_Handler>
	  }
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000058 	.word	0x20000058

08002268 <readBrakeSwitch>:
//	  {
//	    Error_Handler();
//	  }
//}

void readBrakeSwitch(void) {
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
    DebounceInput(GPIOB, GPIO_PIN_15, &brake_state);
 800226c:	4a0b      	ldr	r2, [pc, #44]	@ (800229c <readBrakeSwitch+0x34>)
 800226e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002272:	480b      	ldr	r0, [pc, #44]	@ (80022a0 <readBrakeSwitch+0x38>)
 8002274:	f000 f8c4 	bl	8002400 <DebounceInput>

    if (brake_state.stable_value == GPIO_PIN_RESET) { // Active Low: Brake is pressed
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <readBrakeSwitch+0x34>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <readBrakeSwitch+0x24>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // Set PB4
 8002280:	2201      	movs	r2, #1
 8002282:	2110      	movs	r1, #16
 8002284:	4806      	ldr	r0, [pc, #24]	@ (80022a0 <readBrakeSwitch+0x38>)
 8002286:	f001 fd48 	bl	8003d1a <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // Reset PB4
    }
}
 800228a:	e004      	b.n	8002296 <readBrakeSwitch+0x2e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // Reset PB4
 800228c:	2200      	movs	r2, #0
 800228e:	2110      	movs	r1, #16
 8002290:	4803      	ldr	r0, [pc, #12]	@ (80022a0 <readBrakeSwitch+0x38>)
 8002292:	f001 fd42 	bl	8003d1a <HAL_GPIO_WritePin>
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000008 	.word	0x20000008
 80022a0:	40010c00 	.word	0x40010c00

080022a4 <readHorn>:

void readHorn(void) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
    DebounceInput(GPIOB, GPIO_PIN_12, &horn_state);
 80022a8:	4a09      	ldr	r2, [pc, #36]	@ (80022d0 <readHorn+0x2c>)
 80022aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022ae:	4809      	ldr	r0, [pc, #36]	@ (80022d4 <readHorn+0x30>)
 80022b0:	f000 f8a6 	bl	8002400 <DebounceInput>

    if (horn_state.stable_value == GPIO_PIN_RESET) { // Active Low: Horn is pressed
 80022b4:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <readHorn+0x2c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <readHorn+0x20>
        horn_signal_received = 1; // Set horn signal flag
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <readHorn+0x34>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
    } else {
        horn_signal_received = 0; // Reset horn signal flag
    }
}
 80022c2:	e002      	b.n	80022ca <readHorn+0x26>
        horn_signal_received = 0; // Reset horn signal flag
 80022c4:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <readHorn+0x34>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000014 	.word	0x20000014
 80022d4:	40010c00 	.word	0x40010c00
 80022d8:	200033dc 	.word	0x200033dc

080022dc <readReverseGear>:

void readReverseGear(void) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
    DebounceInput(GPIOA, GPIO_PIN_12, &reverse_state);
 80022e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002310 <readReverseGear+0x34>)
 80022e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022e6:	480b      	ldr	r0, [pc, #44]	@ (8002314 <readReverseGear+0x38>)
 80022e8:	f000 f88a 	bl	8002400 <DebounceInput>

    if (reverse_state.stable_value == GPIO_PIN_SET) { // Active High: Reverse is engaged
 80022ec:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <readReverseGear+0x34>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d105      	bne.n	8002300 <readReverseGear+0x24>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Set PB6
 80022f4:	2201      	movs	r2, #1
 80022f6:	2140      	movs	r1, #64	@ 0x40
 80022f8:	4807      	ldr	r0, [pc, #28]	@ (8002318 <readReverseGear+0x3c>)
 80022fa:	f001 fd0e 	bl	8003d1a <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Reset PB6
    }
}
 80022fe:	e004      	b.n	800230a <readReverseGear+0x2e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Reset PB6
 8002300:	2200      	movs	r2, #0
 8002302:	2140      	movs	r1, #64	@ 0x40
 8002304:	4804      	ldr	r0, [pc, #16]	@ (8002318 <readReverseGear+0x3c>)
 8002306:	f001 fd08 	bl	8003d1a <HAL_GPIO_WritePin>
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20003400 	.word	0x20003400
 8002314:	40010800 	.word	0x40010800
 8002318:	40010c00 	.word	0x40010c00

0800231c <DebounceHazardPin>:

int DebounceHazardPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t debounce_delay)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	460b      	mov	r3, r1
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	817b      	strh	r3, [r7, #10]
	static int keypress_begin_time = 0;
    static int last_keypress_state = 1;
    static int debounce_loop_count = 0;
    int current_keypress_state = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]

	current_keypress_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 800232e:	897b      	ldrh	r3, [r7, #10]
 8002330:	4619      	mov	r1, r3
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f001 fcda 	bl	8003cec <HAL_GPIO_ReadPin>
 8002338:	4603      	mov	r3, r0
 800233a:	617b      	str	r3, [r7, #20]
	debounce_loop_count++;
 800233c:	4b14      	ldr	r3, [pc, #80]	@ (8002390 <DebounceHazardPin+0x74>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	4a13      	ldr	r2, [pc, #76]	@ (8002390 <DebounceHazardPin+0x74>)
 8002344:	6013      	str	r3, [r2, #0]

	if (current_keypress_state != last_keypress_state)
 8002346:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <DebounceHazardPin+0x78>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	429a      	cmp	r2, r3
 800234e:	d008      	beq.n	8002362 <DebounceHazardPin+0x46>
	{
		keypress_begin_time = HAL_GetTick();
 8002350:	f000 fb4e 	bl	80029f0 <HAL_GetTick>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	4b0f      	ldr	r3, [pc, #60]	@ (8002398 <DebounceHazardPin+0x7c>)
 800235a:	601a      	str	r2, [r3, #0]
		debounce_loop_count = 0;
 800235c:	4b0c      	ldr	r3, [pc, #48]	@ (8002390 <DebounceHazardPin+0x74>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
	}

	if (((HAL_GetTick() - keypress_begin_time) >= debounce_delay) &&( debounce_loop_count > debounceSamplesCount))
 8002362:	f000 fb45 	bl	80029f0 <HAL_GetTick>
 8002366:	4603      	mov	r3, r0
 8002368:	4a0b      	ldr	r2, [pc, #44]	@ (8002398 <DebounceHazardPin+0x7c>)
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	d808      	bhi.n	8002386 <DebounceHazardPin+0x6a>
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <DebounceHazardPin+0x74>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b05      	cmp	r3, #5
 800237a:	dd04      	ble.n	8002386 <DebounceHazardPin+0x6a>
	{
		last_keypress_state = current_keypress_state;
 800237c:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <DebounceHazardPin+0x78>)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	6013      	str	r3, [r2, #0]
		return current_keypress_state;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	e000      	b.n	8002388 <DebounceHazardPin+0x6c>
	}
	return 0;
 8002386:	2300      	movs	r3, #0

}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20003488 	.word	0x20003488
 8002394:	2000002c 	.word	0x2000002c
 8002398:	2000348c 	.word	0x2000348c

0800239c <DetectEdge>:

uint8_t DetectEdge(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t debounce_delay)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	460b      	mov	r3, r1
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	817b      	strh	r3, [r7, #10]
	static int prev_pin_state = 0;
	int curr_pin_state = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]

	curr_pin_state = DebounceHazardPin(GPIOx,GPIO_Pin,debounce_delay);
 80023ae:	897b      	ldrh	r3, [r7, #10]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4619      	mov	r1, r3
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f7ff ffb1 	bl	800231c <DebounceHazardPin>
 80023ba:	6178      	str	r0, [r7, #20]

	if (prev_pin_state == 0 && curr_pin_state == 1){
 80023bc:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <DetectEdge+0x60>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <DetectEdge+0x38>
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d104      	bne.n	80023d4 <DetectEdge+0x38>
		prev_pin_state = curr_pin_state;
 80023ca:	4a0c      	ldr	r2, [pc, #48]	@ (80023fc <DetectEdge+0x60>)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	6013      	str	r3, [r2, #0]
		return rising_edge;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e00f      	b.n	80023f4 <DetectEdge+0x58>
	}
	else if(prev_pin_state == 1 && curr_pin_state == 0) {
 80023d4:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <DetectEdge+0x60>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d107      	bne.n	80023ec <DetectEdge+0x50>
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d104      	bne.n	80023ec <DetectEdge+0x50>
		prev_pin_state = curr_pin_state;
 80023e2:	4a06      	ldr	r2, [pc, #24]	@ (80023fc <DetectEdge+0x60>)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	6013      	str	r3, [r2, #0]
		return falling_edge;
 80023e8:	2302      	movs	r3, #2
 80023ea:	e003      	b.n	80023f4 <DetectEdge+0x58>
	}
	else{
		prev_pin_state = curr_pin_state;
 80023ec:	4a03      	ldr	r2, [pc, #12]	@ (80023fc <DetectEdge+0x60>)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	6013      	str	r3, [r2, #0]
	return no_change;
 80023f2:	2300      	movs	r3, #0
	}
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20003490 	.word	0x20003490

08002400 <DebounceInput>:

void DebounceInput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, DebounceState* state)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	460b      	mov	r3, r1
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	817b      	strh	r3, [r7, #10]
    uint8_t current_value = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 800240e:	897b      	ldrh	r3, [r7, #10]
 8002410:	4619      	mov	r1, r3
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f001 fc6a 	bl	8003cec <HAL_GPIO_ReadPin>
 8002418:	4603      	mov	r3, r0
 800241a:	75fb      	strb	r3, [r7, #23]
    uint32_t current_time = HAL_GetTick();
 800241c:	f000 fae8 	bl	80029f0 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

    if (current_value != state->last_value) {
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	785b      	ldrb	r3, [r3, #1]
 8002426:	7dfa      	ldrb	r2, [r7, #23]
 8002428:	429a      	cmp	r2, r3
 800242a:	d005      	beq.n	8002438 <DebounceInput+0x38>
        state->last_debounce_time = current_time; // Reset debounce timer
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	605a      	str	r2, [r3, #4]
        state->sample_count = 0;                 // Reset sample count
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	721a      	strb	r2, [r3, #8]
    }

    if ((current_time - state->last_debounce_time) >= DEBOUNCE_DELAY) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b31      	cmp	r3, #49	@ 0x31
 8002442:	d90d      	bls.n	8002460 <DebounceInput+0x60>
        if (state->sample_count >= DEBOUNCE_SAMPLES) {
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7a1b      	ldrb	r3, [r3, #8]
 8002448:	2b04      	cmp	r3, #4
 800244a:	d903      	bls.n	8002454 <DebounceInput+0x54>
            state->stable_value = current_value; // Update stable value
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7dfa      	ldrb	r2, [r7, #23]
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	e005      	b.n	8002460 <DebounceInput+0x60>
        } else {
            state->sample_count++;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	7a1b      	ldrb	r3, [r3, #8]
 8002458:	3301      	adds	r3, #1
 800245a:	b2da      	uxtb	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	721a      	strb	r2, [r3, #8]
        }
    }

    state->last_value = current_value; // Update last value
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7dfa      	ldrb	r2, [r7, #23]
 8002464:	705a      	strb	r2, [r3, #1]
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <DebounceFlag>:

void DebounceFlag(DebounceState* flag_state, uint8_t raw_value)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
    uint32_t current_time = HAL_GetTick();
 800247a:	f000 fab9 	bl	80029f0 <HAL_GetTick>
 800247e:	60f8      	str	r0, [r7, #12]

    if (raw_value != flag_state->last_value) {
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	785b      	ldrb	r3, [r3, #1]
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	429a      	cmp	r2, r3
 8002488:	d005      	beq.n	8002496 <DebounceFlag+0x28>
        flag_state->last_debounce_time = current_time; // Reset debounce timer
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	605a      	str	r2, [r3, #4]
        flag_state->sample_count = 0;                 // Reset sample count
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	721a      	strb	r2, [r3, #8]
    }

    if ((current_time - flag_state->last_debounce_time) >= 50) { // 50ms debounce delay
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b31      	cmp	r3, #49	@ 0x31
 80024a0:	d90d      	bls.n	80024be <DebounceFlag+0x50>
        if (flag_state->sample_count >= 5) { // 5 consistent samples required
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7a1b      	ldrb	r3, [r3, #8]
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d903      	bls.n	80024b2 <DebounceFlag+0x44>
            flag_state->stable_value = raw_value; // Update stable value
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	e005      	b.n	80024be <DebounceFlag+0x50>
        } else {
            flag_state->sample_count++;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7a1b      	ldrb	r3, [r3, #8]
 80024b6:	3301      	adds	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	721a      	strb	r2, [r3, #8]
        }
    }

    flag_state->last_value = raw_value; // Update last observed value
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	705a      	strb	r2, [r3, #1]
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024d0:	b672      	cpsid	i
}
 80024d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <Error_Handler+0x8>

080024d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <HAL_MspInit+0x5c>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <HAL_MspInit+0x5c>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6193      	str	r3, [r2, #24]
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_MspInit+0x5c>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <HAL_MspInit+0x5c>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002534 <HAL_MspInit+0x5c>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002500:	61d3      	str	r3, [r2, #28]
 8002502:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <HAL_MspInit+0x5c>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_MspInit+0x60>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	4a04      	ldr	r2, [pc, #16]	@ (8002538 <HAL_MspInit+0x60>)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	40021000 	.word	0x40021000
 8002538:	40010000 	.word	0x40010000

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <NMI_Handler+0x4>

08002544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <HardFault_Handler+0x4>

0800254c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <MemManage_Handler+0x4>

08002554 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <UsageFault_Handler+0x4>

08002564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258c:	f000 fa1e 	bl	80029cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002598:	4802      	ldr	r0, [pc, #8]	@ (80025a4 <DMA1_Channel2_IRQHandler+0x10>)
 800259a:	f001 f8ef 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200034dc 	.word	0x200034dc

080025a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80025ac:	4802      	ldr	r0, [pc, #8]	@ (80025b8 <DMA1_Channel3_IRQHandler+0x10>)
 80025ae:	f001 f8e5 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20003520 	.word	0x20003520

080025bc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 80025c0:	4802      	ldr	r0, [pc, #8]	@ (80025cc <DMA1_Channel6_IRQHandler+0x10>)
 80025c2:	f001 f8db 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20003564 	.word	0x20003564

080025d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch2;
DMA_HandleTypeDef hdma_tim1_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b096      	sub	sp, #88	@ 0x58
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	611a      	str	r2, [r3, #16]
 800260a:	615a      	str	r2, [r3, #20]
 800260c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	2220      	movs	r2, #32
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f003 fc2e 	bl	8005e76 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800261a:	4b4a      	ldr	r3, [pc, #296]	@ (8002744 <MX_TIM1_Init+0x168>)
 800261c:	4a4a      	ldr	r2, [pc, #296]	@ (8002748 <MX_TIM1_Init+0x16c>)
 800261e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002620:	4b48      	ldr	r3, [pc, #288]	@ (8002744 <MX_TIM1_Init+0x168>)
 8002622:	2200      	movs	r2, #0
 8002624:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002626:	4b47      	ldr	r3, [pc, #284]	@ (8002744 <MX_TIM1_Init+0x168>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800262c:	4b45      	ldr	r3, [pc, #276]	@ (8002744 <MX_TIM1_Init+0x168>)
 800262e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002632:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002634:	4b43      	ldr	r3, [pc, #268]	@ (8002744 <MX_TIM1_Init+0x168>)
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800263a:	4b42      	ldr	r3, [pc, #264]	@ (8002744 <MX_TIM1_Init+0x168>)
 800263c:	2200      	movs	r2, #0
 800263e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002640:	4b40      	ldr	r3, [pc, #256]	@ (8002744 <MX_TIM1_Init+0x168>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002646:	483f      	ldr	r0, [pc, #252]	@ (8002744 <MX_TIM1_Init+0x168>)
 8002648:	f002 f8e8 	bl	800481c <HAL_TIM_Base_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002652:	f7ff ff3b 	bl	80024cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800265a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800265c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002660:	4619      	mov	r1, r3
 8002662:	4838      	ldr	r0, [pc, #224]	@ (8002744 <MX_TIM1_Init+0x168>)
 8002664:	f002 fcac 	bl	8004fc0 <HAL_TIM_ConfigClockSource>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800266e:	f7ff ff2d 	bl	80024cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002672:	4834      	ldr	r0, [pc, #208]	@ (8002744 <MX_TIM1_Init+0x168>)
 8002674:	f002 f921 	bl	80048ba <HAL_TIM_PWM_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800267e:	f7ff ff25 	bl	80024cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800268a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800268e:	4619      	mov	r1, r3
 8002690:	482c      	ldr	r0, [pc, #176]	@ (8002744 <MX_TIM1_Init+0x168>)
 8002692:	f003 f8ef 	bl	8005874 <HAL_TIMEx_MasterConfigSynchronization>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800269c:	f7ff ff16 	bl	80024cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026a0:	2360      	movs	r3, #96	@ 0x60
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026ac:	2300      	movs	r3, #0
 80026ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026b4:	2300      	movs	r3, #0
 80026b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026c0:	2200      	movs	r2, #0
 80026c2:	4619      	mov	r1, r3
 80026c4:	481f      	ldr	r0, [pc, #124]	@ (8002744 <MX_TIM1_Init+0x168>)
 80026c6:	f002 fbb9 	bl	8004e3c <HAL_TIM_PWM_ConfigChannel>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80026d0:	f7ff fefc 	bl	80024cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026d8:	2204      	movs	r2, #4
 80026da:	4619      	mov	r1, r3
 80026dc:	4819      	ldr	r0, [pc, #100]	@ (8002744 <MX_TIM1_Init+0x168>)
 80026de:	f002 fbad 	bl	8004e3c <HAL_TIM_PWM_ConfigChannel>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80026e8:	f7ff fef0 	bl	80024cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f0:	2208      	movs	r2, #8
 80026f2:	4619      	mov	r1, r3
 80026f4:	4813      	ldr	r0, [pc, #76]	@ (8002744 <MX_TIM1_Init+0x168>)
 80026f6:	f002 fba1 	bl	8004e3c <HAL_TIM_PWM_ConfigChannel>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002700:	f7ff fee4 	bl	80024cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002718:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800271c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	4619      	mov	r1, r3
 8002726:	4807      	ldr	r0, [pc, #28]	@ (8002744 <MX_TIM1_Init+0x168>)
 8002728:	f003 f902 	bl	8005930 <HAL_TIMEx_ConfigBreakDeadTime>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002732:	f7ff fecb 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002736:	4803      	ldr	r0, [pc, #12]	@ (8002744 <MX_TIM1_Init+0x168>)
 8002738:	f000 f8a8 	bl	800288c <HAL_TIM_MspPostInit>

}
 800273c:	bf00      	nop
 800273e:	3758      	adds	r7, #88	@ 0x58
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20003494 	.word	0x20003494
 8002748:	40012c00 	.word	0x40012c00

0800274c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a44      	ldr	r2, [pc, #272]	@ (800286c <HAL_TIM_Base_MspInit+0x120>)
 800275a:	4293      	cmp	r3, r2
 800275c:	f040 8081 	bne.w	8002862 <HAL_TIM_Base_MspInit+0x116>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002760:	4b43      	ldr	r3, [pc, #268]	@ (8002870 <HAL_TIM_Base_MspInit+0x124>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a42      	ldr	r2, [pc, #264]	@ (8002870 <HAL_TIM_Base_MspInit+0x124>)
 8002766:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b40      	ldr	r3, [pc, #256]	@ (8002870 <HAL_TIM_Base_MspInit+0x124>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8002778:	4b3e      	ldr	r3, [pc, #248]	@ (8002874 <HAL_TIM_Base_MspInit+0x128>)
 800277a:	4a3f      	ldr	r2, [pc, #252]	@ (8002878 <HAL_TIM_Base_MspInit+0x12c>)
 800277c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800277e:	4b3d      	ldr	r3, [pc, #244]	@ (8002874 <HAL_TIM_Base_MspInit+0x128>)
 8002780:	2210      	movs	r2, #16
 8002782:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002784:	4b3b      	ldr	r3, [pc, #236]	@ (8002874 <HAL_TIM_Base_MspInit+0x128>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800278a:	4b3a      	ldr	r3, [pc, #232]	@ (8002874 <HAL_TIM_Base_MspInit+0x128>)
 800278c:	2280      	movs	r2, #128	@ 0x80
 800278e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002790:	4b38      	ldr	r3, [pc, #224]	@ (8002874 <HAL_TIM_Base_MspInit+0x128>)
 8002792:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002796:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002798:	4b36      	ldr	r3, [pc, #216]	@ (8002874 <HAL_TIM_Base_MspInit+0x128>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800279e:	4b35      	ldr	r3, [pc, #212]	@ (8002874 <HAL_TIM_Base_MspInit+0x128>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80027a4:	4b33      	ldr	r3, [pc, #204]	@ (8002874 <HAL_TIM_Base_MspInit+0x128>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80027aa:	4832      	ldr	r0, [pc, #200]	@ (8002874 <HAL_TIM_Base_MspInit+0x128>)
 80027ac:	f000 feb4 	bl	8003518 <HAL_DMA_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80027b6:	f7ff fe89 	bl	80024cc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002874 <HAL_TIM_Base_MspInit+0x128>)
 80027be:	625a      	str	r2, [r3, #36]	@ 0x24
 80027c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002874 <HAL_TIM_Base_MspInit+0x128>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 80027c6:	4b2d      	ldr	r3, [pc, #180]	@ (800287c <HAL_TIM_Base_MspInit+0x130>)
 80027c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002880 <HAL_TIM_Base_MspInit+0x134>)
 80027ca:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027cc:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <HAL_TIM_Base_MspInit+0x130>)
 80027ce:	2210      	movs	r2, #16
 80027d0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d2:	4b2a      	ldr	r3, [pc, #168]	@ (800287c <HAL_TIM_Base_MspInit+0x130>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80027d8:	4b28      	ldr	r3, [pc, #160]	@ (800287c <HAL_TIM_Base_MspInit+0x130>)
 80027da:	2280      	movs	r2, #128	@ 0x80
 80027dc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027de:	4b27      	ldr	r3, [pc, #156]	@ (800287c <HAL_TIM_Base_MspInit+0x130>)
 80027e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027e4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027e6:	4b25      	ldr	r3, [pc, #148]	@ (800287c <HAL_TIM_Base_MspInit+0x130>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80027ec:	4b23      	ldr	r3, [pc, #140]	@ (800287c <HAL_TIM_Base_MspInit+0x130>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80027f2:	4b22      	ldr	r3, [pc, #136]	@ (800287c <HAL_TIM_Base_MspInit+0x130>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80027f8:	4820      	ldr	r0, [pc, #128]	@ (800287c <HAL_TIM_Base_MspInit+0x130>)
 80027fa:	f000 fe8d 	bl	8003518 <HAL_DMA_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_TIM_Base_MspInit+0xbc>
    {
      Error_Handler();
 8002804:	f7ff fe62 	bl	80024cc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a1c      	ldr	r2, [pc, #112]	@ (800287c <HAL_TIM_Base_MspInit+0x130>)
 800280c:	629a      	str	r2, [r3, #40]	@ 0x28
 800280e:	4a1b      	ldr	r2, [pc, #108]	@ (800287c <HAL_TIM_Base_MspInit+0x130>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 8002814:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_TIM_Base_MspInit+0x138>)
 8002816:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_TIM_Base_MspInit+0x13c>)
 8002818:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800281a:	4b1a      	ldr	r3, [pc, #104]	@ (8002884 <HAL_TIM_Base_MspInit+0x138>)
 800281c:	2210      	movs	r2, #16
 800281e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002820:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <HAL_TIM_Base_MspInit+0x138>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002826:	4b17      	ldr	r3, [pc, #92]	@ (8002884 <HAL_TIM_Base_MspInit+0x138>)
 8002828:	2280      	movs	r2, #128	@ 0x80
 800282a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800282c:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <HAL_TIM_Base_MspInit+0x138>)
 800282e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002832:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002834:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <HAL_TIM_Base_MspInit+0x138>)
 8002836:	2200      	movs	r2, #0
 8002838:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800283a:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <HAL_TIM_Base_MspInit+0x138>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002840:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <HAL_TIM_Base_MspInit+0x138>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8002846:	480f      	ldr	r0, [pc, #60]	@ (8002884 <HAL_TIM_Base_MspInit+0x138>)
 8002848:	f000 fe66 	bl	8003518 <HAL_DMA_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_TIM_Base_MspInit+0x10a>
    {
      Error_Handler();
 8002852:	f7ff fe3b 	bl	80024cc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a0a      	ldr	r2, [pc, #40]	@ (8002884 <HAL_TIM_Base_MspInit+0x138>)
 800285a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800285c:	4a09      	ldr	r2, [pc, #36]	@ (8002884 <HAL_TIM_Base_MspInit+0x138>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40021000 	.word	0x40021000
 8002874:	200034dc 	.word	0x200034dc
 8002878:	4002001c 	.word	0x4002001c
 800287c:	20003520 	.word	0x20003520
 8002880:	40020030 	.word	0x40020030
 8002884:	20003564 	.word	0x20003564
 8002888:	4002006c 	.word	0x4002006c

0800288c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a10      	ldr	r2, [pc, #64]	@ (80028e8 <HAL_TIM_MspPostInit+0x5c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d118      	bne.n	80028de <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ac:	4b0f      	ldr	r3, [pc, #60]	@ (80028ec <HAL_TIM_MspPostInit+0x60>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4a0e      	ldr	r2, [pc, #56]	@ (80028ec <HAL_TIM_MspPostInit+0x60>)
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	6193      	str	r3, [r2, #24]
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <HAL_TIM_MspPostInit+0x60>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80028c4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80028c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2302      	movs	r3, #2
 80028d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d2:	f107 0310 	add.w	r3, r7, #16
 80028d6:	4619      	mov	r1, r3
 80028d8:	4805      	ldr	r0, [pc, #20]	@ (80028f0 <HAL_TIM_MspPostInit+0x64>)
 80028da:	f001 f883 	bl	80039e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028de:	bf00      	nop
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40010800 	.word	0x40010800

080028f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028f4:	f7ff fe6c 	bl	80025d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028f8:	480b      	ldr	r0, [pc, #44]	@ (8002928 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028fa:	490c      	ldr	r1, [pc, #48]	@ (800292c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002930 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002900:	e002      	b.n	8002908 <LoopCopyDataInit>

08002902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002906:	3304      	adds	r3, #4

08002908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800290a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800290c:	d3f9      	bcc.n	8002902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800290e:	4a09      	ldr	r2, [pc, #36]	@ (8002934 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002910:	4c09      	ldr	r4, [pc, #36]	@ (8002938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002914:	e001      	b.n	800291a <LoopFillZerobss>

08002916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002918:	3204      	adds	r2, #4

0800291a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800291a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800291c:	d3fb      	bcc.n	8002916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800291e:	f003 fab3 	bl	8005e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002922:	f7fe fa25 	bl	8000d70 <main>
  bx lr
 8002926:	4770      	bx	lr
  ldr r0, =_sdata
 8002928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800292c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8002930:	08006030 	.word	0x08006030
  ldr r2, =_sbss
 8002934:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8002938:	200035ac 	.word	0x200035ac

0800293c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800293c:	e7fe      	b.n	800293c <ADC1_2_IRQHandler>
	...

08002940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002944:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <HAL_Init+0x28>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a07      	ldr	r2, [pc, #28]	@ (8002968 <HAL_Init+0x28>)
 800294a:	f043 0310 	orr.w	r3, r3, #16
 800294e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002950:	2003      	movs	r0, #3
 8002952:	f000 fd9f 	bl	8003494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002956:	200f      	movs	r0, #15
 8002958:	f000 f808 	bl	800296c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800295c:	f7ff fdbc 	bl	80024d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40022000 	.word	0x40022000

0800296c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002974:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <HAL_InitTick+0x54>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <HAL_InitTick+0x58>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4619      	mov	r1, r3
 800297e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002982:	fbb3 f3f1 	udiv	r3, r3, r1
 8002986:	fbb2 f3f3 	udiv	r3, r2, r3
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fdb7 	bl	80034fe <HAL_SYSTICK_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e00e      	b.n	80029b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b0f      	cmp	r3, #15
 800299e:	d80a      	bhi.n	80029b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a0:	2200      	movs	r2, #0
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295
 80029a8:	f000 fd7f 	bl	80034aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029ac:	4a06      	ldr	r2, [pc, #24]	@ (80029c8 <HAL_InitTick+0x5c>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000030 	.word	0x20000030
 80029c4:	20000038 	.word	0x20000038
 80029c8:	20000034 	.word	0x20000034

080029cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d0:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <HAL_IncTick+0x1c>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <HAL_IncTick+0x20>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	4a03      	ldr	r2, [pc, #12]	@ (80029ec <HAL_IncTick+0x20>)
 80029de:	6013      	str	r3, [r2, #0]
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	20000038 	.word	0x20000038
 80029ec:	200035a8 	.word	0x200035a8

080029f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b02      	ldr	r3, [pc, #8]	@ (8002a00 <HAL_GetTick+0x10>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	200035a8 	.word	0x200035a8

08002a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff fff0 	bl	80029f0 <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d005      	beq.n	8002a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <HAL_Delay+0x44>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a2a:	bf00      	nop
 8002a2c:	f7ff ffe0 	bl	80029f0 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d8f7      	bhi.n	8002a2c <HAL_Delay+0x28>
  {
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000038 	.word	0x20000038

08002a4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0be      	b.n	8002bec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe f8f0 	bl	8000c70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fbf1 	bl	8003278 <ADC_ConversionStop_Disable>
 8002a96:	4603      	mov	r3, r0
 8002a98:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 8099 	bne.w	8002bda <HAL_ADC_Init+0x18e>
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 8095 	bne.w	8002bda <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ab8:	f023 0302 	bic.w	r3, r3, #2
 8002abc:	f043 0202 	orr.w	r2, r3, #2
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002acc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7b1b      	ldrb	r3, [r3, #12]
 8002ad2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ad4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ae4:	d003      	beq.n	8002aee <HAL_ADC_Init+0xa2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d102      	bne.n	8002af4 <HAL_ADC_Init+0xa8>
 8002aee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002af2:	e000      	b.n	8002af6 <HAL_ADC_Init+0xaa>
 8002af4:	2300      	movs	r3, #0
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7d1b      	ldrb	r3, [r3, #20]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d119      	bne.n	8002b38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7b1b      	ldrb	r3, [r3, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	035a      	lsls	r2, r3, #13
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	e00b      	b.n	8002b38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	f043 0201 	orr.w	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	4b28      	ldr	r3, [pc, #160]	@ (8002bf4 <HAL_ADC_Init+0x1a8>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b68:	d003      	beq.n	8002b72 <HAL_ADC_Init+0x126>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d104      	bne.n	8002b7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	051b      	lsls	r3, r3, #20
 8002b7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	4b18      	ldr	r3, [pc, #96]	@ (8002bf8 <HAL_ADC_Init+0x1ac>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bb6:	e018      	b.n	8002bea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	f023 0312 	bic.w	r3, r3, #18
 8002bc0:	f043 0210 	orr.w	r2, r3, #16
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bcc:	f043 0201 	orr.w	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bd8:	e007      	b.n	8002bea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bde:	f043 0210 	orr.w	r2, r3, #16
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	ffe1f7fd 	.word	0xffe1f7fd
 8002bf8:	ff1f0efe 	.word	0xff1f0efe

08002bfc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_Start+0x1a>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e098      	b.n	8002d48 <HAL_ADC_Start+0x14c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fad0 	bl	80031c4 <ADC_Enable>
 8002c24:	4603      	mov	r3, r0
 8002c26:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 8087 	bne.w	8002d3e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a41      	ldr	r2, [pc, #260]	@ (8002d50 <HAL_ADC_Start+0x154>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d105      	bne.n	8002c5a <HAL_ADC_Start+0x5e>
 8002c4e:	4b41      	ldr	r3, [pc, #260]	@ (8002d54 <HAL_ADC_Start+0x158>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d115      	bne.n	8002c86 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d026      	beq.n	8002cc2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c84:	e01d      	b.n	8002cc2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2f      	ldr	r2, [pc, #188]	@ (8002d54 <HAL_ADC_Start+0x158>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d004      	beq.n	8002ca6 <HAL_ADC_Start+0xaa>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d50 <HAL_ADC_Start+0x154>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_ADC_Start+0xc6>
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d54 <HAL_ADC_Start+0x158>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd2:	f023 0206 	bic.w	r2, r3, #6
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002cda:	e002      	b.n	8002ce2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f06f 0202 	mvn.w	r2, #2
 8002cf2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002cfe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002d02:	d113      	bne.n	8002d2c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d08:	4a11      	ldr	r2, [pc, #68]	@ (8002d50 <HAL_ADC_Start+0x154>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d105      	bne.n	8002d1a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d0e:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <HAL_ADC_Start+0x158>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d108      	bne.n	8002d2c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	e00c      	b.n	8002d46 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	e003      	b.n	8002d46 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40012800 	.word	0x40012800
 8002d54:	40012400 	.word	0x40012400

08002d58 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_Stop+0x1a>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e01a      	b.n	8002da8 <HAL_ADC_Stop+0x50>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa7c 	bl	8003278 <ADC_ConversionStop_Disable>
 8002d80:	4603      	mov	r3, r0
 8002d82:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dc6:	f7ff fe13 	bl	80029f0 <HAL_GetTick>
 8002dca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dde:	f043 0220 	orr.w	r2, r3, #32
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0d3      	b.n	8002f9a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d131      	bne.n	8002e64 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e06:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d12a      	bne.n	8002e64 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e0e:	e021      	b.n	8002e54 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d01d      	beq.n	8002e54 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <HAL_ADC_PollForConversion+0x7e>
 8002e1e:	f7ff fde7 	bl	80029f0 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d212      	bcs.n	8002e54 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e40:	f043 0204 	orr.w	r2, r3, #4
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0a2      	b.n	8002f9a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0d6      	beq.n	8002e10 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e62:	e070      	b.n	8002f46 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e64:	4b4f      	ldr	r3, [pc, #316]	@ (8002fa4 <HAL_ADC_PollForConversion+0x1f4>)
 8002e66:	681c      	ldr	r4, [r3, #0]
 8002e68:	2002      	movs	r0, #2
 8002e6a:	f001 fc21 	bl	80046b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6919      	ldr	r1, [r3, #16]
 8002e7a:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa8 <HAL_ADC_PollForConversion+0x1f8>)
 8002e7c:	400b      	ands	r3, r1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_ADC_PollForConversion+0x104>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68d9      	ldr	r1, [r3, #12]
 8002e88:	4b48      	ldr	r3, [pc, #288]	@ (8002fac <HAL_ADC_PollForConversion+0x1fc>)
 8002e8a:	400b      	ands	r3, r1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d111      	bne.n	8002eb4 <HAL_ADC_PollForConversion+0x104>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6919      	ldr	r1, [r3, #16]
 8002e96:	4b46      	ldr	r3, [pc, #280]	@ (8002fb0 <HAL_ADC_PollForConversion+0x200>)
 8002e98:	400b      	ands	r3, r1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d108      	bne.n	8002eb0 <HAL_ADC_PollForConversion+0x100>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68d9      	ldr	r1, [r3, #12]
 8002ea4:	4b43      	ldr	r3, [pc, #268]	@ (8002fb4 <HAL_ADC_PollForConversion+0x204>)
 8002ea6:	400b      	ands	r3, r1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_ADC_PollForConversion+0x100>
 8002eac:	2314      	movs	r3, #20
 8002eae:	e020      	b.n	8002ef2 <HAL_ADC_PollForConversion+0x142>
 8002eb0:	2329      	movs	r3, #41	@ 0x29
 8002eb2:	e01e      	b.n	8002ef2 <HAL_ADC_PollForConversion+0x142>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6919      	ldr	r1, [r3, #16]
 8002eba:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb0 <HAL_ADC_PollForConversion+0x200>)
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_ADC_PollForConversion+0x120>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68d9      	ldr	r1, [r3, #12]
 8002ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb4 <HAL_ADC_PollForConversion+0x204>)
 8002eca:	400b      	ands	r3, r1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00d      	beq.n	8002eec <HAL_ADC_PollForConversion+0x13c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6919      	ldr	r1, [r3, #16]
 8002ed6:	4b38      	ldr	r3, [pc, #224]	@ (8002fb8 <HAL_ADC_PollForConversion+0x208>)
 8002ed8:	400b      	ands	r3, r1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d108      	bne.n	8002ef0 <HAL_ADC_PollForConversion+0x140>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68d9      	ldr	r1, [r3, #12]
 8002ee4:	4b34      	ldr	r3, [pc, #208]	@ (8002fb8 <HAL_ADC_PollForConversion+0x208>)
 8002ee6:	400b      	ands	r3, r1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_PollForConversion+0x140>
 8002eec:	2354      	movs	r3, #84	@ 0x54
 8002eee:	e000      	b.n	8002ef2 <HAL_ADC_PollForConversion+0x142>
 8002ef0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ef8:	e021      	b.n	8002f3e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d01a      	beq.n	8002f38 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_ADC_PollForConversion+0x168>
 8002f08:	f7ff fd72 	bl	80029f0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d20f      	bcs.n	8002f38 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d90b      	bls.n	8002f38 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f24:	f043 0204 	orr.w	r2, r3, #4
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e030      	b.n	8002f9a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d8d9      	bhi.n	8002efa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f06f 0212 	mvn.w	r2, #18
 8002f4e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002f66:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002f6a:	d115      	bne.n	8002f98 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d105      	bne.n	8002f98 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd90      	pop	{r4, r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000030 	.word	0x20000030
 8002fa8:	24924924 	.word	0x24924924
 8002fac:	00924924 	.word	0x00924924
 8002fb0:	12492492 	.word	0x12492492
 8002fb4:	00492492 	.word	0x00492492
 8002fb8:	00249249 	.word	0x00249249

08002fbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x20>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e0dc      	b.n	80031ae <HAL_ADC_ConfigChannel+0x1da>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b06      	cmp	r3, #6
 8003002:	d81c      	bhi.n	800303e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	3b05      	subs	r3, #5
 8003016:	221f      	movs	r2, #31
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	4019      	ands	r1, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	3b05      	subs	r3, #5
 8003030:	fa00 f203 	lsl.w	r2, r0, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	635a      	str	r2, [r3, #52]	@ 0x34
 800303c:	e03c      	b.n	80030b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b0c      	cmp	r3, #12
 8003044:	d81c      	bhi.n	8003080 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	3b23      	subs	r3, #35	@ 0x23
 8003058:	221f      	movs	r2, #31
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	4019      	ands	r1, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	3b23      	subs	r3, #35	@ 0x23
 8003072:	fa00 f203 	lsl.w	r2, r0, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
 800307e:	e01b      	b.n	80030b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	3b41      	subs	r3, #65	@ 0x41
 8003092:	221f      	movs	r2, #31
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	4019      	ands	r1, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	3b41      	subs	r3, #65	@ 0x41
 80030ac:	fa00 f203 	lsl.w	r2, r0, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b09      	cmp	r3, #9
 80030be:	d91c      	bls.n	80030fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68d9      	ldr	r1, [r3, #12]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	3b1e      	subs	r3, #30
 80030d2:	2207      	movs	r2, #7
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	4019      	ands	r1, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6898      	ldr	r0, [r3, #8]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	3b1e      	subs	r3, #30
 80030ec:	fa00 f203 	lsl.w	r2, r0, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	e019      	b.n	800312e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6919      	ldr	r1, [r3, #16]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	2207      	movs	r2, #7
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	4019      	ands	r1, r3
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6898      	ldr	r0, [r3, #8]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	fa00 f203 	lsl.w	r2, r0, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b10      	cmp	r3, #16
 8003134:	d003      	beq.n	800313e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800313a:	2b11      	cmp	r3, #17
 800313c:	d132      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1d      	ldr	r2, [pc, #116]	@ (80031b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d125      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d126      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003164:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b10      	cmp	r3, #16
 800316c:	d11a      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800316e:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <HAL_ADC_ConfigChannel+0x1e8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a13      	ldr	r2, [pc, #76]	@ (80031c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	0c9a      	lsrs	r2, r3, #18
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003184:	e002      	b.n	800318c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3b01      	subs	r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f9      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x1b2>
 8003192:	e007      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	40012400 	.word	0x40012400
 80031bc:	20000030 	.word	0x20000030
 80031c0:	431bde83 	.word	0x431bde83

080031c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d040      	beq.n	8003264 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003270 <ADC_Enable+0xac>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003274 <ADC_Enable+0xb0>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	0c9b      	lsrs	r3, r3, #18
 80031fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003200:	e002      	b.n	8003208 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3b01      	subs	r3, #1
 8003206:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f9      	bne.n	8003202 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800320e:	f7ff fbef 	bl	80029f0 <HAL_GetTick>
 8003212:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003214:	e01f      	b.n	8003256 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003216:	f7ff fbeb 	bl	80029f0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d918      	bls.n	8003256 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b01      	cmp	r3, #1
 8003230:	d011      	beq.n	8003256 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003236:	f043 0210 	orr.w	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003242:	f043 0201 	orr.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e007      	b.n	8003266 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d1d8      	bne.n	8003216 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000030 	.word	0x20000030
 8003274:	431bde83 	.word	0x431bde83

08003278 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d12e      	bne.n	80032f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032a2:	f7ff fba5 	bl	80029f0 <HAL_GetTick>
 80032a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032a8:	e01b      	b.n	80032e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032aa:	f7ff fba1 	bl	80029f0 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d914      	bls.n	80032e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d10d      	bne.n	80032e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ca:	f043 0210 	orr.w	r2, r3, #16
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d6:	f043 0201 	orr.w	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e007      	b.n	80032f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d0dc      	beq.n	80032aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800330c:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800332c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332e:	4a04      	ldr	r2, [pc, #16]	@ (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003348:	4b04      	ldr	r3, [pc, #16]	@ (800335c <__NVIC_GetPriorityGrouping+0x18>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0307 	and.w	r3, r3, #7
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db0b      	blt.n	800338a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	f003 021f 	and.w	r2, r3, #31
 8003378:	4906      	ldr	r1, [pc, #24]	@ (8003394 <__NVIC_EnableIRQ+0x34>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2001      	movs	r0, #1
 8003382:	fa00 f202 	lsl.w	r2, r0, r2
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100

08003398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	db0a      	blt.n	80033c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	490c      	ldr	r1, [pc, #48]	@ (80033e4 <__NVIC_SetPriority+0x4c>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	0112      	lsls	r2, r2, #4
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	440b      	add	r3, r1
 80033bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c0:	e00a      	b.n	80033d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4908      	ldr	r1, [pc, #32]	@ (80033e8 <__NVIC_SetPriority+0x50>)
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	3b04      	subs	r3, #4
 80033d0:	0112      	lsls	r2, r2, #4
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	440b      	add	r3, r1
 80033d6:	761a      	strb	r2, [r3, #24]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000e100 	.word	0xe000e100
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	@ 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f1c3 0307 	rsb	r3, r3, #7
 8003406:	2b04      	cmp	r3, #4
 8003408:	bf28      	it	cs
 800340a:	2304      	movcs	r3, #4
 800340c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3304      	adds	r3, #4
 8003412:	2b06      	cmp	r3, #6
 8003414:	d902      	bls.n	800341c <NVIC_EncodePriority+0x30>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3b03      	subs	r3, #3
 800341a:	e000      	b.n	800341e <NVIC_EncodePriority+0x32>
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	401a      	ands	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003434:	f04f 31ff 	mov.w	r1, #4294967295
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	43d9      	mvns	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003444:	4313      	orrs	r3, r2
         );
}
 8003446:	4618      	mov	r0, r3
 8003448:	3724      	adds	r7, #36	@ 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003460:	d301      	bcc.n	8003466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003462:	2301      	movs	r3, #1
 8003464:	e00f      	b.n	8003486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003466:	4a0a      	ldr	r2, [pc, #40]	@ (8003490 <SysTick_Config+0x40>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346e:	210f      	movs	r1, #15
 8003470:	f04f 30ff 	mov.w	r0, #4294967295
 8003474:	f7ff ff90 	bl	8003398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003478:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <SysTick_Config+0x40>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347e:	4b04      	ldr	r3, [pc, #16]	@ (8003490 <SysTick_Config+0x40>)
 8003480:	2207      	movs	r2, #7
 8003482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	e000e010 	.word	0xe000e010

08003494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff2d 	bl	80032fc <__NVIC_SetPriorityGrouping>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034bc:	f7ff ff42 	bl	8003344 <__NVIC_GetPriorityGrouping>
 80034c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	6978      	ldr	r0, [r7, #20]
 80034c8:	f7ff ff90 	bl	80033ec <NVIC_EncodePriority>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff5f 	bl	8003398 <__NVIC_SetPriority>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff35 	bl	8003360 <__NVIC_EnableIRQ>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffa2 	bl	8003450 <SysTick_Config>
 800350c:	4603      	mov	r3, r0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e043      	b.n	80035b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	4b22      	ldr	r3, [pc, #136]	@ (80035c0 <HAL_DMA_Init+0xa8>)
 8003536:	4413      	add	r3, r2
 8003538:	4a22      	ldr	r2, [pc, #136]	@ (80035c4 <HAL_DMA_Init+0xac>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	009a      	lsls	r2, r3, #2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1f      	ldr	r2, [pc, #124]	@ (80035c8 <HAL_DMA_Init+0xb0>)
 800354a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003562:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003566:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	bffdfff8 	.word	0xbffdfff8
 80035c4:	cccccccd 	.word	0xcccccccd
 80035c8:	40020000 	.word	0x40020000

080035cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_DMA_Start_IT+0x20>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e04b      	b.n	8003684 <HAL_DMA_Start_IT+0xb8>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d13a      	bne.n	8003676 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f9af 	bl	8003988 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 020e 	orr.w	r2, r2, #14
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e00f      	b.n	8003664 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0204 	bic.w	r2, r2, #4
 8003652:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 020a 	orr.w	r2, r2, #10
 8003662:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e005      	b.n	8003682 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800367e:	2302      	movs	r3, #2
 8003680:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003682:	7dfb      	ldrb	r3, [r7, #23]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d005      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2204      	movs	r2, #4
 80036a8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
 80036ae:	e051      	b.n	8003754 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 020e 	bic.w	r2, r2, #14
 80036be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a22      	ldr	r2, [pc, #136]	@ (8003760 <HAL_DMA_Abort_IT+0xd4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d029      	beq.n	800372e <HAL_DMA_Abort_IT+0xa2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a21      	ldr	r2, [pc, #132]	@ (8003764 <HAL_DMA_Abort_IT+0xd8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d022      	beq.n	800372a <HAL_DMA_Abort_IT+0x9e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003768 <HAL_DMA_Abort_IT+0xdc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01a      	beq.n	8003724 <HAL_DMA_Abort_IT+0x98>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1e      	ldr	r2, [pc, #120]	@ (800376c <HAL_DMA_Abort_IT+0xe0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d012      	beq.n	800371e <HAL_DMA_Abort_IT+0x92>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003770 <HAL_DMA_Abort_IT+0xe4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00a      	beq.n	8003718 <HAL_DMA_Abort_IT+0x8c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1b      	ldr	r2, [pc, #108]	@ (8003774 <HAL_DMA_Abort_IT+0xe8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d102      	bne.n	8003712 <HAL_DMA_Abort_IT+0x86>
 800370c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003710:	e00e      	b.n	8003730 <HAL_DMA_Abort_IT+0xa4>
 8003712:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003716:	e00b      	b.n	8003730 <HAL_DMA_Abort_IT+0xa4>
 8003718:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800371c:	e008      	b.n	8003730 <HAL_DMA_Abort_IT+0xa4>
 800371e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003722:	e005      	b.n	8003730 <HAL_DMA_Abort_IT+0xa4>
 8003724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003728:	e002      	b.n	8003730 <HAL_DMA_Abort_IT+0xa4>
 800372a:	2310      	movs	r3, #16
 800372c:	e000      	b.n	8003730 <HAL_DMA_Abort_IT+0xa4>
 800372e:	2301      	movs	r3, #1
 8003730:	4a11      	ldr	r2, [pc, #68]	@ (8003778 <HAL_DMA_Abort_IT+0xec>)
 8003732:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
    } 
  }
  return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40020008 	.word	0x40020008
 8003764:	4002001c 	.word	0x4002001c
 8003768:	40020030 	.word	0x40020030
 800376c:	40020044 	.word	0x40020044
 8003770:	40020058 	.word	0x40020058
 8003774:	4002006c 	.word	0x4002006c
 8003778:	40020000 	.word	0x40020000

0800377c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	2204      	movs	r2, #4
 800379a:	409a      	lsls	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d04f      	beq.n	8003844 <HAL_DMA_IRQHandler+0xc8>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d04a      	beq.n	8003844 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0204 	bic.w	r2, r2, #4
 80037ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a66      	ldr	r2, [pc, #408]	@ (800396c <HAL_DMA_IRQHandler+0x1f0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d029      	beq.n	800382a <HAL_DMA_IRQHandler+0xae>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a65      	ldr	r2, [pc, #404]	@ (8003970 <HAL_DMA_IRQHandler+0x1f4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <HAL_DMA_IRQHandler+0xaa>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a63      	ldr	r2, [pc, #396]	@ (8003974 <HAL_DMA_IRQHandler+0x1f8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01a      	beq.n	8003820 <HAL_DMA_IRQHandler+0xa4>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a62      	ldr	r2, [pc, #392]	@ (8003978 <HAL_DMA_IRQHandler+0x1fc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d012      	beq.n	800381a <HAL_DMA_IRQHandler+0x9e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a60      	ldr	r2, [pc, #384]	@ (800397c <HAL_DMA_IRQHandler+0x200>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00a      	beq.n	8003814 <HAL_DMA_IRQHandler+0x98>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a5f      	ldr	r2, [pc, #380]	@ (8003980 <HAL_DMA_IRQHandler+0x204>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d102      	bne.n	800380e <HAL_DMA_IRQHandler+0x92>
 8003808:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800380c:	e00e      	b.n	800382c <HAL_DMA_IRQHandler+0xb0>
 800380e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003812:	e00b      	b.n	800382c <HAL_DMA_IRQHandler+0xb0>
 8003814:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003818:	e008      	b.n	800382c <HAL_DMA_IRQHandler+0xb0>
 800381a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800381e:	e005      	b.n	800382c <HAL_DMA_IRQHandler+0xb0>
 8003820:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003824:	e002      	b.n	800382c <HAL_DMA_IRQHandler+0xb0>
 8003826:	2340      	movs	r3, #64	@ 0x40
 8003828:	e000      	b.n	800382c <HAL_DMA_IRQHandler+0xb0>
 800382a:	2304      	movs	r3, #4
 800382c:	4a55      	ldr	r2, [pc, #340]	@ (8003984 <HAL_DMA_IRQHandler+0x208>)
 800382e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8094 	beq.w	8003962 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003842:	e08e      	b.n	8003962 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	2202      	movs	r2, #2
 800384a:	409a      	lsls	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d056      	beq.n	8003902 <HAL_DMA_IRQHandler+0x186>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d051      	beq.n	8003902 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 020a 	bic.w	r2, r2, #10
 800387a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a38      	ldr	r2, [pc, #224]	@ (800396c <HAL_DMA_IRQHandler+0x1f0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d029      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x166>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a37      	ldr	r2, [pc, #220]	@ (8003970 <HAL_DMA_IRQHandler+0x1f4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d022      	beq.n	80038de <HAL_DMA_IRQHandler+0x162>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a35      	ldr	r2, [pc, #212]	@ (8003974 <HAL_DMA_IRQHandler+0x1f8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01a      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x15c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a34      	ldr	r2, [pc, #208]	@ (8003978 <HAL_DMA_IRQHandler+0x1fc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d012      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x156>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a32      	ldr	r2, [pc, #200]	@ (800397c <HAL_DMA_IRQHandler+0x200>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00a      	beq.n	80038cc <HAL_DMA_IRQHandler+0x150>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a31      	ldr	r2, [pc, #196]	@ (8003980 <HAL_DMA_IRQHandler+0x204>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d102      	bne.n	80038c6 <HAL_DMA_IRQHandler+0x14a>
 80038c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80038c4:	e00e      	b.n	80038e4 <HAL_DMA_IRQHandler+0x168>
 80038c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038ca:	e00b      	b.n	80038e4 <HAL_DMA_IRQHandler+0x168>
 80038cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038d0:	e008      	b.n	80038e4 <HAL_DMA_IRQHandler+0x168>
 80038d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038d6:	e005      	b.n	80038e4 <HAL_DMA_IRQHandler+0x168>
 80038d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038dc:	e002      	b.n	80038e4 <HAL_DMA_IRQHandler+0x168>
 80038de:	2320      	movs	r3, #32
 80038e0:	e000      	b.n	80038e4 <HAL_DMA_IRQHandler+0x168>
 80038e2:	2302      	movs	r3, #2
 80038e4:	4a27      	ldr	r2, [pc, #156]	@ (8003984 <HAL_DMA_IRQHandler+0x208>)
 80038e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d034      	beq.n	8003962 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003900:	e02f      	b.n	8003962 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	2208      	movs	r2, #8
 8003908:	409a      	lsls	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d028      	beq.n	8003964 <HAL_DMA_IRQHandler+0x1e8>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d023      	beq.n	8003964 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 020e 	bic.w	r2, r2, #14
 800392a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003934:	2101      	movs	r1, #1
 8003936:	fa01 f202 	lsl.w	r2, r1, r2
 800393a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
    }
  }
  return;
 8003962:	bf00      	nop
 8003964:	bf00      	nop
}
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40020008 	.word	0x40020008
 8003970:	4002001c 	.word	0x4002001c
 8003974:	40020030 	.word	0x40020030
 8003978:	40020044 	.word	0x40020044
 800397c:	40020058 	.word	0x40020058
 8003980:	4002006c 	.word	0x4002006c
 8003984:	40020000 	.word	0x40020000

08003988 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f202 	lsl.w	r2, r1, r2
 80039a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d108      	bne.n	80039c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039c6:	e007      	b.n	80039d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b08b      	sub	sp, #44	@ 0x2c
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039f2:	2300      	movs	r3, #0
 80039f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f6:	e169      	b.n	8003ccc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039f8:	2201      	movs	r2, #1
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	f040 8158 	bne.w	8003cc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4a9a      	ldr	r2, [pc, #616]	@ (8003c84 <HAL_GPIO_Init+0x2a0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d05e      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a20:	4a98      	ldr	r2, [pc, #608]	@ (8003c84 <HAL_GPIO_Init+0x2a0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d875      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a26:	4a98      	ldr	r2, [pc, #608]	@ (8003c88 <HAL_GPIO_Init+0x2a4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d058      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a2c:	4a96      	ldr	r2, [pc, #600]	@ (8003c88 <HAL_GPIO_Init+0x2a4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d86f      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a32:	4a96      	ldr	r2, [pc, #600]	@ (8003c8c <HAL_GPIO_Init+0x2a8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d052      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a38:	4a94      	ldr	r2, [pc, #592]	@ (8003c8c <HAL_GPIO_Init+0x2a8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d869      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a3e:	4a94      	ldr	r2, [pc, #592]	@ (8003c90 <HAL_GPIO_Init+0x2ac>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d04c      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a44:	4a92      	ldr	r2, [pc, #584]	@ (8003c90 <HAL_GPIO_Init+0x2ac>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d863      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a4a:	4a92      	ldr	r2, [pc, #584]	@ (8003c94 <HAL_GPIO_Init+0x2b0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d046      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a50:	4a90      	ldr	r2, [pc, #576]	@ (8003c94 <HAL_GPIO_Init+0x2b0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d85d      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a56:	2b12      	cmp	r3, #18
 8003a58:	d82a      	bhi.n	8003ab0 <HAL_GPIO_Init+0xcc>
 8003a5a:	2b12      	cmp	r3, #18
 8003a5c:	d859      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <HAL_GPIO_Init+0x80>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003adf 	.word	0x08003adf
 8003a68:	08003ab9 	.word	0x08003ab9
 8003a6c:	08003acb 	.word	0x08003acb
 8003a70:	08003b0d 	.word	0x08003b0d
 8003a74:	08003b13 	.word	0x08003b13
 8003a78:	08003b13 	.word	0x08003b13
 8003a7c:	08003b13 	.word	0x08003b13
 8003a80:	08003b13 	.word	0x08003b13
 8003a84:	08003b13 	.word	0x08003b13
 8003a88:	08003b13 	.word	0x08003b13
 8003a8c:	08003b13 	.word	0x08003b13
 8003a90:	08003b13 	.word	0x08003b13
 8003a94:	08003b13 	.word	0x08003b13
 8003a98:	08003b13 	.word	0x08003b13
 8003a9c:	08003b13 	.word	0x08003b13
 8003aa0:	08003b13 	.word	0x08003b13
 8003aa4:	08003b13 	.word	0x08003b13
 8003aa8:	08003ac1 	.word	0x08003ac1
 8003aac:	08003ad5 	.word	0x08003ad5
 8003ab0:	4a79      	ldr	r2, [pc, #484]	@ (8003c98 <HAL_GPIO_Init+0x2b4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ab6:	e02c      	b.n	8003b12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	623b      	str	r3, [r7, #32]
          break;
 8003abe:	e029      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	623b      	str	r3, [r7, #32]
          break;
 8003ac8:	e024      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	623b      	str	r3, [r7, #32]
          break;
 8003ad2:	e01f      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	623b      	str	r3, [r7, #32]
          break;
 8003adc:	e01a      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	623b      	str	r3, [r7, #32]
          break;
 8003aea:	e013      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d105      	bne.n	8003b00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003af4:	2308      	movs	r3, #8
 8003af6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	611a      	str	r2, [r3, #16]
          break;
 8003afe:	e009      	b.n	8003b14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b00:	2308      	movs	r3, #8
 8003b02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	615a      	str	r2, [r3, #20]
          break;
 8003b0a:	e003      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	623b      	str	r3, [r7, #32]
          break;
 8003b10:	e000      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          break;
 8003b12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2bff      	cmp	r3, #255	@ 0xff
 8003b18:	d801      	bhi.n	8003b1e <HAL_GPIO_Init+0x13a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	e001      	b.n	8003b22 <HAL_GPIO_Init+0x13e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2bff      	cmp	r3, #255	@ 0xff
 8003b28:	d802      	bhi.n	8003b30 <HAL_GPIO_Init+0x14c>
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	e002      	b.n	8003b36 <HAL_GPIO_Init+0x152>
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	3b08      	subs	r3, #8
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	210f      	movs	r1, #15
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	401a      	ands	r2, r3
 8003b48:	6a39      	ldr	r1, [r7, #32]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	431a      	orrs	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80b1 	beq.w	8003cc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b64:	4b4d      	ldr	r3, [pc, #308]	@ (8003c9c <HAL_GPIO_Init+0x2b8>)
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	4a4c      	ldr	r2, [pc, #304]	@ (8003c9c <HAL_GPIO_Init+0x2b8>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6193      	str	r3, [r2, #24]
 8003b70:	4b4a      	ldr	r3, [pc, #296]	@ (8003c9c <HAL_GPIO_Init+0x2b8>)
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b7c:	4a48      	ldr	r2, [pc, #288]	@ (8003ca0 <HAL_GPIO_Init+0x2bc>)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	3302      	adds	r3, #2
 8003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	220f      	movs	r2, #15
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a40      	ldr	r2, [pc, #256]	@ (8003ca4 <HAL_GPIO_Init+0x2c0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <HAL_GPIO_Init+0x1ec>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a3f      	ldr	r2, [pc, #252]	@ (8003ca8 <HAL_GPIO_Init+0x2c4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00d      	beq.n	8003bcc <HAL_GPIO_Init+0x1e8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a3e      	ldr	r2, [pc, #248]	@ (8003cac <HAL_GPIO_Init+0x2c8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <HAL_GPIO_Init+0x1e4>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3d      	ldr	r2, [pc, #244]	@ (8003cb0 <HAL_GPIO_Init+0x2cc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_GPIO_Init+0x1e0>
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e006      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	e004      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e002      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd4:	f002 0203 	and.w	r2, r2, #3
 8003bd8:	0092      	lsls	r2, r2, #2
 8003bda:	4093      	lsls	r3, r2
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003be2:	492f      	ldr	r1, [pc, #188]	@ (8003ca0 <HAL_GPIO_Init+0x2bc>)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	3302      	adds	r3, #2
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d006      	beq.n	8003c0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	492c      	ldr	r1, [pc, #176]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	608b      	str	r3, [r1, #8]
 8003c08:	e006      	b.n	8003c18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	4928      	ldr	r1, [pc, #160]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d006      	beq.n	8003c32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c24:	4b23      	ldr	r3, [pc, #140]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	4922      	ldr	r1, [pc, #136]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60cb      	str	r3, [r1, #12]
 8003c30:	e006      	b.n	8003c40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c32:	4b20      	ldr	r3, [pc, #128]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	491e      	ldr	r1, [pc, #120]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d006      	beq.n	8003c5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c4c:	4b19      	ldr	r3, [pc, #100]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	4918      	ldr	r1, [pc, #96]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
 8003c58:	e006      	b.n	8003c68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c5a:	4b16      	ldr	r3, [pc, #88]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	4914      	ldr	r1, [pc, #80]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d021      	beq.n	8003cb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c74:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	490e      	ldr	r1, [pc, #56]	@ (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]
 8003c80:	e021      	b.n	8003cc6 <HAL_GPIO_Init+0x2e2>
 8003c82:	bf00      	nop
 8003c84:	10320000 	.word	0x10320000
 8003c88:	10310000 	.word	0x10310000
 8003c8c:	10220000 	.word	0x10220000
 8003c90:	10210000 	.word	0x10210000
 8003c94:	10120000 	.word	0x10120000
 8003c98:	10110000 	.word	0x10110000
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40010800 	.word	0x40010800
 8003ca8:	40010c00 	.word	0x40010c00
 8003cac:	40011000 	.word	0x40011000
 8003cb0:	40011400 	.word	0x40011400
 8003cb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce8 <HAL_GPIO_Init+0x304>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	4909      	ldr	r1, [pc, #36]	@ (8003ce8 <HAL_GPIO_Init+0x304>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	3301      	adds	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f47f ae8e 	bne.w	80039f8 <HAL_GPIO_Init+0x14>
  }
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	372c      	adds	r7, #44	@ 0x2c
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr
 8003ce8:	40010400 	.word	0x40010400

08003cec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
 8003d08:	e001      	b.n	8003d0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	807b      	strh	r3, [r7, #2]
 8003d26:	4613      	mov	r3, r2
 8003d28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d2a:	787b      	ldrb	r3, [r7, #1]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d30:	887a      	ldrh	r2, [r7, #2]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d36:	e003      	b.n	8003d40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d38:	887b      	ldrh	r3, [r7, #2]
 8003d3a:	041a      	lsls	r2, r3, #16
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	611a      	str	r2, [r3, #16]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr
	...

08003d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e272      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8087 	beq.w	8003e7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d6c:	4b92      	ldr	r3, [pc, #584]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 030c 	and.w	r3, r3, #12
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d00c      	beq.n	8003d92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d78:	4b8f      	ldr	r3, [pc, #572]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d112      	bne.n	8003daa <HAL_RCC_OscConfig+0x5e>
 8003d84:	4b8c      	ldr	r3, [pc, #560]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d90:	d10b      	bne.n	8003daa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d92:	4b89      	ldr	r3, [pc, #548]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d06c      	beq.n	8003e78 <HAL_RCC_OscConfig+0x12c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d168      	bne.n	8003e78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e24c      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x76>
 8003db4:	4b80      	ldr	r3, [pc, #512]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a7f      	ldr	r2, [pc, #508]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	e02e      	b.n	8003e20 <HAL_RCC_OscConfig+0xd4>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x98>
 8003dca:	4b7b      	ldr	r3, [pc, #492]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a7a      	ldr	r2, [pc, #488]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b78      	ldr	r3, [pc, #480]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a77      	ldr	r2, [pc, #476]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e01d      	b.n	8003e20 <HAL_RCC_OscConfig+0xd4>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0xbc>
 8003dee:	4b72      	ldr	r3, [pc, #456]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a71      	ldr	r2, [pc, #452]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6e      	ldr	r2, [pc, #440]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e00b      	b.n	8003e20 <HAL_RCC_OscConfig+0xd4>
 8003e08:	4b6b      	ldr	r3, [pc, #428]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6a      	ldr	r2, [pc, #424]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b68      	ldr	r3, [pc, #416]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a67      	ldr	r2, [pc, #412]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d013      	beq.n	8003e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fe fde2 	bl	80029f0 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fe fdde 	bl	80029f0 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	@ 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e200      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b5d      	ldr	r3, [pc, #372]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0xe4>
 8003e4e:	e014      	b.n	8003e7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fe fdce 	bl	80029f0 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e58:	f7fe fdca 	bl	80029f0 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	@ 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1ec      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6a:	4b53      	ldr	r3, [pc, #332]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x10c>
 8003e76:	e000      	b.n	8003e7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d063      	beq.n	8003f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e86:	4b4c      	ldr	r3, [pc, #304]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e92:	4b49      	ldr	r3, [pc, #292]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d11c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x18c>
 8003e9e:	4b46      	ldr	r3, [pc, #280]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d116      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	4b43      	ldr	r3, [pc, #268]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x176>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e1c0      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4939      	ldr	r1, [pc, #228]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	e03a      	b.n	8003f4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee0:	4b36      	ldr	r3, [pc, #216]	@ (8003fbc <HAL_RCC_OscConfig+0x270>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee6:	f7fe fd83 	bl	80029f0 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eee:	f7fe fd7f 	bl	80029f0 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e1a1      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f00:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4927      	ldr	r1, [pc, #156]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	600b      	str	r3, [r1, #0]
 8003f20:	e015      	b.n	8003f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f22:	4b26      	ldr	r3, [pc, #152]	@ (8003fbc <HAL_RCC_OscConfig+0x270>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fe fd62 	bl	80029f0 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f30:	f7fe fd5e 	bl	80029f0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e180      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f42:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d03a      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d019      	beq.n	8003f96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f62:	4b17      	ldr	r3, [pc, #92]	@ (8003fc0 <HAL_RCC_OscConfig+0x274>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f68:	f7fe fd42 	bl	80029f0 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f70:	f7fe fd3e 	bl	80029f0 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e160      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f82:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f8e:	2001      	movs	r0, #1
 8003f90:	f000 faba 	bl	8004508 <RCC_Delay>
 8003f94:	e01c      	b.n	8003fd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f96:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc0 <HAL_RCC_OscConfig+0x274>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9c:	f7fe fd28 	bl	80029f0 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa2:	e00f      	b.n	8003fc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa4:	f7fe fd24 	bl	80029f0 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d908      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e146      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	42420000 	.word	0x42420000
 8003fc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc4:	4b92      	ldr	r3, [pc, #584]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e9      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 80a6 	beq.w	800412a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe2:	4b8b      	ldr	r3, [pc, #556]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10d      	bne.n	800400a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	4b88      	ldr	r3, [pc, #544]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	4a87      	ldr	r2, [pc, #540]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff8:	61d3      	str	r3, [r2, #28]
 8003ffa:	4b85      	ldr	r3, [pc, #532]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004006:	2301      	movs	r3, #1
 8004008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400a:	4b82      	ldr	r3, [pc, #520]	@ (8004214 <HAL_RCC_OscConfig+0x4c8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d118      	bne.n	8004048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004016:	4b7f      	ldr	r3, [pc, #508]	@ (8004214 <HAL_RCC_OscConfig+0x4c8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a7e      	ldr	r2, [pc, #504]	@ (8004214 <HAL_RCC_OscConfig+0x4c8>)
 800401c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004022:	f7fe fce5 	bl	80029f0 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402a:	f7fe fce1 	bl	80029f0 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b64      	cmp	r3, #100	@ 0x64
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e103      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403c:	4b75      	ldr	r3, [pc, #468]	@ (8004214 <HAL_RCC_OscConfig+0x4c8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d106      	bne.n	800405e <HAL_RCC_OscConfig+0x312>
 8004050:	4b6f      	ldr	r3, [pc, #444]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	4a6e      	ldr	r2, [pc, #440]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6213      	str	r3, [r2, #32]
 800405c:	e02d      	b.n	80040ba <HAL_RCC_OscConfig+0x36e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10c      	bne.n	8004080 <HAL_RCC_OscConfig+0x334>
 8004066:	4b6a      	ldr	r3, [pc, #424]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	4a69      	ldr	r2, [pc, #420]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	6213      	str	r3, [r2, #32]
 8004072:	4b67      	ldr	r3, [pc, #412]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4a66      	ldr	r2, [pc, #408]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	6213      	str	r3, [r2, #32]
 800407e:	e01c      	b.n	80040ba <HAL_RCC_OscConfig+0x36e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2b05      	cmp	r3, #5
 8004086:	d10c      	bne.n	80040a2 <HAL_RCC_OscConfig+0x356>
 8004088:	4b61      	ldr	r3, [pc, #388]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	4a60      	ldr	r2, [pc, #384]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 800408e:	f043 0304 	orr.w	r3, r3, #4
 8004092:	6213      	str	r3, [r2, #32]
 8004094:	4b5e      	ldr	r3, [pc, #376]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4a5d      	ldr	r2, [pc, #372]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6213      	str	r3, [r2, #32]
 80040a0:	e00b      	b.n	80040ba <HAL_RCC_OscConfig+0x36e>
 80040a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	6213      	str	r3, [r2, #32]
 80040ae:	4b58      	ldr	r3, [pc, #352]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	4a57      	ldr	r2, [pc, #348]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d015      	beq.n	80040ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c2:	f7fe fc95 	bl	80029f0 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c8:	e00a      	b.n	80040e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7fe fc91 	bl	80029f0 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d8:	4293      	cmp	r3, r2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e0b1      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0ee      	beq.n	80040ca <HAL_RCC_OscConfig+0x37e>
 80040ec:	e014      	b.n	8004118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ee:	f7fe fc7f 	bl	80029f0 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f4:	e00a      	b.n	800410c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f6:	f7fe fc7b 	bl	80029f0 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004104:	4293      	cmp	r3, r2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e09b      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410c:	4b40      	ldr	r3, [pc, #256]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1ee      	bne.n	80040f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d105      	bne.n	800412a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800411e:	4b3c      	ldr	r3, [pc, #240]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	4a3b      	ldr	r2, [pc, #236]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8004124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8087 	beq.w	8004242 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004134:	4b36      	ldr	r3, [pc, #216]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 030c 	and.w	r3, r3, #12
 800413c:	2b08      	cmp	r3, #8
 800413e:	d061      	beq.n	8004204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d146      	bne.n	80041d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004148:	4b33      	ldr	r3, [pc, #204]	@ (8004218 <HAL_RCC_OscConfig+0x4cc>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414e:	f7fe fc4f 	bl	80029f0 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004156:	f7fe fc4b 	bl	80029f0 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e06d      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004168:	4b29      	ldr	r3, [pc, #164]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800417c:	d108      	bne.n	8004190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800417e:	4b24      	ldr	r3, [pc, #144]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4921      	ldr	r1, [pc, #132]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004190:	4b1f      	ldr	r3, [pc, #124]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a19      	ldr	r1, [r3, #32]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	430b      	orrs	r3, r1
 80041a2:	491b      	ldr	r1, [pc, #108]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <HAL_RCC_OscConfig+0x4cc>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fe fc1f 	bl	80029f0 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fe fc1b 	bl	80029f0 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e03d      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041c8:	4b11      	ldr	r3, [pc, #68]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x46a>
 80041d4:	e035      	b.n	8004242 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d6:	4b10      	ldr	r3, [pc, #64]	@ (8004218 <HAL_RCC_OscConfig+0x4cc>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fe fc08 	bl	80029f0 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fe fc04 	bl	80029f0 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e026      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f6:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x498>
 8004202:	e01e      	b.n	8004242 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d107      	bne.n	800421c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e019      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
 8004210:	40021000 	.word	0x40021000
 8004214:	40007000 	.word	0x40007000
 8004218:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800421c:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <HAL_RCC_OscConfig+0x500>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	429a      	cmp	r2, r3
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d001      	beq.n	8004242 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000

08004250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0d0      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004264:	4b6a      	ldr	r3, [pc, #424]	@ (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d910      	bls.n	8004294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b67      	ldr	r3, [pc, #412]	@ (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 0207 	bic.w	r2, r3, #7
 800427a:	4965      	ldr	r1, [pc, #404]	@ (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b63      	ldr	r3, [pc, #396]	@ (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e0b8      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d020      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042ac:	4b59      	ldr	r3, [pc, #356]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4a58      	ldr	r2, [pc, #352]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c4:	4b53      	ldr	r3, [pc, #332]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a52      	ldr	r2, [pc, #328]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80042ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d0:	4b50      	ldr	r3, [pc, #320]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	494d      	ldr	r1, [pc, #308]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d040      	beq.n	8004370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	4b47      	ldr	r3, [pc, #284]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d115      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e07f      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d107      	bne.n	800431e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430e:	4b41      	ldr	r3, [pc, #260]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e073      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431e:	4b3d      	ldr	r3, [pc, #244]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e06b      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432e:	4b39      	ldr	r3, [pc, #228]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f023 0203 	bic.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4936      	ldr	r1, [pc, #216]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004340:	f7fe fb56 	bl	80029f0 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	e00a      	b.n	800435e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004348:	f7fe fb52 	bl	80029f0 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e053      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435e:	4b2d      	ldr	r3, [pc, #180]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 020c 	and.w	r2, r3, #12
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	429a      	cmp	r2, r3
 800436e:	d1eb      	bne.n	8004348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004370:	4b27      	ldr	r3, [pc, #156]	@ (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d210      	bcs.n	80043a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	4b24      	ldr	r3, [pc, #144]	@ (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 0207 	bic.w	r2, r3, #7
 8004386:	4922      	ldr	r1, [pc, #136]	@ (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	4313      	orrs	r3, r2
 800438c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438e:	4b20      	ldr	r3, [pc, #128]	@ (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e032      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ac:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4916      	ldr	r1, [pc, #88]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043ca:	4b12      	ldr	r3, [pc, #72]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	490e      	ldr	r1, [pc, #56]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043de:	f000 f821 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 80043e2:	4602      	mov	r2, r0
 80043e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	490a      	ldr	r1, [pc, #40]	@ (8004418 <HAL_RCC_ClockConfig+0x1c8>)
 80043f0:	5ccb      	ldrb	r3, [r1, r3]
 80043f2:	fa22 f303 	lsr.w	r3, r2, r3
 80043f6:	4a09      	ldr	r2, [pc, #36]	@ (800441c <HAL_RCC_ClockConfig+0x1cc>)
 80043f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043fa:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <HAL_RCC_ClockConfig+0x1d0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fab4 	bl	800296c <HAL_InitTick>

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40022000 	.word	0x40022000
 8004414:	40021000 	.word	0x40021000
 8004418:	08005ee8 	.word	0x08005ee8
 800441c:	20000030 	.word	0x20000030
 8004420:	20000034 	.word	0x20000034

08004424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	2300      	movs	r3, #0
 8004438:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800443e:	4b1e      	ldr	r3, [pc, #120]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b04      	cmp	r3, #4
 800444c:	d002      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x30>
 800444e:	2b08      	cmp	r3, #8
 8004450:	d003      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0x36>
 8004452:	e027      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004454:	4b19      	ldr	r3, [pc, #100]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x98>)
 8004456:	613b      	str	r3, [r7, #16]
      break;
 8004458:	e027      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	0c9b      	lsrs	r3, r3, #18
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	4a17      	ldr	r2, [pc, #92]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004464:	5cd3      	ldrb	r3, [r2, r3]
 8004466:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d010      	beq.n	8004494 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004472:	4b11      	ldr	r3, [pc, #68]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	0c5b      	lsrs	r3, r3, #17
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	4a11      	ldr	r2, [pc, #68]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800447e:	5cd3      	ldrb	r3, [r2, r3]
 8004480:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a0d      	ldr	r2, [pc, #52]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x98>)
 8004486:	fb03 f202 	mul.w	r2, r3, r2
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	e004      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a0c      	ldr	r2, [pc, #48]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004498:	fb02 f303 	mul.w	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	613b      	str	r3, [r7, #16]
      break;
 80044a2:	e002      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044a4:	4b05      	ldr	r3, [pc, #20]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x98>)
 80044a6:	613b      	str	r3, [r7, #16]
      break;
 80044a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044aa:	693b      	ldr	r3, [r7, #16]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	007a1200 	.word	0x007a1200
 80044c0:	08005f00 	.word	0x08005f00
 80044c4:	08005f10 	.word	0x08005f10
 80044c8:	003d0900 	.word	0x003d0900

080044cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044d0:	4b02      	ldr	r3, [pc, #8]	@ (80044dc <HAL_RCC_GetHCLKFreq+0x10>)
 80044d2:	681b      	ldr	r3, [r3, #0]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	20000030 	.word	0x20000030

080044e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044e4:	f7ff fff2 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	0adb      	lsrs	r3, r3, #11
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4903      	ldr	r1, [pc, #12]	@ (8004504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40021000 	.word	0x40021000
 8004504:	08005ef8 	.word	0x08005ef8

08004508 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004510:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <RCC_Delay+0x34>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a0a      	ldr	r2, [pc, #40]	@ (8004540 <RCC_Delay+0x38>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	0a5b      	lsrs	r3, r3, #9
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	fb02 f303 	mul.w	r3, r2, r3
 8004522:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004524:	bf00      	nop
  }
  while (Delay --);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1e5a      	subs	r2, r3, #1
 800452a:	60fa      	str	r2, [r7, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f9      	bne.n	8004524 <RCC_Delay+0x1c>
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	20000030 	.word	0x20000030
 8004540:	10624dd3 	.word	0x10624dd3

08004544 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d07d      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004560:	2300      	movs	r3, #0
 8004562:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004564:	4b4f      	ldr	r3, [pc, #316]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10d      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004570:	4b4c      	ldr	r3, [pc, #304]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	4a4b      	ldr	r2, [pc, #300]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800457a:	61d3      	str	r3, [r2, #28]
 800457c:	4b49      	ldr	r3, [pc, #292]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004588:	2301      	movs	r3, #1
 800458a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458c:	4b46      	ldr	r3, [pc, #280]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d118      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004598:	4b43      	ldr	r3, [pc, #268]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a42      	ldr	r2, [pc, #264]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800459e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a4:	f7fe fa24 	bl	80029f0 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045aa:	e008      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ac:	f7fe fa20 	bl	80029f0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	@ 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e06d      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045be:	4b3a      	ldr	r3, [pc, #232]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045ca:	4b36      	ldr	r3, [pc, #216]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d02e      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d027      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e8:	4b2e      	ldr	r3, [pc, #184]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045f2:	4b2e      	ldr	r3, [pc, #184]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045f8:	4b2c      	ldr	r3, [pc, #176]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045fe:	4a29      	ldr	r2, [pc, #164]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d014      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460e:	f7fe f9ef 	bl	80029f0 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	e00a      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fe f9eb 	bl	80029f0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e036      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	4b1d      	ldr	r3, [pc, #116]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ee      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004638:	4b1a      	ldr	r3, [pc, #104]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4917      	ldr	r1, [pc, #92]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004646:	4313      	orrs	r3, r2
 8004648:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d105      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004650:	4b14      	ldr	r3, [pc, #80]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	4a13      	ldr	r2, [pc, #76]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800465a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004668:	4b0e      	ldr	r3, [pc, #56]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	490b      	ldr	r1, [pc, #44]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004676:	4313      	orrs	r3, r2
 8004678:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004686:	4b07      	ldr	r3, [pc, #28]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	4904      	ldr	r1, [pc, #16]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40007000 	.word	0x40007000
 80046ac:	42420440 	.word	0x42420440

080046b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	2300      	movs	r3, #0
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	2300      	movs	r3, #0
 80046ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b10      	cmp	r3, #16
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	f200 808a 	bhi.w	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d045      	beq.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d075      	beq.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80046e6:	e082      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80046e8:	4b46      	ldr	r3, [pc, #280]	@ (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80046ee:	4b45      	ldr	r3, [pc, #276]	@ (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d07b      	beq.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	0c9b      	lsrs	r3, r3, #18
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	4a41      	ldr	r2, [pc, #260]	@ (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004704:	5cd3      	ldrb	r3, [r2, r3]
 8004706:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d015      	beq.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004712:	4b3c      	ldr	r3, [pc, #240]	@ (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	0c5b      	lsrs	r3, r3, #17
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	4a3b      	ldr	r2, [pc, #236]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800471e:	5cd3      	ldrb	r3, [r2, r3]
 8004720:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00d      	beq.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800472c:	4a38      	ldr	r2, [pc, #224]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	fbb2 f2f3 	udiv	r2, r2, r3
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	e004      	b.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4a34      	ldr	r2, [pc, #208]	@ (8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004748:	4b2e      	ldr	r3, [pc, #184]	@ (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004750:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004754:	d102      	bne.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	61bb      	str	r3, [r7, #24]
      break;
 800475a:	e04a      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4a2d      	ldr	r2, [pc, #180]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	61bb      	str	r3, [r7, #24]
      break;
 800476a:	e042      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800476c:	4b25      	ldr	r3, [pc, #148]	@ (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800477c:	d108      	bne.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004788:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	e01f      	b.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800479a:	d109      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800479c:	4b19      	ldr	r3, [pc, #100]	@ (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80047a8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	e00f      	b.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ba:	d11c      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80047bc:	4b11      	ldr	r3, [pc, #68]	@ (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d016      	beq.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80047c8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80047cc:	61bb      	str	r3, [r7, #24]
      break;
 80047ce:	e012      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80047d0:	e011      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80047d2:	f7ff fe85 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 80047d6:	4602      	mov	r2, r0
 80047d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	0b9b      	lsrs	r3, r3, #14
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	3301      	adds	r3, #1
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	61bb      	str	r3, [r7, #24]
      break;
 80047ec:	e004      	b.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80047ee:	bf00      	nop
 80047f0:	e002      	b.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80047f2:	bf00      	nop
 80047f4:	e000      	b.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80047f6:	bf00      	nop
    }
  }
  return (frequency);
 80047f8:	69bb      	ldr	r3, [r7, #24]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
 8004808:	08005f14 	.word	0x08005f14
 800480c:	08005f24 	.word	0x08005f24
 8004810:	007a1200 	.word	0x007a1200
 8004814:	003d0900 	.word	0x003d0900
 8004818:	aaaaaaab 	.word	0xaaaaaaab

0800481c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e041      	b.n	80048b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd ff82 	bl	800274c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3304      	adds	r3, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f000 fd5a 	bl	8005314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e041      	b.n	8004950 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f839 	bl	8004958 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3304      	adds	r3, #4
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f000 fd0b 	bl	8005314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr
	...

0800496c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e022      	b.n	80049de <HAL_TIM_PWM_Start_DMA+0x72>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b04      	cmp	r3, #4
 800499c:	d109      	bne.n	80049b2 <HAL_TIM_PWM_Start_DMA+0x46>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	bf0c      	ite	eq
 80049aa:	2301      	moveq	r3, #1
 80049ac:	2300      	movne	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	e015      	b.n	80049de <HAL_TIM_PWM_Start_DMA+0x72>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d109      	bne.n	80049cc <HAL_TIM_PWM_Start_DMA+0x60>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e008      	b.n	80049de <HAL_TIM_PWM_Start_DMA+0x72>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
 80049e4:	e153      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <HAL_TIM_PWM_Start_DMA+0x94>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	bf0c      	ite	eq
 80049f8:	2301      	moveq	r3, #1
 80049fa:	2300      	movne	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e022      	b.n	8004a46 <HAL_TIM_PWM_Start_DMA+0xda>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d109      	bne.n	8004a1a <HAL_TIM_PWM_Start_DMA+0xae>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	bf0c      	ite	eq
 8004a12:	2301      	moveq	r3, #1
 8004a14:	2300      	movne	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e015      	b.n	8004a46 <HAL_TIM_PWM_Start_DMA+0xda>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d109      	bne.n	8004a34 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e008      	b.n	8004a46 <HAL_TIM_PWM_Start_DMA+0xda>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	bf0c      	ite	eq
 8004a40:	2301      	moveq	r3, #1
 8004a42:	2300      	movne	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d024      	beq.n	8004a94 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_TIM_PWM_Start_DMA+0xea>
 8004a50:	887b      	ldrh	r3, [r7, #2]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e119      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <HAL_TIM_PWM_Start_DMA+0xfe>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a68:	e016      	b.n	8004a98 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d104      	bne.n	8004a7a <HAL_TIM_PWM_Start_DMA+0x10e>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a78:	e00e      	b.n	8004a98 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d104      	bne.n	8004a8a <HAL_TIM_PWM_Start_DMA+0x11e>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a88:	e006      	b.n	8004a98 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a92:	e001      	b.n	8004a98 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0fa      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b0c      	cmp	r3, #12
 8004a9c:	f200 80ae 	bhi.w	8004bfc <HAL_TIM_PWM_Start_DMA+0x290>
 8004aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004add 	.word	0x08004add
 8004aac:	08004bfd 	.word	0x08004bfd
 8004ab0:	08004bfd 	.word	0x08004bfd
 8004ab4:	08004bfd 	.word	0x08004bfd
 8004ab8:	08004b25 	.word	0x08004b25
 8004abc:	08004bfd 	.word	0x08004bfd
 8004ac0:	08004bfd 	.word	0x08004bfd
 8004ac4:	08004bfd 	.word	0x08004bfd
 8004ac8:	08004b6d 	.word	0x08004b6d
 8004acc:	08004bfd 	.word	0x08004bfd
 8004ad0:	08004bfd 	.word	0x08004bfd
 8004ad4:	08004bfd 	.word	0x08004bfd
 8004ad8:	08004bb5 	.word	0x08004bb5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	4a6d      	ldr	r2, [pc, #436]	@ (8004c98 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004ae2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	4a6c      	ldr	r2, [pc, #432]	@ (8004c9c <HAL_TIM_PWM_Start_DMA+0x330>)
 8004aea:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	4a6b      	ldr	r2, [pc, #428]	@ (8004ca0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3334      	adds	r3, #52	@ 0x34
 8004b00:	461a      	mov	r2, r3
 8004b02:	887b      	ldrh	r3, [r7, #2]
 8004b04:	f7fe fd62 	bl	80035cc <HAL_DMA_Start_IT>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e0bd      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b20:	60da      	str	r2, [r3, #12]
      break;
 8004b22:	e06e      	b.n	8004c02 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b28:	4a5b      	ldr	r2, [pc, #364]	@ (8004c98 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004b2a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b30:	4a5a      	ldr	r2, [pc, #360]	@ (8004c9c <HAL_TIM_PWM_Start_DMA+0x330>)
 8004b32:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	4a59      	ldr	r2, [pc, #356]	@ (8004ca0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3338      	adds	r3, #56	@ 0x38
 8004b48:	461a      	mov	r2, r3
 8004b4a:	887b      	ldrh	r3, [r7, #2]
 8004b4c:	f7fe fd3e 	bl	80035cc <HAL_DMA_Start_IT>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e099      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b68:	60da      	str	r2, [r3, #12]
      break;
 8004b6a:	e04a      	b.n	8004c02 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b70:	4a49      	ldr	r2, [pc, #292]	@ (8004c98 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004b72:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	4a48      	ldr	r2, [pc, #288]	@ (8004c9c <HAL_TIM_PWM_Start_DMA+0x330>)
 8004b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	4a47      	ldr	r2, [pc, #284]	@ (8004ca0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	333c      	adds	r3, #60	@ 0x3c
 8004b90:	461a      	mov	r2, r3
 8004b92:	887b      	ldrh	r3, [r7, #2]
 8004b94:	f7fe fd1a 	bl	80035cc <HAL_DMA_Start_IT>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e075      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bb0:	60da      	str	r2, [r3, #12]
      break;
 8004bb2:	e026      	b.n	8004c02 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb8:	4a37      	ldr	r2, [pc, #220]	@ (8004c98 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004bba:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc0:	4a36      	ldr	r2, [pc, #216]	@ (8004c9c <HAL_TIM_PWM_Start_DMA+0x330>)
 8004bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc8:	4a35      	ldr	r2, [pc, #212]	@ (8004ca0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3340      	adds	r3, #64	@ 0x40
 8004bd8:	461a      	mov	r2, r3
 8004bda:	887b      	ldrh	r3, [r7, #2]
 8004bdc:	f7fe fcf6 	bl	80035cc <HAL_DMA_Start_IT>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e051      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bf8:	60da      	str	r2, [r3, #12]
      break;
 8004bfa:	e002      	b.n	8004c02 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8004c00:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d141      	bne.n	8004c8c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fe0b 	bl	800582c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a22      	ldr	r2, [pc, #136]	@ (8004ca4 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d107      	bne.n	8004c30 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c2e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca4 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00e      	beq.n	8004c58 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c42:	d009      	beq.n	8004c58 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a17      	ldr	r2, [pc, #92]	@ (8004ca8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a16      	ldr	r2, [pc, #88]	@ (8004cac <HAL_TIM_PWM_Start_DMA+0x340>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d111      	bne.n	8004c7c <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b06      	cmp	r3, #6
 8004c68:	d010      	beq.n	8004c8c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0201 	orr.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7a:	e007      	b.n	8004c8c <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	08005205 	.word	0x08005205
 8004c9c:	080052ad 	.word	0x080052ad
 8004ca0:	08005173 	.word	0x08005173
 8004ca4:	40012c00 	.word	0x40012c00
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800

08004cb0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b0c      	cmp	r3, #12
 8004cc2:	d855      	bhi.n	8004d70 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ccc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004d01 	.word	0x08004d01
 8004cd0:	08004d71 	.word	0x08004d71
 8004cd4:	08004d71 	.word	0x08004d71
 8004cd8:	08004d71 	.word	0x08004d71
 8004cdc:	08004d1d 	.word	0x08004d1d
 8004ce0:	08004d71 	.word	0x08004d71
 8004ce4:	08004d71 	.word	0x08004d71
 8004ce8:	08004d71 	.word	0x08004d71
 8004cec:	08004d39 	.word	0x08004d39
 8004cf0:	08004d71 	.word	0x08004d71
 8004cf4:	08004d71 	.word	0x08004d71
 8004cf8:	08004d71 	.word	0x08004d71
 8004cfc:	08004d55 	.word	0x08004d55
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fe fcb9 	bl	800368c <HAL_DMA_Abort_IT>
      break;
 8004d1a:	e02c      	b.n	8004d76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fe fcab 	bl	800368c <HAL_DMA_Abort_IT>
      break;
 8004d36:	e01e      	b.n	8004d76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fe fc9d 	bl	800368c <HAL_DMA_Abort_IT>
      break;
 8004d52:	e010      	b.n	8004d76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fe fc8f 	bl	800368c <HAL_DMA_Abort_IT>
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      break;
 8004d74:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d157      	bne.n	8004e2c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2200      	movs	r2, #0
 8004d82:	6839      	ldr	r1, [r7, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fd51 	bl	800582c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8004e38 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d117      	bne.n	8004dc4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6a1a      	ldr	r2, [r3, #32]
 8004d9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10f      	bne.n	8004dc4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6a1a      	ldr	r2, [r3, #32]
 8004daa:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dc2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6a1a      	ldr	r2, [r3, #32]
 8004dca:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10f      	bne.n	8004df4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6a1a      	ldr	r2, [r3, #32]
 8004dda:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d107      	bne.n	8004df4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e02:	e013      	b.n	8004e2c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d104      	bne.n	8004e14 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e12:	e00b      	b.n	8004e2c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d104      	bne.n	8004e24 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e22:	e003      	b.n	8004e2c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40012c00 	.word	0x40012c00

08004e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e0ae      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b0c      	cmp	r3, #12
 8004e66:	f200 809f 	bhi.w	8004fa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004ea5 	.word	0x08004ea5
 8004e74:	08004fa9 	.word	0x08004fa9
 8004e78:	08004fa9 	.word	0x08004fa9
 8004e7c:	08004fa9 	.word	0x08004fa9
 8004e80:	08004ee5 	.word	0x08004ee5
 8004e84:	08004fa9 	.word	0x08004fa9
 8004e88:	08004fa9 	.word	0x08004fa9
 8004e8c:	08004fa9 	.word	0x08004fa9
 8004e90:	08004f27 	.word	0x08004f27
 8004e94:	08004fa9 	.word	0x08004fa9
 8004e98:	08004fa9 	.word	0x08004fa9
 8004e9c:	08004fa9 	.word	0x08004fa9
 8004ea0:	08004f67 	.word	0x08004f67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 faa0 	bl	80053f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0208 	orr.w	r2, r2, #8
 8004ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0204 	bic.w	r2, r2, #4
 8004ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6999      	ldr	r1, [r3, #24]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	619a      	str	r2, [r3, #24]
      break;
 8004ee2:	e064      	b.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fae6 	bl	80054bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6999      	ldr	r1, [r3, #24]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	021a      	lsls	r2, r3, #8
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	619a      	str	r2, [r3, #24]
      break;
 8004f24:	e043      	b.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fb2f 	bl	8005590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0208 	orr.w	r2, r2, #8
 8004f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0204 	bic.w	r2, r2, #4
 8004f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69d9      	ldr	r1, [r3, #28]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	61da      	str	r2, [r3, #28]
      break;
 8004f64:	e023      	b.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fb79 	bl	8005664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69d9      	ldr	r1, [r3, #28]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	021a      	lsls	r2, r3, #8
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	61da      	str	r2, [r3, #28]
      break;
 8004fa6:	e002      	b.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	75fb      	strb	r3, [r7, #23]
      break;
 8004fac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIM_ConfigClockSource+0x1c>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e0b4      	b.n	8005146 <HAL_TIM_ConfigClockSource+0x186>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005014:	d03e      	beq.n	8005094 <HAL_TIM_ConfigClockSource+0xd4>
 8005016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800501a:	f200 8087 	bhi.w	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800501e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005022:	f000 8086 	beq.w	8005132 <HAL_TIM_ConfigClockSource+0x172>
 8005026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800502a:	d87f      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800502c:	2b70      	cmp	r3, #112	@ 0x70
 800502e:	d01a      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0xa6>
 8005030:	2b70      	cmp	r3, #112	@ 0x70
 8005032:	d87b      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 8005034:	2b60      	cmp	r3, #96	@ 0x60
 8005036:	d050      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x11a>
 8005038:	2b60      	cmp	r3, #96	@ 0x60
 800503a:	d877      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800503c:	2b50      	cmp	r3, #80	@ 0x50
 800503e:	d03c      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0xfa>
 8005040:	2b50      	cmp	r3, #80	@ 0x50
 8005042:	d873      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 8005044:	2b40      	cmp	r3, #64	@ 0x40
 8005046:	d058      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x13a>
 8005048:	2b40      	cmp	r3, #64	@ 0x40
 800504a:	d86f      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800504c:	2b30      	cmp	r3, #48	@ 0x30
 800504e:	d064      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x15a>
 8005050:	2b30      	cmp	r3, #48	@ 0x30
 8005052:	d86b      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 8005054:	2b20      	cmp	r3, #32
 8005056:	d060      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x15a>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d867      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d05c      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x15a>
 8005060:	2b10      	cmp	r3, #16
 8005062:	d05a      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x15a>
 8005064:	e062      	b.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005076:	f000 fbba 	bl	80057ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	609a      	str	r2, [r3, #8]
      break;
 8005092:	e04f      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050a4:	f000 fba3 	bl	80057ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050b6:	609a      	str	r2, [r3, #8]
      break;
 80050b8:	e03c      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c6:	461a      	mov	r2, r3
 80050c8:	f000 fb1a 	bl	8005700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2150      	movs	r1, #80	@ 0x50
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fb71 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 80050d8:	e02c      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e6:	461a      	mov	r2, r3
 80050e8:	f000 fb38 	bl	800575c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2160      	movs	r1, #96	@ 0x60
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fb61 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 80050f8:	e01c      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005106:	461a      	mov	r2, r3
 8005108:	f000 fafa 	bl	8005700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2140      	movs	r1, #64	@ 0x40
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fb51 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 8005118:	e00c      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f000 fb48 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 800512a:	e003      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
      break;
 8005130:	e000      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr

08005160 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	429a      	cmp	r2, r3
 8005188:	d107      	bne.n	800519a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005198:	e02a      	b.n	80051f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d107      	bne.n	80051b4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2202      	movs	r2, #2
 80051a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b2:	e01d      	b.n	80051f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d107      	bne.n	80051ce <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2204      	movs	r2, #4
 80051c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051cc:	e010      	b.n	80051f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d107      	bne.n	80051e8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2208      	movs	r2, #8
 80051dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051e6:	e003      	b.n	80051f0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f7ff ffb5 	bl	8005160 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	771a      	strb	r2, [r3, #28]
}
 80051fc:	bf00      	nop
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005210:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d10b      	bne.n	8005234 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2201      	movs	r2, #1
 8005220:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d136      	bne.n	8005298 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005232:	e031      	b.n	8005298 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	429a      	cmp	r2, r3
 800523c:	d10b      	bne.n	8005256 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2202      	movs	r2, #2
 8005242:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d125      	bne.n	8005298 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005254:	e020      	b.n	8005298 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	429a      	cmp	r2, r3
 800525e:	d10b      	bne.n	8005278 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2204      	movs	r2, #4
 8005264:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d114      	bne.n	8005298 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005276:	e00f      	b.n	8005298 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	429a      	cmp	r2, r3
 8005280:	d10a      	bne.n	8005298 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2208      	movs	r2, #8
 8005286:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d103      	bne.n	8005298 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7fc ff79 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	771a      	strb	r2, [r3, #28]
}
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d103      	bne.n	80052cc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	771a      	strb	r2, [r3, #28]
 80052ca:	e019      	b.n	8005300 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d103      	bne.n	80052de <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2202      	movs	r2, #2
 80052da:	771a      	strb	r2, [r3, #28]
 80052dc:	e010      	b.n	8005300 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d103      	bne.n	80052f0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2204      	movs	r2, #4
 80052ec:	771a      	strb	r2, [r3, #28]
 80052ee:	e007      	b.n	8005300 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d102      	bne.n	8005300 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2208      	movs	r2, #8
 80052fe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff ff24 	bl	800514e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a2f      	ldr	r2, [pc, #188]	@ (80053e4 <TIM_Base_SetConfig+0xd0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00b      	beq.n	8005344 <TIM_Base_SetConfig+0x30>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005332:	d007      	beq.n	8005344 <TIM_Base_SetConfig+0x30>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a2c      	ldr	r2, [pc, #176]	@ (80053e8 <TIM_Base_SetConfig+0xd4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_Base_SetConfig+0x30>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a2b      	ldr	r2, [pc, #172]	@ (80053ec <TIM_Base_SetConfig+0xd8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d108      	bne.n	8005356 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a22      	ldr	r2, [pc, #136]	@ (80053e4 <TIM_Base_SetConfig+0xd0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00b      	beq.n	8005376 <TIM_Base_SetConfig+0x62>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005364:	d007      	beq.n	8005376 <TIM_Base_SetConfig+0x62>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1f      	ldr	r2, [pc, #124]	@ (80053e8 <TIM_Base_SetConfig+0xd4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d003      	beq.n	8005376 <TIM_Base_SetConfig+0x62>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1e      	ldr	r2, [pc, #120]	@ (80053ec <TIM_Base_SetConfig+0xd8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d108      	bne.n	8005388 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800537c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a0d      	ldr	r2, [pc, #52]	@ (80053e4 <TIM_Base_SetConfig+0xd0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d103      	bne.n	80053bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f023 0201 	bic.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	611a      	str	r2, [r3, #16]
  }
}
 80053da:	bf00      	nop
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800

080053f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	f023 0201 	bic.w	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800541e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0303 	bic.w	r3, r3, #3
 8005426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f023 0302 	bic.w	r3, r3, #2
 8005438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a1c      	ldr	r2, [pc, #112]	@ (80054b8 <TIM_OC1_SetConfig+0xc8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d10c      	bne.n	8005466 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f023 0308 	bic.w	r3, r3, #8
 8005452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f023 0304 	bic.w	r3, r3, #4
 8005464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a13      	ldr	r2, [pc, #76]	@ (80054b8 <TIM_OC1_SetConfig+0xc8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d111      	bne.n	8005492 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800547c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	621a      	str	r2, [r3, #32]
}
 80054ac:	bf00      	nop
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40012c00 	.word	0x40012c00

080054bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f023 0210 	bic.w	r2, r3, #16
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0320 	bic.w	r3, r3, #32
 8005506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a1d      	ldr	r2, [pc, #116]	@ (800558c <TIM_OC2_SetConfig+0xd0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d10d      	bne.n	8005538 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005536:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a14      	ldr	r2, [pc, #80]	@ (800558c <TIM_OC2_SetConfig+0xd0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d113      	bne.n	8005568 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800554e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr
 800558c:	40012c00 	.word	0x40012c00

08005590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005660 <TIM_OC3_SetConfig+0xd0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d10d      	bne.n	800560a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a14      	ldr	r2, [pc, #80]	@ (8005660 <TIM_OC3_SetConfig+0xd0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d113      	bne.n	800563a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	621a      	str	r2, [r3, #32]
}
 8005654:	bf00      	nop
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40012c00 	.word	0x40012c00

08005664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800569a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	031b      	lsls	r3, r3, #12
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a0f      	ldr	r2, [pc, #60]	@ (80056fc <TIM_OC4_SetConfig+0x98>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d109      	bne.n	80056d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	019b      	lsls	r3, r3, #6
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	621a      	str	r2, [r3, #32]
}
 80056f2:	bf00      	nop
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr
 80056fc:	40012c00 	.word	0x40012c00

08005700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f023 0201 	bic.w	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800572a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 030a 	bic.w	r3, r3, #10
 800573c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f023 0210 	bic.w	r2, r3, #16
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	031b      	lsls	r3, r3, #12
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005798:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	621a      	str	r2, [r3, #32]
}
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bc80      	pop	{r7}
 80057b8:	4770      	bx	lr

080057ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b085      	sub	sp, #20
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f043 0307 	orr.w	r3, r3, #7
 80057dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	609a      	str	r2, [r3, #8]
}
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr

080057ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b087      	sub	sp, #28
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005808:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	021a      	lsls	r2, r3, #8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	431a      	orrs	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4313      	orrs	r3, r2
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	609a      	str	r2, [r3, #8]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	2201      	movs	r2, #1
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a1a      	ldr	r2, [r3, #32]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	43db      	mvns	r3, r3
 800584e:	401a      	ands	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a1a      	ldr	r2, [r3, #32]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	fa01 f303 	lsl.w	r3, r1, r3
 8005864:	431a      	orrs	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005888:	2302      	movs	r3, #2
 800588a:	e046      	b.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a16      	ldr	r2, [pc, #88]	@ (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d8:	d009      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a12      	ldr	r2, [pc, #72]	@ (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a10      	ldr	r2, [pc, #64]	@ (800592c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10c      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr
 8005924:	40012c00 	.word	0x40012c00
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800

08005930 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005948:	2302      	movs	r3, #2
 800594a:	e03d      	b.n	80059c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *Handle);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fd f812 	bl	8002a04 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *Handle)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 80059f0:	e002      	b.n	80059f8 <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 80059f2:	2001      	movs	r0, #1
 80059f4:	f7ff ffed 	bl	80059d2 <WS28XX_Delay>
  while (Handle->Lock)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	795b      	ldrb	r3, [r3, #5]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f8      	bne.n	80059f2 <WS28XX_Lock+0xa>
  }
  Handle->Lock = 1;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	715a      	strb	r2, [r3, #5]
}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *Handle)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	715a      	strb	r2, [r3, #5]
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
	...

08005a28 <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *Handle, TIM_HandleTypeDef *HTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	4611      	mov	r1, r2
 8005a34:	461a      	mov	r2, r3
 8005a36:	460b      	mov	r3, r1
 8005a38:	80fb      	strh	r3, [r7, #6]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (Handle == NULL || HTim == NULL)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d07b      	beq.n	8005b40 <WS28XX_Init+0x118>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d078      	beq.n	8005b40 <WS28XX_Init+0x118>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 8005a4e:	8c3b      	ldrh	r3, [r7, #32]
 8005a50:	2ba1      	cmp	r3, #161	@ 0xa1
 8005a52:	d874      	bhi.n	8005b3e <WS28XX_Init+0x116>
    {
      break;
    }
    Handle->Channel = Channel;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	797a      	ldrb	r2, [r7, #5]
 8005a58:	711a      	strb	r2, [r3, #4]
    Handle->MaxPixel = Pixel;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8c3a      	ldrh	r2, [r7, #32]
 8005a5e:	815a      	strh	r2, [r3, #10]
    Handle->HTim = HTim;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fa fe6f 	bl	800074c <__aeabi_i2f>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4936      	ldr	r1, [pc, #216]	@ (8005b4c <WS28XX_Init+0x124>)
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fa ff72 	bl	800095c <__aeabi_fdiv>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fa fdae 	bl	80005e0 <__aeabi_fsub>
 8005a84:	4603      	mov	r3, r0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fb f87a 	bl	8000b80 <__aeabi_f2uiz>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(Handle->HTim ,aar_value);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(Handle->HTim, 0);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	629a      	str	r2, [r3, #40]	@ 0x28
    Handle->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8005aac:	6938      	ldr	r0, [r7, #16]
 8005aae:	f7fa fe49 	bl	8000744 <__aeabi_ui2f>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4926      	ldr	r1, [pc, #152]	@ (8005b50 <WS28XX_Init+0x128>)
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fa fe9c 	bl	80007f4 <__aeabi_fmul>
 8005abc:	4603      	mov	r3, r0
 8005abe:	4925      	ldr	r1, [pc, #148]	@ (8005b54 <WS28XX_Init+0x12c>)
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fa ff4b 	bl	800095c <__aeabi_fdiv>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fb f859 	bl	8000b80 <__aeabi_f2uiz>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	80da      	strh	r2, [r3, #6]
    Handle->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8005ad6:	6938      	ldr	r0, [r7, #16]
 8005ad8:	f7fa fe34 	bl	8000744 <__aeabi_ui2f>
 8005adc:	4603      	mov	r3, r0
 8005ade:	491b      	ldr	r1, [pc, #108]	@ (8005b4c <WS28XX_Init+0x124>)
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fa fe87 	bl	80007f4 <__aeabi_fmul>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	491a      	ldr	r1, [pc, #104]	@ (8005b54 <WS28XX_Init+0x12c>)
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fa ff36 	bl	800095c <__aeabi_fdiv>
 8005af0:	4603      	mov	r3, r0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fb f844 	bl	8000b80 <__aeabi_f2uiz>
 8005af8:	4603      	mov	r3, r0
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	811a      	strh	r2, [r3, #8]
    memset(Handle->Pixel, 0, sizeof(Handle->Pixel));
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	330c      	adds	r3, #12
 8005b04:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 f9b3 	bl	8005e76 <memset>
    memset(Handle->Buffer, 0, sizeof(Handle->Buffer));
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8005b16:	f640 721a 	movw	r2, #3866	@ 0xf1a
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 f9aa 	bl	8005e76 <memset>
    HAL_TIM_PWM_Start_DMA(Handle->HTim, Handle->Channel, (const uint32_t*)Handle->Buffer, Pixel);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	791b      	ldrb	r3, [r3, #4]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f203 12ef 	addw	r2, r3, #495	@ 0x1ef
 8005b32:	8c3b      	ldrh	r3, [r7, #32]
 8005b34:	f7fe ff1a 	bl	800496c <HAL_TIM_PWM_Start_DMA>
    answer = true;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	75fb      	strb	r3, [r7, #23]
 8005b3c:	e000      	b.n	8005b40 <WS28XX_Init+0x118>
      break;
 8005b3e:	bf00      	nop
  }
  while (0);

  return answer;
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	3f4ccccd 	.word	0x3f4ccccd
 8005b50:	3ecccccd 	.word	0x3ecccccd
 8005b54:	3fa00000 	.word	0x3fa00000

08005b58 <WS28XX_SetPixel_RGB_888>:
  * @param  Color: RGB888 Color Code
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGB_888(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint32_t Color)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	460b      	mov	r3, r1
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	817b      	strh	r3, [r7, #10]
  bool answer = true;
 8005b66:	2301      	movs	r3, #1
 8005b68:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	895b      	ldrh	r3, [r3, #10]
 8005b6e:	897a      	ldrh	r2, [r7, #10]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d302      	bcc.n	8005b7a <WS28XX_SetPixel_RGB_888+0x22>
    {
      answer = false;
 8005b74:	2300      	movs	r3, #0
 8005b76:	75fb      	strb	r3, [r7, #23]
      break;
 8005b78:	e02b      	b.n	8005bd2 <WS28XX_SetPixel_RGB_888+0x7a>
    }
    Red = ((Color & 0xFF0000) >> 16);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	75bb      	strb	r3, [r7, #22]
    Green = ((Color & 0x00FF00) >> 8);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	0a1b      	lsrs	r3, r3, #8
 8005b84:	757b      	strb	r3, [r7, #21]
    Blue = (Color & 0x0000FF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8005b8a:	7d7b      	ldrb	r3, [r7, #21]
 8005b8c:	897a      	ldrh	r2, [r7, #10]
 8005b8e:	4914      	ldr	r1, [pc, #80]	@ (8005be0 <WS28XX_SetPixel_RGB_888+0x88>)
 8005b90:	5cc8      	ldrb	r0, [r1, r3]
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	4613      	mov	r3, r2
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	4413      	add	r3, r2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8005ba2:	7dbb      	ldrb	r3, [r7, #22]
 8005ba4:	897a      	ldrh	r2, [r7, #10]
 8005ba6:	490e      	ldr	r1, [pc, #56]	@ (8005be0 <WS28XX_SetPixel_RGB_888+0x88>)
 8005ba8:	5cc8      	ldrb	r0, [r1, r3]
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	4613      	mov	r3, r2
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	4413      	add	r3, r2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	330d      	adds	r3, #13
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 8005bba:	7d3b      	ldrb	r3, [r7, #20]
 8005bbc:	897a      	ldrh	r2, [r7, #10]
 8005bbe:	4908      	ldr	r1, [pc, #32]	@ (8005be0 <WS28XX_SetPixel_RGB_888+0x88>)
 8005bc0:	5cc8      	ldrb	r0, [r1, r3]
 8005bc2:	68f9      	ldr	r1, [r7, #12]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	4413      	add	r3, r2
 8005bca:	440b      	add	r3, r1
 8005bcc:	330e      	adds	r3, #14
 8005bce:	4602      	mov	r2, r0
 8005bd0:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	371c      	adds	r7, #28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	08005f28 	.word	0x08005f28

08005be4 <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	4608      	mov	r0, r1
 8005bee:	4611      	mov	r1, r2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	817b      	strh	r3, [r7, #10]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	813b      	strh	r3, [r7, #8]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	71fb      	strb	r3, [r7, #7]
  bool answer = true;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	895b      	ldrh	r3, [r3, #10]
 8005c06:	897a      	ldrh	r2, [r7, #10]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d302      	bcc.n	8005c12 <WS28XX_SetPixel_RGBW_565+0x2e>
    {
      answer = false;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c10:	e051      	b.n	8005cb6 <WS28XX_SetPixel_RGBW_565+0xd2>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 8005c12:	893b      	ldrh	r3, [r7, #8]
 8005c14:	0a1b      	lsrs	r3, r3, #8
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8005c1c:	79fa      	ldrb	r2, [r7, #7]
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	4a28      	ldr	r2, [pc, #160]	@ (8005cc4 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8005c24:	fb82 1203 	smull	r1, r2, r2, r3
 8005c28:	441a      	add	r2, r3
 8005c2a:	11d2      	asrs	r2, r2, #7
 8005c2c:	17db      	asrs	r3, r3, #31
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	75bb      	strb	r3, [r7, #22]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 8005c32:	893b      	ldrh	r3, [r7, #8]
 8005c34:	08db      	lsrs	r3, r3, #3
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8005c3c:	79fa      	ldrb	r2, [r7, #7]
 8005c3e:	fb02 f303 	mul.w	r3, r2, r3
 8005c42:	4a20      	ldr	r2, [pc, #128]	@ (8005cc4 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8005c44:	fb82 1203 	smull	r1, r2, r2, r3
 8005c48:	441a      	add	r2, r3
 8005c4a:	11d2      	asrs	r2, r2, #7
 8005c4c:	17db      	asrs	r3, r3, #31
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	757b      	strb	r3, [r7, #21]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 8005c52:	893b      	ldrh	r3, [r7, #8]
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	79fa      	ldrb	r2, [r7, #7]
 8005c5a:	fb02 f303 	mul.w	r3, r2, r3
 8005c5e:	4a19      	ldr	r2, [pc, #100]	@ (8005cc4 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8005c60:	fb82 1203 	smull	r1, r2, r2, r3
 8005c64:	441a      	add	r2, r3
 8005c66:	11d2      	asrs	r2, r2, #7
 8005c68:	17db      	asrs	r3, r3, #31
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8005c6e:	7d7b      	ldrb	r3, [r7, #21]
 8005c70:	897a      	ldrh	r2, [r7, #10]
 8005c72:	4915      	ldr	r1, [pc, #84]	@ (8005cc8 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8005c74:	5cc8      	ldrb	r0, [r1, r3]
 8005c76:	68f9      	ldr	r1, [r7, #12]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	4413      	add	r3, r2
 8005c7e:	440b      	add	r3, r1
 8005c80:	330c      	adds	r3, #12
 8005c82:	4602      	mov	r2, r0
 8005c84:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8005c86:	7dbb      	ldrb	r3, [r7, #22]
 8005c88:	897a      	ldrh	r2, [r7, #10]
 8005c8a:	490f      	ldr	r1, [pc, #60]	@ (8005cc8 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8005c8c:	5cc8      	ldrb	r0, [r1, r3]
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	4613      	mov	r3, r2
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	4413      	add	r3, r2
 8005c96:	440b      	add	r3, r1
 8005c98:	330d      	adds	r3, #13
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 8005c9e:	7d3b      	ldrb	r3, [r7, #20]
 8005ca0:	897a      	ldrh	r2, [r7, #10]
 8005ca2:	4909      	ldr	r1, [pc, #36]	@ (8005cc8 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8005ca4:	5cc8      	ldrb	r0, [r1, r3]
 8005ca6:	68f9      	ldr	r1, [r7, #12]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	4413      	add	r3, r2
 8005cae:	440b      	add	r3, r1
 8005cb0:	330e      	adds	r3, #14
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8005cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc80      	pop	{r7}
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	80808081 	.word	0x80808081
 8005cc8:	08005f28 	.word	0x08005f28

08005ccc <WS28XX_SetPixel_RGBW_888>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_888(WS28XX_HandleTypeDef *Handle, uint16_t Pixel, uint32_t Color, uint8_t Brightness)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	460b      	mov	r3, r1
 8005cda:	817b      	strh	r3, [r7, #10]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	727b      	strb	r3, [r7, #9]
  bool answer = true;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= Handle->MaxPixel)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	895b      	ldrh	r3, [r3, #10]
 8005ce8:	897a      	ldrh	r2, [r7, #10]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d302      	bcc.n	8005cf4 <WS28XX_SetPixel_RGBW_888+0x28>
    {
      answer = false;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf2:	e043      	b.n	8005d7c <WS28XX_SetPixel_RGBW_888+0xb0>
    }
    Red = ((Color & 0xFF0000) >> 16) * Brightness / 255 ;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	0c1b      	lsrs	r3, r3, #16
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	7a7a      	ldrb	r2, [r7, #9]
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
 8005d00:	4a21      	ldr	r2, [pc, #132]	@ (8005d88 <WS28XX_SetPixel_RGBW_888+0xbc>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	09db      	lsrs	r3, r3, #7
 8005d08:	75bb      	strb	r3, [r7, #22]
    Green = ((Color & 0x00FF00) >> 8) * Brightness / 255;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	0a1b      	lsrs	r3, r3, #8
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	7a7a      	ldrb	r2, [r7, #9]
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	4a1c      	ldr	r2, [pc, #112]	@ (8005d88 <WS28XX_SetPixel_RGBW_888+0xbc>)
 8005d18:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1c:	09db      	lsrs	r3, r3, #7
 8005d1e:	757b      	strb	r3, [r7, #21]
    Blue = (Color & 0x0000FF) * Brightness / 255;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	7a7a      	ldrb	r2, [r7, #9]
 8005d26:	fb02 f303 	mul.w	r3, r2, r3
 8005d2a:	4a17      	ldr	r2, [pc, #92]	@ (8005d88 <WS28XX_SetPixel_RGBW_888+0xbc>)
 8005d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d30:	09db      	lsrs	r3, r3, #7
 8005d32:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    Handle->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8005d34:	7d7b      	ldrb	r3, [r7, #21]
 8005d36:	897a      	ldrh	r2, [r7, #10]
 8005d38:	4914      	ldr	r1, [pc, #80]	@ (8005d8c <WS28XX_SetPixel_RGBW_888+0xc0>)
 8005d3a:	5cc8      	ldrb	r0, [r1, r3]
 8005d3c:	68f9      	ldr	r1, [r7, #12]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	4413      	add	r3, r2
 8005d44:	440b      	add	r3, r1
 8005d46:	330c      	adds	r3, #12
 8005d48:	4602      	mov	r2, r0
 8005d4a:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8005d4c:	7dbb      	ldrb	r3, [r7, #22]
 8005d4e:	897a      	ldrh	r2, [r7, #10]
 8005d50:	490e      	ldr	r1, [pc, #56]	@ (8005d8c <WS28XX_SetPixel_RGBW_888+0xc0>)
 8005d52:	5cc8      	ldrb	r0, [r1, r3]
 8005d54:	68f9      	ldr	r1, [r7, #12]
 8005d56:	4613      	mov	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	330d      	adds	r3, #13
 8005d60:	4602      	mov	r2, r0
 8005d62:	701a      	strb	r2, [r3, #0]
    Handle->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 8005d64:	7d3b      	ldrb	r3, [r7, #20]
 8005d66:	897a      	ldrh	r2, [r7, #10]
 8005d68:	4908      	ldr	r1, [pc, #32]	@ (8005d8c <WS28XX_SetPixel_RGBW_888+0xc0>)
 8005d6a:	5cc8      	ldrb	r0, [r1, r3]
 8005d6c:	68f9      	ldr	r1, [r7, #12]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	4413      	add	r3, r2
 8005d74:	440b      	add	r3, r1
 8005d76:	330e      	adds	r3, #14
 8005d78:	4602      	mov	r2, r0
 8005d7a:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr
 8005d88:	80808081 	.word	0x80808081
 8005d8c:	08005f28 	.word	0x08005f28

08005d90 <WS28XX_Update>:
  * @param  *Handle: Pointer to WS28XX_HandleTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *Handle)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b089      	sub	sp, #36	@ 0x24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  bool answer = true;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	77fb      	strb	r3, [r7, #31]
  uint32_t i = 1;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(Handle);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff fe21 	bl	80059e8 <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < Handle->MaxPixel; pixel++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	82fb      	strh	r3, [r7, #22]
 8005daa:	e03e      	b.n	8005e2a <WS28XX_Update+0x9a>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 8005dac:	2300      	movs	r3, #0
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	e035      	b.n	8005e1e <WS28XX_Update+0x8e>
    {
      for (int b = 7; b >= 0 ; b--)
 8005db2:	2307      	movs	r3, #7
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	e02c      	b.n	8005e12 <WS28XX_Update+0x82>
      {
        if ((Handle->Pixel[pixel][rgb] & (1 << b)) == 0)
 8005db8:	8afa      	ldrh	r2, [r7, #22]
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	4413      	add	r3, r2
 8005dc2:	18ca      	adds	r2, r1, r3
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	330c      	adds	r3, #12
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	fa42 f303 	asr.w	r3, r2, r3
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <WS28XX_Update+0x62>
        {
          Handle->Buffer[i] = Handle->Pulse0;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	88db      	ldrh	r3, [r3, #6]
 8005de0:	b2d9      	uxtb	r1, r3
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	4413      	add	r3, r2
 8005de8:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8005dec:	460a      	mov	r2, r1
 8005dee:	701a      	strb	r2, [r3, #0]
 8005df0:	e009      	b.n	8005e06 <WS28XX_Update+0x76>
        }
        else
        {
          Handle->Buffer[i] = Handle->Pulse1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	891b      	ldrh	r3, [r3, #8]
 8005df6:	b2d9      	uxtb	r1, r3
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8005e02:	460a      	mov	r2, r1
 8005e04:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	dacf      	bge.n	8005db8 <WS28XX_Update+0x28>
    for (int rgb = 0; rgb < 3; rgb ++)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	ddc6      	ble.n	8005db2 <WS28XX_Update+0x22>
  for (uint16_t pixel = 0; pixel < Handle->MaxPixel; pixel++)
 8005e24:	8afb      	ldrh	r3, [r7, #22]
 8005e26:	3301      	adds	r3, #1
 8005e28:	82fb      	strh	r3, [r7, #22]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	895b      	ldrh	r3, [r3, #10]
 8005e2e:	8afa      	ldrh	r2, [r7, #22]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d3bb      	bcc.n	8005dac <WS28XX_Update+0x1c>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(Handle->HTim, Handle->Channel, (const uint32_t*)Handle->Buffer, (Handle->MaxPixel * 24) + 2) != HAL_OK)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	791b      	ldrb	r3, [r3, #4]
 8005e3c:	461c      	mov	r4, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f203 12ef 	addw	r2, r3, #495	@ 0x1ef
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	895b      	ldrh	r3, [r3, #10]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	0049      	lsls	r1, r1, #1
 8005e4c:	440b      	add	r3, r1
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3302      	adds	r3, #2
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	4621      	mov	r1, r4
 8005e58:	f7fe fd88 	bl	800496c <HAL_TIM_PWM_Start_DMA>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <WS28XX_Update+0xd6>
  {
    answer = false;
 8005e62:	2300      	movs	r3, #0
 8005e64:	77fb      	strb	r3, [r7, #31]
  }
  WS28XX_UnLock(Handle);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fdd1 	bl	8005a0e <WS28XX_UnLock>
  return answer;
 8005e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3724      	adds	r7, #36	@ 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd90      	pop	{r4, r7, pc}

08005e76 <memset>:
 8005e76:	4603      	mov	r3, r0
 8005e78:	4402      	add	r2, r0
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d100      	bne.n	8005e80 <memset+0xa>
 8005e7e:	4770      	bx	lr
 8005e80:	f803 1b01 	strb.w	r1, [r3], #1
 8005e84:	e7f9      	b.n	8005e7a <memset+0x4>
	...

08005e88 <__libc_init_array>:
 8005e88:	b570      	push	{r4, r5, r6, lr}
 8005e8a:	2600      	movs	r6, #0
 8005e8c:	4d0c      	ldr	r5, [pc, #48]	@ (8005ec0 <__libc_init_array+0x38>)
 8005e8e:	4c0d      	ldr	r4, [pc, #52]	@ (8005ec4 <__libc_init_array+0x3c>)
 8005e90:	1b64      	subs	r4, r4, r5
 8005e92:	10a4      	asrs	r4, r4, #2
 8005e94:	42a6      	cmp	r6, r4
 8005e96:	d109      	bne.n	8005eac <__libc_init_array+0x24>
 8005e98:	f000 f81a 	bl	8005ed0 <_init>
 8005e9c:	2600      	movs	r6, #0
 8005e9e:	4d0a      	ldr	r5, [pc, #40]	@ (8005ec8 <__libc_init_array+0x40>)
 8005ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8005ecc <__libc_init_array+0x44>)
 8005ea2:	1b64      	subs	r4, r4, r5
 8005ea4:	10a4      	asrs	r4, r4, #2
 8005ea6:	42a6      	cmp	r6, r4
 8005ea8:	d105      	bne.n	8005eb6 <__libc_init_array+0x2e>
 8005eaa:	bd70      	pop	{r4, r5, r6, pc}
 8005eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb0:	4798      	blx	r3
 8005eb2:	3601      	adds	r6, #1
 8005eb4:	e7ee      	b.n	8005e94 <__libc_init_array+0xc>
 8005eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eba:	4798      	blx	r3
 8005ebc:	3601      	adds	r6, #1
 8005ebe:	e7f2      	b.n	8005ea6 <__libc_init_array+0x1e>
 8005ec0:	08006028 	.word	0x08006028
 8005ec4:	08006028 	.word	0x08006028
 8005ec8:	08006028 	.word	0x08006028
 8005ecc:	0800602c 	.word	0x0800602c

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
